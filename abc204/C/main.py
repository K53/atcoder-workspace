#!/usr/bin/env python3
import sys
sys.setrecursionlimit(10 ** 9) #再帰回数の限界を変更


def solve(N: int, M: int, A: "List[int]", B: "List[int]"):
    field = [[] for _ in range(N)]
    ans = N
    for aa, bb in zip(A, B):
        field[aa - 1].append(bb - 1)
    
    INF = 10 ** 9
    def dfs(dist: "List[List[to]]", now: int):
        for next in field[now]:
            if dist[now] != INF:
                continue
            dist[next] = dist[now] + 1
            dfs(dist, next)
        
    dist = [INF] * N
    dfs(dist, 0)
    for s in range(N):
        ans += dfs(field, s)
    print(ans)
    return


# Generated by 2.3.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    A = [int()] * (M)  # type: "List[int]"
    B = [int()] * (M)  # type: "List[int]"
    for i in range(M):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    solve(N, M, A, B)

if __name__ == '__main__':
    main()
