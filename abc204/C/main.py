#!/usr/bin/env python3
import sys

def solve(N: int, M: int, A: "List[int]", B: "List[int]"):
    G = [[] for _ in range(N)]
    ans = 0
    for aa, bb in zip(A, B):
        G[aa - 1].append(bb - 1)
    from collections import deque
    def bfs(G: "List[to]", start_node: int) -> list:
        q = deque()
        dist = [0] * len(G)
        q.append(start_node)
        dist[start_node] = 1
        while q:
            now = q.popleft()
            for next in G[now]:
                if dist[next]:
                    continue
                q.append(next)
                dist[next] = 1
        return dist
    for s in range(N):
        d = bfs(G, s)
        ans += sum(d)
    print(ans)
    return


# Generated by 2.3.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    A = [int()] * (M)  # type: "List[int]"
    B = [int()] * (M)  # type: "List[int]"
    for i in range(M):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    solve(N, M, A, B)

if __name__ == '__main__':
    main()
