#!/usr/bin/env python3
import sys


def solve(N: int, T: "List[int]"):
    S = sum(T)
    hS = S // 2
    # dp[i][t] := i個選んで時間をtにすることができる。
    dp = [[0] * (10 ** 5 + 1) for _ in range(N + 1)]
    dp[0][0] = 1
    
    for i in range(1, N + 1):
        for j in range(10 ** 5 + 1):
            if dp[i - 1][j]:
                # その料理を選ぶ
                if j + T[i - 1] < 10 ** 5 + 1:
                    dp[i][j + T[i - 1]] = 1
                # 選ばない
                dp[i][j] = 1
    # for i in range(N):
    #     print(dp[i][:25])

    if dp[N][hS]:
        print(max(hS, S - hS))
        return
    for i in range(10 ** 5):
        if dp[N][hS + i]:
            print(max(hS + i, S - (hS + i)))
            return

    return


# Generated by 2.3.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    T = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, T)

if __name__ == '__main__':
    main()
