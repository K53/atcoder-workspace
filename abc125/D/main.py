#!/usr/bin/env python3
import sys


def solve(N: int, A: "List[int]"):
    INF = 10 ** 10
    dp = [[-INF] * 2 for _ in range(N + 1)]
    dp[0][0] = 0
    for i in range(N):
        for rev in range(2):
            if dp[i][rev] == -INF:
                continue
            if rev:
                # そのまま足す
                dp[i + 1][0] = max(dp[i + 1][0], dp[i][rev] - A[i])
                # 反転する
                dp[i + 1][1] = max(dp[i + 1][1], dp[i][rev] + A[i])
            else:
                # そのまま足す
                dp[i + 1][0] = max(dp[i + 1][0], dp[i][rev] + A[i])
                # 反転する
                dp[i + 1][1] = max(dp[i + 1][1], dp[i][rev] - A[i])
    print(dp[-1][0])
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, A)

if __name__ == '__main__':
    main()
