#!/usr/bin/env python3
import sys
import math

class SegmentTree:
    def __init__(self, monoid: int, bottomLen: int):
        self.monoid = monoid
        self.bottomLen = bottomLen
        self.offset = self.bottomLen        # セグ木の最下層の最初のインデックスに合わせるためのオフセット
        self.segLen = self.bottomLen * 2
        self.tree = [monoid] * self.segLen

    def pointUpdate(self, index: int, val: int):
        segIndex = index + self.offset
        self.tree[segIndex] = val
        while True:
            segIndex //= 2
            if segIndex == 0:
                break
            self.tree[segIndex] = math.gcd(self.tree[segIndex * 2], self.tree[segIndex * 2 + 1])
        return

    def query(self, l: int, r: int):
        l += self.offset
        r += self.offset
        res = 0
        while l < r:
            if l % 2 == 1:
                res = math.gcd(res, self.tree[l])
                l += 1
            l //= 2
            if r % 2 == 1:
                res = math.gcd(res, self.tree[r - 1])
                r -= 1
            r //= 2
        return res

def solve(N: int, A: "List[int]"):
    tr = SegmentTree(monoid=0, bottomLen=2**18)
    for i in range(N):
        tr.pointUpdate(i, A[i])
    # print(tr.tree)
    ans = 0
    for i in range(N):
        ans = max(ans, math.gcd(tr.query(0, i), tr.query(i + 1, N)))
    print(ans)
    return


# Generated by 2.6.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, A)

if __name__ == '__main__':
    main()
