#!/usr/bin/env python3
import sys


def solve(N: int, A: "List[int]"):
    import math
    lg = [A[0]]
    for aa in A[1:]:
        lg.append(math.gcd(lg[-1], aa))
    rg = [A[-1]]
    for aa in A[:-1][::-1]:
        rg.append(math.gcd(rg[-1], aa))
    rg = rg[::-1]
    ans = 0
    for i in range(N):
        if i == 0:
            ans = max(ans, rg[1])
        elif i == N - 1:
            ans = max(ans, lg[N - 2])
        else:
            ans = max(ans, math.gcd(rg[i + 1], lg[i - 1]))
    print(ans)
    return


# Generated by 2.6.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, A)

if __name__ == '__main__':
    main()
