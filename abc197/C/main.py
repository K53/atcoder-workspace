#!/usr/bin/env python3
import sys
import itertools

def solve(N: int, A: "List[int]"):
    if N == 1:
        print(A[0])
        return
    # print(1073741824 | 1073741823)
    # print(1073741824 ^ 1073741823)
    l = [i for i in range(1, N)]
    c = 10 ** 16
    for n in range(1, N):
        for v in itertools.combinations(l, n):
            # splited = []
            # anses = []
            res = 0
            before = 0
            for i in v:
                # splited.append(A[before:i])
                ans = 0
                for aa in A[before:i]:
                    ans |= aa
                before = i
                # anses.append(ans)
                res ^= ans
            # splited.append(A[before:])
            ans = 0
            for aa in A[before:]:
                ans |= aa
            # anses.append(ans)
            # print(splited)
            # print(anses)
            res ^= ans
            c = min(c, res)
    print(c)
        
        
            

            
    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, A)

if __name__ == '__main__':
    main()
