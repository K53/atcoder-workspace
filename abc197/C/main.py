#!/usr/bin/env python3
import sys
import itertools

def solve(N: int, A: "List[int]"):
    if N == 1: 
        print(A[0])
        return
    ans = 10 ** 16
    for case in range(1, 2 ** (N - 1)):
        now = 0
        l = []
        for b in range(N):
            if case >> b & 1:
                l.append(A[now:b + 1])
                now = b + 1
        l.append(A[now:])
        xorsum = 0
        for ll in l:
            orsum = 0
            for num in ll:
                orsum |= num
            xorsum ^= orsum
        ans = min(ans, xorsum)
    print(ans)
    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, A)

if __name__ == '__main__':
    main()
