#!/usr/bin/env python3
import sys

# Generated by 2.9.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    H, W, T = map(int, sys.stdin.readline().split())
    G = []
    sx, sy = -1, -1
    gx, gy = -1, -1
    for hh in range(H):
        G.append(sys.stdin.readline()[:-1])
        for ww in range(W):
            if G[hh][ww] == "S":
                sx, sy = ww, hh
            if G[hh][ww] == "G":
                gx, gy = ww, hh
    
    import heapq
    INF = 10 ** 16       # *2
    def dijkstra(G: "List[str]", H: int, W: int, startY: int, startX: int, C: int) -> list:
        hq = []
        heapq.heapify(hq)
        # Set start info
        dist = [[INF] * W for _ in range(H)]
        dist[startY][startX] = 0            # *1
        heapq.heappush(hq, (dist[startY][startX], startY, startX))
        # dijkstra
        while hq:
            min_cost, nowY, nowX = heapq.heappop(hq)
            if min_cost > dist[nowY][nowX]:
                continue
            for dy, dx in [(1, 0), (-1, 0), (0, 1), (0, -1)]:
                nextY = nowY + dy
                nextX = nowX + dx
                if nextY < 0 or nextX < 0 or nextY >= H or nextX >= W:
                    continue
                cost = C if G[nextY][nextX] == "#" else 1
                if dist[nextY][nextX] > dist[nowY][nowX] + cost:
                    dist[nextY][nextX] = dist[nowY][nowX] + cost
                    heapq.heappush(hq, (dist[nextY][nextX], nextY, nextX))
        return dist


    # True ------ ok | ng ---- False
    def is_ok(k: int):
        d = dijkstra(G, H, W, sy, sx, k)
        return d[gy][gx] <= T

    def binSearch(ok: int, ng: int):
        # print(ok, ng)              # はじめの2値の状態
        while abs(ok - ng) > 1:     # 終了条件（差が1となり境界を見つけた時)
            mid = (ok + ng) // 2
            # print("target > ", mid)
            result = is_ok(mid)
            # print(result)
            if result:
                ok = mid            # midが条件を満たすならmidまではokなのでokの方を真ん中まで持っていく
            else:
                ng = mid            # midが条件を満たさないならmidまではngなのでngの方を真ん中まで持っていく
            # print(ok, ng)          # 半分に切り分ける毎の2値の状態
        return ok    # 関数呼び出し時の引数のngは絶対評価されないのでngに書く値が答えになりうるならその数マイナス1を指定する。

    print(binSearch(1, 10 ** 9 + 1))
    return

if __name__ == '__main__':
    main()
