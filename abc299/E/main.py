#!/usr/bin/env python3
import sys
from collections import deque
def bfs(G, H, W, startY, startX) -> list:
    # ゴールやスタートを任意に設定できる問題では開始点が壁であるケースに注意!!!!
    INF = 10 ** 16
    q = deque()
    dist = [[INF] * W for _ in range(H)]
    q.append((startY, startX))
    dist[startY][startX] = 0
    while q:
        nowy, nowx = q.popleft()
        for dx, dy in [(0, 1), (1, 0), (-1, 0), (0, -1)]:
            nexty = nowy + dy
            nextx = nowx + dx
            if nexty < 0 or nextx < 0 or nexty >= H or nextx >= W or dist[nexty][nextx] != INF or G[nexty][nextx] == "#":
                continue
            q.append((nexty, nextx))
            dist[nexty][nextx] = dist[nowy][nowx] + 1
    return dist


YES = "Yes"  # type: str
NO = "No"  # type: str


def solve(N: int, M: int, u: "List[int]", v: "List[int]", K: int, p: "List[int]", d: "List[int]"):
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    u = [int()] * (M)  # type: "List[int]"
    v = [int()] * (M)  # type: "List[int]"
    for i in range(M):
        u[i] = int(next(tokens))
        v[i] = int(next(tokens))
    K = int(next(tokens))  # type: int
    p = [int()] * (K)  # type: "List[int]"
    d = [int()] * (K)  # type: "List[int]"
    for i in range(K):
        p[i] = int(next(tokens))
        d[i] = int(next(tokens))
    solve(N, M, u, v, K, p, d)

if __name__ == '__main__':
    main()
