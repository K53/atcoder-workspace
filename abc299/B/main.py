#!/usr/bin/env python3
import sys
from collections import defaultdict

def solve(N: int, T: int, C: "List[int]", R: "List[int]"):
    col = defaultdict(list)
    for i in range(N):
        cc, rr = C[i], R[i]
        col[cc].append((rr, i + 1))
    if len(col[T]) != 0:
        q = sorted(col[T])
        print(q[-1][-1])
    else:
        q = sorted(col[C[0]])
        print(q[-1][-1])
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    T = int(next(tokens))  # type: int
    C = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    R = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, T, C, R)

if __name__ == '__main__':
    main()
