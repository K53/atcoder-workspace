#!/usr/bin/env python3
import sys

def solve(N: int, s: "List[str]"):
    # N = 3
    # s = ["xA", "Bx", "BA"]
    xA = 0
    BA = 0
    Bx = 0
    ans = 0
    for ss in s:
        for i in range(len(ss) - 1):
            if ss[i:(i + 2)] == "AB":
                ans += 1
        if ss[0] == "B" and ss[-1] == "A":
            BA += 1
        elif ss[0] == "B":
            Bx += 1
        elif ss[-1] == "A":
            xA += 1
    # print(xA, BA, Bx)
    if BA >= 1:
        ans += BA - 1
        BA = 1
        if xA >= 1 and Bx >= 1:
            ans += 2
            BA = 0
            xA -= 1
            Bx -= 1
    if xA == Bx:
        ans += xA
    else:
        ans += min(xA, Bx) + BA
    print(ans)
    return

# Generated by 2.11.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    s = [next(tokens) for _ in range(N)]  # type: "List[str]"
    solve(N, s)

if __name__ == '__main__':
    main()
