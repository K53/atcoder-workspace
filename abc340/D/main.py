#!/usr/bin/env python3
import sys
import heapq
INF = 10 ** 16
# グラフ + 座標圧縮 の問題の場合、開始点と終了点を圧縮後の座標の集合に加え忘れないこと。
class Dijkstra():
    def __init__(self, N: int) -> None:
        self.N = N 
        self.G = [[] for _ in range(N)]
        return
    
    # 辺の追加
    def addEdge(self, fromNode: int, toNode: int, cost: int):
        self.G[fromNode].append((cost, toNode))
        return

    # "toノードに到達するための辺の番号"を同時に持たせることで経路復元時にedge_numを使用できる。
    # def addEdge(self, fromNode: int, toNode: int, cost: int, edge_num: int):
    #     self.G[fromNode].append((cost, toNode, edge_num))
    #     return
    
    def build(self, startNode: int):
        """
        多始点ダイクストラの場合、初期化するdistとヒープを各スタートノード分やってbuildすればいい。
        これは単一の超頂点をスタートとして与えられた多始点それぞれにコスト0の辺が伸びていたと解釈すれば成立すると分かる。
        """
        hq = []
        heapq.heapify(hq)
        # Set start info
        dist = [INF] * self.N
        # prev = [-1] * self.N # 経路復元する場合は移動時に直前の頂点や辺を記録して遷移していく。
        heapq.heappush(hq, (0, startNode))
        dist[startNode] = 0
        # dijkstra
        while hq:
            min_cost, now = heapq.heappop(hq)
            if min_cost > dist[now]:
                continue
            for cost, next in self.G[now]:
                if dist[next] > dist[now] + cost:
                    dist[next] = dist[now] + cost
                    # prev[next] = now # 頂点nextに至る直前の頂点(now)または辺(edge_num)を更新。
                    heapq.heappush(hq, (dist[next], next))
        return dist

def solve(N: int, A: "List[int]", B: "List[int]", X: "List[int]"):
    dk = Dijkstra(N)
    for i in range(N - 1):
        dk.addEdge(i, i + 1, A[i])
        dk.addEdge(i, X[i] - 1, B[i])
    d = dk.build(startNode=0)
    print(d[-1])
    return


# Generated by 2.13.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int()] * (N - 1)  # type: "List[int]"
    B = [int()] * (N - 1)  # type: "List[int]"
    X = [int()] * (N - 1)  # type: "List[int]"
    for i in range(N - 1):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
        X[i] = int(next(tokens))
    solve(N, A, B, X)

if __name__ == '__main__':
    main()
