#!/usr/bin/env python3
from collections import defaultdict
import sys


def solve(N: int, K: int, X: "List[int]", Y: "List[int]"):
    if K == 1:
        print("Infinity")
        return
    ans = 0
    for center in range(N):
        d = defaultdict(set)
        cx, cy = X[center], Y[center]
        x0 = defaultdict(int)
        pa = set()
        for i in range(N - 1):
            for j in range(i + 1, N):
                ix, iy = X[i], Y[i]
                jx, jy = X[j], Y[j]
                if cx - jx == 0 or cx - ix == 0:
                    x0[cx] += 1
                    continue
                # cy - iy cx - ix
                # cy - jy cx - jx
                # print((cy - iy) * (cx - jx) , (cy - jy) * (cx - ix))
                if (cy - iy) * (cx - jx) == (cy - jy) * (cx - ix):
                    d[(cy - iy) * (cx - jx)].add(center)
                    d[(cy - iy) * (cx - jx)].add(i)
                    d[(cy - iy) * (cx - jx)].add(j)
                    ans += 1
                
        # for dd in d.items():
        #     print(dd)
    ans //= 3
    for xx in x0.values():
        if xx // 3 >= K:
            ans += 1
    
    print(ans)

    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    X = [int()] * (N)  # type: "List[int]"
    Y = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        X[i] = int(next(tokens))
        Y[i] = int(next(tokens))
    solve(N, K, X, Y)

if __name__ == '__main__':
    main()
