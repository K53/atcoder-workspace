#!/usr/bin/env python3
import sys

def solve(N: int, X: int, Y: int):
    from collections import deque
    def bfs(edges: "List[to]", start_node: int) -> list:
        INF = 10 ** 16
        q = deque()
        dist = [INF] * len(edges)
        q.append(start_node)
        dist[start_node] = 0
        while q:
            now = q.popleft()
            for next in edges[now]:
                if dist[next] != INF:
                    continue
                q.append(next)
                dist[next] = dist[now] + 1
        return dist
    field = [[] for _ in range(N)]
    for i in range(N - 1):
        field[i].append(i + 1)
        field[i + 1].append(i)
    field[X - 1].append(Y - 1)
    field[Y - 1].append(X - 1)
    ans = [0] * N
    for i in range(N):
        d = bfs(field, i)
        # print(i, d)
        for j in range(i + 1, N):
            if i == j:
                continue
            ans[d[j]] += 1
    print(*ans[1:], sep="\n")
    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    X = int(next(tokens))  # type: int
    Y = int(next(tokens))  # type: int
    solve(N, X, Y)

if __name__ == '__main__':
    main()
