#!/usr/bin/env python3
import sys
import queue
INF = 10 ** 16

def bfs(edges: "List[to]", start_node: int) -> list:
    q = queue.Queue()
    dist = [INF] * len(edges)
    q.put(start_node)
    dist[start_node] = 0
    while not q.empty():
        now = q.get()
        for next in edges[now]:
            if dist[next] != INF:
                continue
            q.put(next)
            dist[next] = dist[now] + 1
    return dist

def solve(N: int, X: int, Y: int):
    N = Y = 2 * 10 ** 3
    X = 1
    edges = [[] for _ in range(N)]
    for i in range(N - 1):
        edges[i].append(i + 1)
        edges[i + 1].append(i)
    edges[X - 1].append(Y - 1)
    edges[Y - 1].append(X - 1)

    ans = [0] * N
    for i in range(N):
        for j in bfs(edges, i):
            ans[j] += 1
    # for a in ans[1:]:
    #     print(a // 2)
    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    X = int(next(tokens))  # type: int
    Y = int(next(tokens))  # type: int
    solve(N, X, Y)

if __name__ == '__main__':
    main()
