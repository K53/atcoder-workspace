#!/usr/bin/env python3
import sys

def solve(N: int, M: int, x: "List[int]", y: "List[int]"):
    G = [0] * N
    for i in range(M):
        G[x[i] - 1] |= 1 << (y[i] - 1)
    dp = [0] * (1 << N)
    dp[0] = 1
    #集合を添字の小さい方から試す
    for s in range(1, 1 << N):
        #Sに属する全ての要素を考える
        for i in range(N):
            # (s >> i) & 1) : ノードiがsに属している。
            # not (G[i] & s) : そのノードiからの遷移先とsが共通部分を持たない。1つでもすでに集合に含まれてしまっていたら入れない。
            if ((s >> i) & 1) and (not (G[i] & s)):
                dp[s] += dp[s ^ (1 << i)] # sのビットが立っているもののうち、1ビットが0のものを足す。
    # for i in range(1 << N):
    #     print(bin(i), dp[i])
    print(dp[-1])


# Generated by 2.6.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    x = [int()] * (M)  # type: "List[int]"
    y = [int()] * (M)  # type: "List[int]"
    for i in range(M):
        x[i] = int(next(tokens))
        y[i] = int(next(tokens))
    solve(N, M, x, y)

if __name__ == '__main__':
    main()
