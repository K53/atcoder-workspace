#!/usr/bin/env python3
import sys
from collections import defaultdict

def solve(N: int, X: int, w: "List[int]"):
    h = N // 2
    p = w[:h]
    q = w[h:]

    ps = defaultdict(int)
    for i in range(2 ** len(p)):
        s = 0
        for b in range(len(p)):
            if (i >> b) & 1:
                s += p[b]
        ps[s] += 1
    qs = defaultdict(int)
    for i in range(2 ** len(q)):
        s = 0
        for b in range(len(q)):
            if (i >> b) & 1:
                s += q[b]
        qs[s] += 1
    
    ans = 0
    for num, count in ps.items():
        rest = X - num
        ans += qs[rest] * count
    print(ans)        
    return

# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    X = int(next(tokens))  # type: int
    w = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, X, w)

if __name__ == '__main__':
    main()
