#!/usr/bin/env python3
import sys

MOD = 998244353  # type: int

def solve(H: int, W: int, K: int, x: "List[int]", y: "List[int]"):
    x, y = y, x # この問題x,yの順序が良くない
    dp = [[0 for _ in range(2)] for _ in range(2)]
    dp_next = [[0 for _ in range(2)] for _ in range(2)]
    dp[0][0] = 1
    for _ in range(K):
        dp_next[0][0] = dp[0][1] + dp[1][0]
        dp_next[0][0] %= MOD
        dp_next[0][1] = dp[0][0] * (W - 1) + dp[1][1] + dp[0][1] * (W - 2)
        dp_next[0][1] %= MOD
        dp_next[1][0] = dp[0][0] * (H - 1) + dp[1][1] + dp[1][0] * (H - 2)
        dp_next[1][0] %= MOD
        dp_next[1][1] = dp[0][1] * (H - 1) + dp[1][0] * (W - 1) + dp[1][1] * ((W - 2) + (H - 2))
        dp_next[1][1] %= MOD
        dp = dp_next
        dp_next = [[0 for _ in range(2)] for _ in range(2)]
    if y[1] - 1 == y[0] - 1 and x[1] - 1 == x[0] - 1:
        print(dp[0][0])
    elif y[1] - 1 == y[0] - 1 and x[1] - 1 != x[0] - 1:
        print(dp[0][1] * pow((W - 1), MOD - 2, MOD) % MOD)
    elif y[1] - 1 != y[0] - 1 and x[1] - 1 == x[0] - 1:
        print(dp[1][0] * pow((H - 1), MOD - 2, MOD) % MOD)
    else:
        print((dp[1][1] * pow((H - 1) * (W - 1), MOD - 2, MOD)) % MOD)
    return


#    1 o
# 17 1 0
# o  0 0

#    1 o
# 17 0 1
# o  0 0

# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    H = int(next(tokens))  # type: int
    W = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    x = [int()] * (2)  # type: "List[int]"
    y = [int()] * (2)  # type: "List[int]"
    for i in range(2):
        x[i] = int(next(tokens))
        y[i] = int(next(tokens))
    solve(H, W, K, x, y)

if __name__ == '__main__':
    main()
