#!/usr/bin/env python3
import sys

MOD = 998244353  # type: int


def solve(H: int, W: int, K: int, X: "List[int]", Y: "List[int]"):
    x, y = Y[0], Y[1]
    ll = []
    if  W - x == 0 and H - y == 0:
        ll = [[
            [0, 1, 0],
            [1, 0, 0],
            [0, 0, 0]
        ] for _ in range(K)]
    elif W - x == 0:
        ll = [[
            [0, 1, 0],
            [1, 0, 0],
            [0, 1, 0]
        ] for _ in range(K)]
    elif H - y == 0:
        ll = [[
            [0, 1, 0],
            [1, 0, 1],
            [0, 0, 0]
        ] for _ in range(K)]
    else:
        ll = [[
            [0, 1, 0],
            [1, 0, 1],
            [0, 1, 0]
        ] for _ in range(K)]
    
    for i in range(K - 1):
        ll[i + 1][0][0] = ll[i][0][0] * (x - 1 + y - 1) + (ll[i][0][1] + ll[i][0][2]) * (x - 1) + (ll[i][1][0] + ll[i][2][0]) * (y - 1)
        ll[i + 1][0][2] = ll[i][0][2] * (W - x + y - 1) + (ll[i][0][0] + ll[i][0][1]) * (W - x) + (ll[i][1][2] + ll[i][2][2]) * (y - 1)
        ll[i + 1][2][0] = ll[i][2][0] * (x - 1 + H - y) + (ll[i][2][1] + ll[i][2][2]) * (x - 1) + (ll[i][0][0] + ll[i][1][0]) * (H - y)
        ll[i + 1][2][2] = ll[i][2][2] * (W - x + H - y) + (ll[i][2][0] + ll[i][2][1]) * (W - x) + (ll[i][0][2] + ll[i][1][2]) * (H - y)
        ll[i + 1][0][1] = ll[i][0][0] + ll[i][0][2] + ll[i][0][1] * (y - 1) + (ll[i][1][1] + ll[i][2][1]) * y
        ll[i + 1][1][0] = ll[i][0][0] + ll[i][2][0] + ll[i][1][0] * (x - 1) + (ll[i][1][1] + ll[i][1][2]) * x
        ll[i + 1][1][2] = ll[i][0][2] + ll[i][2][2] + ll[i][1][2] * (W - x) + (ll[i][1][0] + ll[i][1][1]) * x
        ll[i + 1][2][1] = ll[i][2][0] + ll[i][2][2] + ll[i][2][1] * (H - y) + (ll[i][0][1] + ll[i][1][1]) * y

        ll[i + 1][1][1] = ll[i][0][1] + ll[i][1][0] + ll[i][2][1] + ll[i][1][2]
        print(ll)
    print(ll)
    return


# Generated by 2.11.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    H = int(next(tokens))  # type: int
    W = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    x = [int()] * (2)  # type: "List[int]"
    y = [int()] * (2)  # type: "List[int]"
    for i in range(2):
        x[i] = int(next(tokens))
        y[i] = int(next(tokens))
    solve(H, W, K, x, y)

if __name__ == '__main__':
    main()
