#!/usr/bin/env python3
import sys

YES = "Yes"  # type: str
NO = "No"  # type: str


def solve(N: int, M: int, A: "List[int]", B: "List[int]", C: "List[int]", D: "List[int]"):
    from itertools import permutations
    l = permutations(range(N))
    nodes = [[] for _ in range(N)]
    for i in range(M):
        nodes[C[i] - 1].append(D[i] - 1)
        nodes[D[i] - 1].append(C[i] - 1)
    # for i in range(N):
    #     print(nodes[i])

    for ll in l:
        # print(ll)
        # if ll == (2,1, 0, 3):
        #     print("kkk")
        for aa, bb in zip(A, B):
            # ll[aa - 1] ー ll[bb - 1] okか
            # if ll == (2,1, 0, 3):
            #     print(aa - 1, bb - 1, ll[aa - 1], ll[bb - 1])

            if not ll[bb - 1] in nodes[ll[aa - 1]]:
                break
        else:
            print(YES)
            return
    print(NO)
    return


# Generated by 2.11.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    A = [int()] * (M)  # type: "List[int]"
    B = [int()] * (M)  # type: "List[int]"
    for i in range(M):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    C = [int()] * (M)  # type: "List[int]"
    D = [int()] * (M)  # type: "List[int]"
    for i in range(M):
        C[i] = int(next(tokens))
        D[i] = int(next(tokens))
    solve(N, M, A, B, C, D)

if __name__ == '__main__':
    main()
