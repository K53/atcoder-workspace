#!/usr/bin/env python3
import sys
from collections import defaultdict

def solve(N: int, A: "List[int]", C: "List[int]"):
    d = defaultdict(lambda : 10 ** 10)
    for aa, cc in zip(A, C):
        d[cc] = min(d[cc], aa)
    ans = -1
    # res = -1
    for k, v in d.items():
        if ans < v:
            ans = v
    print(ans)
    return


# Generated by 2.13.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int()] * (N)  # type: "List[int]"
    C = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        A[i] = int(next(tokens))
        C[i] = int(next(tokens))
    solve(N, A, C)

if __name__ == '__main__':
    main()
