#!/usr/bin/env python3
import sys

INF = 10 ** 16
class WarshallFloyd():
    def __init__(self, N):
        self.N = N
        dp = [[INF] * N for _ in range(N)]
        for i in range(N):
            dp[i][i] = 0
        self.dp = dp
    
    # 自己ループを持つグラフの扱いは注意。
    def addEdge(self, fromNode: int, toNode: int, cost: int = 1):
        self.dp[fromNode][toNode] = cost
    
    def build(self):
        """
        0 〜 (via - 1)までの地点だけを利用して求めたdpテーブルを使い、viaを経由地とした時の更新処理している。
        """
        for via in range(self.N):
            for start in range(self.N):
                for goal in range(self.N):
                    self.dp[start][goal] = min(self.dp[start][goal], self.dp[start][via] + self.dp[via][goal])
        return self.dp

def solve(N: int, M: int, L: int, A: "List[int]", B: "List[int]", C: "List[int]", Q: int, s: "List[int]", t: "List[int]"):
    wf = WarshallFloyd(N)
    for aa, bb, cc in zip(A, B, C):
        wf.addEdge(aa - 1, bb - 1, cc)
        wf.addEdge(bb - 1, aa - 1, cc)
    d = wf.build()
    wf2 = WarshallFloyd(N)
    for start in range(N):
        for goal in range(N):
            if d[start][goal] <= L:
                wf2.addEdge(start, goal, 1)
    ans = wf2.build()
    for ss, tt in zip(s, t):
        print(-1 if ans[ss - 1][tt - 1] == INF else ans[ss - 1][tt - 1] - 1)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    L = int(next(tokens))  # type: int
    A = [int()] * (M)  # type: "List[int]"
    B = [int()] * (M)  # type: "List[int]"
    C = [int()] * (M)  # type: "List[int]"
    for i in range(M):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
        C[i] = int(next(tokens))
    Q = int(next(tokens))  # type: int
    s = [int()] * (Q)  # type: "List[int]"
    t = [int()] * (Q)  # type: "List[int]"
    for i in range(Q):
        s[i] = int(next(tokens))
        t[i] = int(next(tokens))
    solve(N, M, L, A, B, C, Q, s, t)

if __name__ == '__main__':
    main()
