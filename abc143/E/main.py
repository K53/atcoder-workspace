#!/usr/bin/env python3
import sys
import heapq
INF = 10 ** 16
# グラフ + 座標圧縮 の問題の場合、開始点と終了点を圧縮後の座標の集合に加え忘れないこと。
class Dijkstra():
    def __init__(self, N: int, L) -> None:
        self.N = N 
        self.L = L
        self.G = [[] for _ in range(N)]
        return
    
    # 辺の追加
    def addEdge(self, fromNode: int, toNode: int, cost: int):
        self.G[fromNode].append((cost, toNode))
        return

    def build(self, startNode: int):
        hq = []
        heapq.heapify(hq)
        # Set start info
        dist = [[INF, INF]] * self.N
        # prev = [-1] * self.N # 経路復元する場合は移動時に直前の頂点や辺を記録して遷移していく。
        heapq.heappush(hq, (0, 0, startNode))
        dist[startNode] = [0, 0] # 必要燃料, 補給
        # dijkstra
        while hq:
            min_cost, min_fill, now = heapq.heappop(hq)
            if min_fill > dist[now][1] or \
                (min_fill == dist[now][1] and min_cost > dist[now][0]):
                continue
            for cost, next in self.G[now]:
                if dist[now][0] + cost >= self.L:
                    if dist[next][0] > dist[now][0] + cost:
                        dist[next][0] = dist[now][0] + cost
                        dist[next][1] = dist[now][1]
                        heapq.heappush(hq, (dist[next][0], dist[next][1], next))
                else:
                    if dist[next][1] > dist[now][1] + 1:
                        dist[next][0] = 0
                        dist[next][1] = dist[now][1] + 1
                        # prev[next] = now # 頂点nextに至る直前の頂点(now)または辺(edge_num)を更新。
                        heapq.heappush(hq, (dist[next][0], dist[next][1], next))
        return dist

def solve(N: int, M: int, L: int, A: "List[int]", B: "List[int]", C: "List[int]", Q: int, s: "List[int]", t: "List[int]"):
    dk = Dijkstra(N, L)
    for aa, bb, cc in zip(A, B, C):
        dk.addEdge(aa - 1, bb - 1, cc)
        dk.addEdge(bb - 1, aa - 1, cc)
    for ss, tt in zip(s, t):
        d = dk.build(ss - 1)
        print(d)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    L = int(next(tokens))  # type: int
    A = [int()] * (M)  # type: "List[int]"
    B = [int()] * (M)  # type: "List[int]"
    C = [int()] * (M)  # type: "List[int]"
    for i in range(M):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
        C[i] = int(next(tokens))
    Q = int(next(tokens))  # type: int
    s = [int()] * (Q)  # type: "List[int]"
    t = [int()] * (Q)  # type: "List[int]"
    for i in range(Q):
        s[i] = int(next(tokens))
        t[i] = int(next(tokens))
    solve(N, M, L, A, B, C, Q, s, t)

if __name__ == '__main__':
    main()
