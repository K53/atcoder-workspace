#!/usr/bin/env python3
import sys
sys.setrecursionlimit(10 ** 9)

def solve(N: int, a: "List[int]", b: "List[int]"):
    G = [[] for _ in range(N)]
    for i in range(N - 1):
        G[a[i] - 1].append(b[i] - 1)
        G[b[i] - 1].append(a[i] - 1)

    edges = [[-1] * N for _ in range(N)]
    def dfs(pre: int, now: int, line: int):
        # print(pre, now)
        # [2] 
        # そのノードに初めて到着した時のみ
        # <<== 行きがけ順ならここを使う (初めて降り立つ時にしか実行されない)
        # --- 子ノードを探索 -----------------------
        for next in G[now]: 
            if next == pre: 
                continue
            # [1]
            # そのノードから子ノードに向かって出発しようとした時
            for i in range(1, N + 1):
                if pre != -1 and edges[now][pre] != -1:
                    continue
                edges[now][next] = i
                edges[next][now] = i
                break
            dfs(now, next, i)
            # [4]
            # そのノードに子ノードから帰ってきて到着した時
            # <== 木上のDPをする時はここを使うこと。
            # <== 領域[3]を使うと子から帰る時に親を操作するようになり直感に反する(あと1頂点のみのケースとかで例外処理が面倒)。
        # [3]
        # そのノードから親ノードに帰ろうと出発した時
        # <<== 帰りがけ順ならここを使う
        return
    dfs(-1, 0, 0)
    ans = []
    print(edges)
    for i in range(N - 1):
        if edges[a[i] - 1][b[i] - 1] == -1:
            ans.append(edges[b[i] - 1][a[i] - 1])
        else:
            ans.append(edges[a[i] - 1][b[i] - 1])
    print(max(ans))
    print(*ans, sep="\n")
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    a = [int()] * (N - 1)  # type: "List[int]"
    b = [int()] * (N - 1)  # type: "List[int]"
    for i in range(N - 1):
        a[i] = int(next(tokens))
        b[i] = int(next(tokens))
    solve(N, a, b)

if __name__ == '__main__':
    main()
