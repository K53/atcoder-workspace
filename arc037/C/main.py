#!/usr/bin/env python3
import sys
import bisect

def solve(N: int, K: int, a: "List[int]", b: "List[int]"):
    a.sort()
    b.sort()
    # [0] ~ True ------ ok | ng ---- False  ~ [a[-1] * b[-1]]
    def is_ok(k: int):
        count = 0
        for aa in a:
            # bisect_leftでは一致した時(b = k // aa)にカウントし落とす。
            # k / a <- 小数にはしない。浮動小数点の問題で前後が正確に測れない。
            count += bisect.bisect_right(b, k // aa)
        return count < K

    def binSearch(ok: int, ng: int):
        # print(ok, ng)              # はじめの2値の状態
        while abs(ok - ng) > 1:     # 終了条件（差が1となり境界を見つけた時)
            mid = (ok + ng) // 2
            # print("target > ", mid)
            result = is_ok(mid)
            # print(result)
            if result:
                ok = mid            # midが条件を満たすならmidまではokなのでokの方を真ん中まで持っていく
            else:
                ng = mid            # midが条件を満たさないならmidまではngなのでngの方を真ん中まで持っていく
            # print(ok, ng)          # 半分に切り分ける毎の2値の状態
        return ng    
    print(binSearch(0, a[-1] * b[-1]))
    return


# Generated by 2.6.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    a = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    b = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, K, a, b)

if __name__ == '__main__':
    main()
