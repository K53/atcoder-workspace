#!/usr/bin/env python3
import sys

NO = "Impossible"  # type: str

INF = 10 ** 16
class WarshallFloyd():
    def __init__(self, N):
        self.N = N
        dp = [[INF] * N for _ in range(N)]
        sur = [[0] * N for _ in range(N)]
        for i in range(N):
            dp[i][i] = 0
        self.dp = dp
        self.sur = sur
    
    # 自己ループを持つグラフの扱いは注意。
    def addEdge(self, fromNode: int, toNode: int, cost: int = 1, ss: int = 0):
        self.dp[fromNode][toNode] = cost
        self.sur[fromNode][toNode] = ss
    
    def build(self):
        """
        やっていることとしては、
        0 〜 (via - 1)までの地点だけを利用して求めたdpテーブルを使い、viaを経由地とした時の更新処理している。
        """
        for via in range(self.N):
            for start in range(self.N):
                for goal in range(self.N):
                    if self.dp[start][via] + self.dp[via][goal] < self.dp[start][goal]:
                        # 更新式
                        self.dp[start][goal] = self.dp[start][via] + self.dp[via][goal]
                        self.sur[start][goal] = self.sur[start][via] + self.sur[via][goal] 
                    
                    elif self.dp[start][via] + self.dp[via][goal] == self.dp[start][goal]:
                        if self.sur[start][via] + self.sur[via][goal] > self.sur[start][goal]:
                            # 更新式
                            self.dp[start][goal] = self.dp[start][via] + self.dp[via][goal]
                            self.sur[start][goal] = self.sur[start][via] + self.sur[via][goal] 
                            
        return self.dp, self.sur

def solve(N: int, A: "List[int]", S: "List[str]", Q: int, U: "List[int]", V: "List[int]"):
    wf = WarshallFloyd(N)
    for i in range(N):
        for j in range(N):
            if S[i][j] == "Y":
                wf.addEdge(i, j, 1, A[i])
    dp, sur = wf.build()
    # print(sur)
    for uu, vv in zip(U, V):
        if dp[uu - 1][vv - 1] == INF:
            print(NO)
        else:
            print(dp[uu - 1][vv - 1], sur[uu - 1][vv - 1] + A[vv - 1])
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    S = [next(tokens) for _ in range(N)]  # type: "List[str]"
    Q = int(next(tokens))  # type: int
    U = [int()] * (Q)  # type: "List[int]"
    V = [int()] * (Q)  # type: "List[int]"
    for i in range(Q):
        U[i] = int(next(tokens))
        V[i] = int(next(tokens))
    solve(N, A, S, Q, U, V)

if __name__ == '__main__':
    main()
