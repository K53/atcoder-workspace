#!/usr/bin/env python3
import sys


def solve(N: int, P: int, Q: int, R: int, S: int, A: "List[int]"):
    P -= 1
    Q -= 1
    R -= 1
    S -= 1
    # A[:P]
    # A[P:(Q + 1)]
    # A[(Q + 1):R]
    # A[R:(S + 1)]
    # A[(S + 1):]
    print(*(A[:P] + A[R:(S + 1)] + A[(Q + 1):R] + A[P:(Q + 1)] + A[(S + 1):]))
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    P = int(next(tokens))  # type: int
    Q = int(next(tokens))  # type: int
    R = int(next(tokens))  # type: int
    S = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, P, Q, R, S, A)

if __name__ == '__main__':
    main()
