#!/usr/bin/env python3
import sys

def solve(N: int, a: "List[int]", b: "List[int]", c: "List[int]", Q: int, K: int, x: "List[int]", y: "List[int]"):
    import heapq
    INF = 10 ** 16
    class Dijkstra():
        def __init__(self, N: int) -> None:
            self.N = N 
            self.G = [[] for _ in range(N)]
            return
        
        # 辺の追加
        def addEdge(self, fromNode: int, toNode: int, cost: int, bothDirection: bool):
            self.G[fromNode].append((cost, toNode))
            if bothDirection:
                self.G[toNode].append((cost, fromNode))
        
        def build(self, startNode: int):
            hq = []
            heapq.heapify(hq)
            # Set start info
            dist = [INF] * self.N
            heapq.heappush(hq, (0, startNode))
            dist[startNode] = 0
            # dijkstra
            while hq:
                min_cost, now = heapq.heappop(hq)
                if min_cost > dist[now]:
                    continue
                for cost, next in self.G[now]:
                    if dist[next] > dist[now] + cost:
                        dist[next] = dist[now] + cost
                        heapq.heappush(hq, (dist[next], next))
            return dist
    dk = Dijkstra(N)
    for aa, bb, cc in zip(a, b, c):
        dk.addEdge(aa - 1, bb - 1, cc, bothDirection=True)
    d = dk.build(startNode = K - 1)
    for xx, yy in zip(x, y):
        print(d[xx - 1] + d[yy - 1])
    return


# Generated by 2.9.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    a = [int()] * (N - 1)  # type: "List[int]"
    b = [int()] * (N - 1)  # type: "List[int]"
    c = [int()] * (N - 1)  # type: "List[int]"
    for i in range(N - 1):
        a[i] = int(next(tokens))
        b[i] = int(next(tokens))
        c[i] = int(next(tokens))
    Q = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    x = [int()] * (Q)  # type: "List[int]"
    y = [int()] * (Q)  # type: "List[int]"
    for i in range(Q):
        x[i] = int(next(tokens))
        y[i] = int(next(tokens))
    solve(N, a, b, c, Q, K, x, y)

if __name__ == '__main__':
    main()
