#!/usr/bin/env python3
import sys
def scheduling(brackets: "list[int, int]", slotsize: int = 1):
    """
    brackets: ("end time", "begin time")
    slotsize: 区間内で重複を許す個数。(一度に並列実行できるタスク数。)
    """
    brackets = sorted(brackets)
    ans = []
    slots = [-1] * slotsize
    for end_time, begin_time in brackets:
        # 開始点の時点で終了しているタスクがスロットに含まれるなら、それを差し替える。
        already_done_tasks = [s for s in slots if s < begin_time]
        if len(already_done_tasks) != 0:
            slots[slots.index(max(already_done_tasks))] = end_time
            ans.append(begin_time)
    return ans


def solve(N: int, A: "List[int]", B: "List[int]"):
    l = [(bb, aa) for aa, bb in zip(A, B)]
    print(len(scheduling(l)))
    return


# Generated by 2.9.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int()] * (N)  # type: "List[int]"
    B = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    solve(N, A, B)

if __name__ == '__main__':
    main()
