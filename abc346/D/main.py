#!/usr/bin/env python3
import sys
INF = 10 ** 12

def solve(N: int, S: str, C: "List[int]"):
    dp = [[[INF] * 2 for _ in range(2)] for _ in range(N + 1)]
    dp[0][0][0] = 0
    for i in range(N):
        if S[i - 1] == S[i]:
            # 未連続 直前フリップなし → フリップする → 未連続 直前フリップあり
            dp[i + 1][0][1] = min(dp[i][0][0] + C[i], dp[i + 1][0][1])
            
            # 未連続 直前フリップなし → フリップしない → 連続 直前フリップなし
            dp[i + 1][1][0] = min(dp[i][0][0], dp[i + 1][1][0])
        
            # 連続 直前フリップなし → フリップする → 連続 直前フリップあり
            dp[i + 1][1][1] = min(dp[i][1][0] + C[i], dp[i + 1][1][1])
            
            # 連続 直前フリップなし → フリップしない → xxx
            
            # 未連続 直前フリップあり → フリップする → 連続 直前フリップあり
            dp[i + 1][1][1] = min(dp[i][0][1] + C[i], dp[i + 1][1][1])
            
            # 未連続 直前フリップあり → フリップしない → 未連続 直前フリップなし
            dp[i + 1][0][0] = min(dp[i][0][1], dp[i + 1][0][0])
        
            # 連続 直前フリップあり → フリップする → xxx
            
            # 連続 直前フリップあり → フリップしない → 連続 直前フリップなし
            dp[i + 1][1][0] = min(dp[i][1][1], dp[i + 1][1][0])

        else:
            # 未連続 直前フリップなし → フリップする → 連続 直前フリップあり
            dp[i + 1][1][1] = min(dp[i][0][0] + C[i], dp[i + 1][1][1])
            
            # 未連続 直前フリップなし → フリップしない → 未連続 直前フリップなし
            dp[i + 1][0][0] = min(dp[i][0][0], dp[i + 1][0][0])
        
            # 連続 直前フリップなし → フリップする → xxx
            
            # 連続 直前フリップなし → フリップしない → 連続 直前フリップなし
            dp[i + 1][1][0] = min(dp[i][1][0], dp[i + 1][1][0])
            
            # 未連続 直前フリップあり → フリップする → 未連続 直前フリップあり
            dp[i + 1][0][1] = min(dp[i][0][1] + C[i], dp[i + 1][0][1])
            
            # 未連続 直前フリップあり → フリップしない → 連続 直前フリップなし
            dp[i + 1][1][0] = min(dp[i][0][1], dp[i + 1][1][0])
        
            # 連続 直前フリップあり → フリップする → 連続 直前フリップあり
            dp[i + 1][1][1] = min(dp[i][1][1] + C[i], dp[i + 1][1][1])
            
            # 連続 直前フリップあり → フリップしない → xxx

    dp = [[[INF] * 2 for _ in range(2)] for _ in range(N + 1)]
    dp[0][0][0] = C[0]
    if S[0] == "1":
        S = "0" + S[1:]
    else:
        S = "1" + S[1:]
    for i in range(N):
        if S[i - 1] == S[i]:
            # 未連続 直前フリップなし → フリップする → 未連続 直前フリップあり
            dp[i + 1][0][1] = min(dp[i][0][0] + C[i], dp[i + 1][0][1])
            
            # 未連続 直前フリップなし → フリップしない → 連続 直前フリップなし
            dp[i + 1][1][0] = min(dp[i][0][0], dp[i + 1][1][0])
        
            # 連続 直前フリップなし → フリップする → 連続 直前フリップあり
            dp[i + 1][1][1] = min(dp[i][1][0] + C[i], dp[i + 1][1][1])
            
            # 連続 直前フリップなし → フリップしない → xxx
            
            # 未連続 直前フリップあり → フリップする → 連続 直前フリップあり
            dp[i + 1][1][1] = min(dp[i][0][1] + C[i], dp[i + 1][1][1])
            
            # 未連続 直前フリップあり → フリップしない → 未連続 直前フリップなし
            dp[i + 1][0][0] = min(dp[i][0][1], dp[i + 1][0][0])
        
            # 連続 直前フリップあり → フリップする → xxx
            
            # 連続 直前フリップあり → フリップしない → 連続 直前フリップなし
            dp[i + 1][1][0] = min(dp[i][1][1], dp[i + 1][1][0])

        else:
            # 未連続 直前フリップなし → フリップする → 連続 直前フリップあり
            dp[i + 1][1][1] = min(dp[i][0][0] + C[i], dp[i + 1][1][1])
            
            # 未連続 直前フリップなし → フリップしない → 未連続 直前フリップなし
            dp[i + 1][0][0] = min(dp[i][0][0], dp[i + 1][0][0])
        
            # 連続 直前フリップなし → フリップする → xxx
            
            # 連続 直前フリップなし → フリップしない → 連続 直前フリップなし
            dp[i + 1][1][0] = min(dp[i][1][0], dp[i + 1][1][0])
            
            # 未連続 直前フリップあり → フリップする → 未連続 直前フリップあり
            dp[i + 1][0][1] = min(dp[i][0][1] + C[i], dp[i + 1][0][1])
            
            # 未連続 直前フリップあり → フリップしない → 連続 直前フリップなし
            dp[i + 1][1][0] = min(dp[i][0][1], dp[i + 1][1][0])
        
            # 連続 直前フリップあり → フリップする → 連続 直前フリップあり
            dp[i + 1][1][1] = min(dp[i][1][1] + C[i], dp[i + 1][1][1])
            
            # 連続 直前フリップあり → フリップしない → xxx

    for i in range(N + 1):
        print(dp)
    return


# Generated by 2.13.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    S = next(tokens)  # type: str
    C = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, S, C)

if __name__ == '__main__':
    main()
