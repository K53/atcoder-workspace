#!/usr/bin/env python3
import sys

        

def solve(N: int, S: "List[int]", T: "List[int]"):
    import heapq
    INF = 10 ** 9 
    class Dijkstra():
        def __init__(self, N: int) -> None:
            self.N = N 
            self.G = [[] for _ in range(N)]
            return
        
        # 辺の追加
        def addEdge(self, fromNode: int, toNode: int, cost: int, bothDirection: bool):
            self.G[fromNode].append((cost, toNode))
            if bothDirection:
                self.G[toNode].append((cost, fromNode))
        
        def build(self, startNode: int):
            hq = []
            heapq.heapify(hq)
            # Set start info
            dist = [INF] * self.N
            heapq.heappush(hq, (0, startNode))
            dist[startNode] = 0
            # dijkstra
            while hq:
                min_cost, now = heapq.heappop(hq)
                if min_cost > dist[now]:
                    continue
                for cost, next in self.G[now]:
                    if dist[next] > dist[now] + cost:
                        dist[next] = dist[now] + cost
                        heapq.heappush(hq, (dist[next], next))
            return dist
    df = Dijkstra(N + 1)
    for i in range(N):
        df.addEdge(i, 0 if i + 1 == N else i + 1, S[i], bothDirection=False)
    for i in range(N):
        df.addEdge(N, i, T[i], bothDirection=False)
    d = df.build(N)
    print(*d[:-1], sep="\n")
    return

# Generated by 2.6.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    S = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    T = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, S, T)

if __name__ == '__main__':
    main()
