#!/usr/bin/env python3
import bisect
import sys


def solve(N: int, A: "List[int]"):
    nums = [0] * (2 * 10 ** 5 + 1)
    for i in A:
        nums[i] += 1
    # N = 2 * 10 ** 5 
    # A = [1] * N
    # qq = []
    # for i in range(N):
    #     for j in range(N):
    #         for k in range(N):
    #             if A[i] * A[j] == A[k]:
    #                 qq.append((i, j, k))
    # print(qq)
    # ww = []
    A.sort()
    id = bisect.bisect_right(A, 1)
    print(id)
    ans = 0
    # ans = id * N + id * (id - 1) // 2
    for i in nums:
        # print(i ** 2)
        ans += i ** 2 * id
    print(ans)

    if id == N:
        print(ans)
        return
    # =====
    A = A[id:]
    N = len(A)
    print(A)
    print(N)
    m = A[-1]
    s = set(A)

    for aa in range(N):
        print(A[aa])
        for bb in range(N):
            t = A[aa] * A[bb]
            print(A[aa], A[bb], t, m)
            if t in s:
            # q = [2, 2, 2, 3, 3, 4, 6, 7, 8]
            # for cc in range(len(q)):
            #     if t == q[cc]:
                if aa == bb:
                    # ww.append((aa, bb, cc))
                    ans += nums[t]
                else:
                    # ww.append((aa, bb, cc))
                    # ww.append((bb, aa, cc))
                    ans += nums[t]
            if t > m:
                # if aa == 0:
                #     print(ans)
                #     return
                break
        print("#", ans)
    print(ans)
    # print(qq)
    # ww.sort()
    # print(ww)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, A)

if __name__ == '__main__':
    main()
