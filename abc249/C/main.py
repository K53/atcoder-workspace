#!/usr/bin/env python3
import sys


def solve(N: int, K: int, S: "List[str]"):
    f = [[0] * 26 for _ in range(N)]
    for i in range(N):
        for ss in S[i]:
            f[i][ord(ss) - ord("a")] += 1

    res = 0
    for i in range(2 ** N):
        sums = [0] * 26
        ans = 0
        for b in range(N):
            if (i >> b) & 1:
                for alp in range(26):
                    sums[alp] += f[b][alp]
        for s in sums:
            if s == K:
                ans += 1
        # print(sums, ans)
        res = max(res, ans)
    print(res)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    S = [next(tokens) for _ in range(N)]  # type: "List[str]"
    solve(N, K, S)

if __name__ == '__main__':
    main()
