#!/usr/bin/env python3
import sys

class Doubling:
    def __init__(self, init_states: "List[int]", max_doubling_exponent: int, init_accs: "List[int]" = None):
        """
        init_states : 各要素の初期状態
        init_accs : 累積和の初期状態 (累積和を使用する場合)
        """
        self.states = [init_states]             # 数列(状態)のダブリングテーブル。states[k][s] := 状態sから2^k回実行したらあとの状態
        self.acc = [init_accs]                  # 和のダブリングテーブル
        self.kinds_of_state = len(init_states)  # 状態の種類数s
        self.max_doubling_exponent = max_doubling_exponent    # 実行回数kの範囲の定義(2^0 ≦ k ≦ 2^max_doubling_exponent)

    def build(self):
        """
        acc使うならuncommentする
        """
        for i in range(1, self.max_doubling_exponent):
            l = []
            # s = []
            for j in range(self.kinds_of_state):
                l.append(self.states[i - 1][self.states[i - 1][j]])
                # s.append(self.acc[i - 1][j] + self.acc[i - 1][self.states[i - 1][j]])
            self.states.append(l)
            # self.acc.append(s)

    def get_state(self, target_element: int, doubling_times: int):
        """
        target_element : ダブリングを行う要素のindex (0-indexed)
        doubing_times : 開始状態からの遷移回数 (冪乗でなくてOK)
        """
        a = []
        for i in range(self.max_doubling_exponent):
            if doubling_times >> i & 1:
                a.append(i)
        now = target_element
        for i in a:
            now = self.states[i][now]
        return now
    
    def get_acc(self, target_element: int, doubling_times: int):
        """
        target_element : ダブリングを行う要素のindex (0-indexed)
        doubing_times : 開始状態からの遷移回数 (冪乗でなくてOK)
        """
        res = 0
        a = []
        for i in range(self.max_doubling_exponent):
            if doubling_times >> i & 1:
                a.append(i)
        now = target_element
        for i in a:
            res += self.acc[i][now]
            now = self.states[i][now]
        return res



def solve(N: int, K: int, A: "List[int]"):
    db = Doubling([aa - 1 for aa in A], 60)
    db.build()
    print(db.get_state(0, K) + 1)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, K, A)

if __name__ == '__main__':
    main()
