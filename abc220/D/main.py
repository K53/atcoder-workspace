#!/usr/bin/env python3
import sys

MOD = 998244353  # type: int


def solve(N: int, A: "List[int]"):
    dp = [[-1] * 10 for _ in range(N)]
    dp[0][A[0]] = 1
    for i in range(N - 1):
        for j in range(10):
            if dp[i][j] != -1:
                f = (j + A[i + 1]) % 10
                g = j * A[i + 1] % 10
                if dp[i + 1][f] == -1:
                    dp[i + 1][f] = dp[i][j]
                else:
                    dp[i + 1][f] += dp[i][j]
                dp[i + 1][f] %= MOD
                if dp[i + 1][g] == -1:
                    dp[i + 1][g] = dp[i][j]
                else:
                    dp[i + 1][g] += dp[i][j]         
                dp[i + 1][g] %= MOD
    for i in dp[N - 1]:
        if i == -1:
            print(0)
        else:
            print(i)
    
    # print(*dp[N - 1], sep="\n")
    return


# Generated by 2.8.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, A)

if __name__ == '__main__':
    main()
