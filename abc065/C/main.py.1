#!/usr/bin/env python3
import sys
import math

MOD = 1000000007  # type: int
MAX = 666667      # Pythonだと7.3 * 10^5程度が限度。それ以上はTLE(>2s)
# MAX = 10 ** 6   # Pypyで 260~280 msくらい

fac, finv, inv = [1, 1], [1, 1], [0, 1]
# fac : 階乗(1,2,6,...)
# inv : 逆元(1,2,...N) -> inv[i] = pow(i, 10 ** 9 + 5, 10 ** 9 + 7)
# finv: 逆元(階乗の逆元 = 1の逆元, 2の逆元, 6の逆元)
def cmbInit():
    for i in range(2, MAX):
        fac.append(fac[i - 1] * i % MOD)
        # inv.append(MOD - inv[MOD % i] * (MOD // i) % MOD)
        # finv.append(finv[i - 1] * inv[i] % MOD)

def solve(N: int, M: int):
    cmbInit()
    if abs(N - M) > 1:
        print(0)
        return
    if N == M:
        print(fac[N] * fac[M] * 2 % MOD)
    else:
        mm = min(N, M)
        aa = max(N, M)
        print(fac[mm] * fac[aa] % MOD)
    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    solve(N, M)

if __name__ == '__main__':
    main()
