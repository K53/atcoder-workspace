#!/usr/bin/env python3
import sys
sys.setrecursionlimit(10 ** 9)



def solve(N: int, S: "List[str]"):
    Alp = 26
    G = [[] for _ in range(Alp)] # 隣接リスト
    seen = [0] * Alp
    for ss in S:
        G[ord(ss[0]) - ord("a")].append(ord(ss[-1]) - ord("a"))
        seen[ord(ss[-1]) - ord("a")] += 1

    # 0 : せんて　
    # 1 : 後手
    def dfs(pre: int, now: int, user: int, ex: int):
        iswin = 0
        # print(pre, now)
        # [2] 
        # そのノードに初めて到着した時のみ
        # <<== 行きがけ順ならここを使う (初めて降り立つ時にしか実行されない)
        if ex == 0:
            seen[now] -= 1 # 訪問済みにする #開始点もseenにしないといけないのでfor前にフラグを立てる。
        conNum = 0
        # --- 子ノードを探索 -----------------------
        for next in G[now]: 
            # --- 遷移前に訪問済みチェック ----------- # 木であれば "next == pre" で判定でも可
            if seen[next] <= 0: 
                conNum += 1
                continue
            # [1]
            # そのノードから子ノードに向かって出発しようとした時
            aitewin = dfs(now, next, 1 - user, 0)
            if aitewin == 0:
                iswin = 1
            # [4]
            # そのノードに子ノードから帰ってきて到着した時
            # <== 木上のDPをする時はここを使うこと。
            # <== 領域[3]を使うと子から帰る時に親を操作するようになり直感に反する(あと1頂点のみのケースとかで例外処理が面倒)。
        # [3]
        # そのノードから親ノードに帰ろうと出発した時
        # <<== 帰りがけ順ならここを使う
        return iswin

    # for i in
    ans = dfs(pre=-1, now=ord("i") - ord("a"), user=0, ex=1)
    print(ans)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    S = [next(tokens) for _ in range(N)]  # type: "List[str]"
    solve(N, S)

if __name__ == '__main__':
    main()
