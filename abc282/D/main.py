#!/usr/bin/env python3
import sys
from collections import deque

def solve(N: int, M: int, u: "List[int]", v: "List[int]"):
    G = [[] for _ in range(N)]
    for uu, vv in zip(u, v):
        G[uu - 1].append(vv - 1)
        G[vv - 1].append(uu - 1)
    
    INF = 10 ** 16
    dist = [INF] * len(G)
    def bfs(start_node: int) -> list:
        q = deque()
        q.append(start_node)
        dist[start_node] = 0
        s0 = 1
        s1 = 0
        edges = 0
        while q:
            now = q.popleft()
            for next in G[now]:
                if dist[next] == dist[now]:
                    print(0)
                    exit()
                edges += 1
                if dist[next] != INF:
                    continue
                q.append(next)
                dist[next] = (dist[now] + 1) % 2
                if dist[next]:
                    s1 += 1
                else:
                    s0 += 1
        return s0, s1, edges // 2
    ans = 0
    other_nodes = 0
    for i in range(N):
        if dist[i] != INF:
            continue
        s0, s1, edges = bfs(i)
        ans += s0 * s1 - edges
        contained_nodes = s0 + s1
        ans += contained_nodes * other_nodes
        other_nodes += contained_nodes
    print(ans)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    u = [int()] * (M)  # type: "List[int]"
    v = [int()] * (M)  # type: "List[int]"
    for i in range(M):
        u[i] = int(next(tokens))
        v[i] = int(next(tokens))
    solve(N, M, u, v)

if __name__ == '__main__':
    main()
