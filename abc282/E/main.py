#!/usr/bin/env python3
import sys
import heapq
class Prim():
    def __init__(self, N: int) -> None:
        self.G = [[] for _ in range(N)]
        self.seen = [[] for _ in range(N)]
        self.minimunCost = 0 # 最小全域木を構成する全体のコストの総和の最小。
        return
    
    def addEdge(self, a: int, b: int, cost: int):
        self.G[a].append((cost, b))
        self.G[b].append((cost, a))
        return

    def build(self):
        hq = []
        heapq.heapify(hq)
        start_node = 0
        heapq.heappush(hq, (0, start_node))
        while hq:
            min_cost, now = heapq.heappop(hq)
            if self.seen[now]:
                continue
            self.seen[now] = 1
            self.minimunCost += min_cost
            for cost, next in self.G[now]:
                if self.seen[next]:
                    continue
                heapq.heappush(hq, (cost, next))
        return self.minimunCost
        
def solve(N: int, M: int, A: "List[int]"):
    tree = Prim(N)
    for i in range(N):
        for j in range(i + 1, N):
            e = (pow(A[i], A[j], M) + pow(A[j], A[i], M)) % M
            tree.addEdge(i, j, -e)
    ans = -tree.build()
    print(ans)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, M, A)

if __name__ == '__main__':
    main()
