#!/usr/bin/env python3
import sys

def solve(N: int, K: int, a: "List[int]"):
    a = [6, 1, 2, 7]
    N = len(a)
    K = 10
    r = 0
    l = 0
    ans = 0
    sum = 0
    for _ in range(N):
        # 行けるだけrを進める。sumが条件を満たさなくなったところで抜ける。※抜ける時、条件を満たさなくなったrの次を指している。
        # sum=[6] l=0, r=1 で抜ける
        # sum=[6, 1] l=0, r=2 で抜ける
        # sum=[6, 1, 2] l=0, r=3 で抜ける
        # sum=[6, 1, 2, 7] l=0, r=4 で抜ける <- K=10の今回はこの状態で抜けてくる。つまり、以下
        ### 条件を満たすのは区間[0,2]でsum=[6, 1, 2] → l=0, r=3
        ### 条件を満たさなくなった区間[0,3]でsum=[6, 1, 2, 7] l=0, r=4
        ### [0,2]とl=0, r=4を混同注意。ズレが2つ分あるわけではない。
        while r < N and sum < K:
            print("#", l, r, sum)
            sum += a[r]
            r += 1
        # → 条件を満たしていない状態をlを進めることで修正する。
        # ifの前でansに対する更新を試みてはいけない理由→この時点では条件を満たしていないから。
        # ifを構えるのはwhileを抜ける理由がrの上限だった場合。lを縮める必要がないから。
        if l == r:
            l += 1
            r += 1
            continue
        if sum >= K:
            print(">", l, r, sum) # rを含まないのでr=N+1までは来る。
            sum -= a[l]
            l += 1
            ans += N - r + 1
    # ans = max(ans, N - r + 1) # 一度もlを縮めることがないケースではansに到達しないため最後にansの更新を入れる必要あり。 ansがlに依存する問題では入れること。
    print(ans)


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    a = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, K, a)

if __name__ == '__main__':
    main()
