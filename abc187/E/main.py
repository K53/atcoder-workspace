#!/usr/bin/env python3
import sys
from collections import deque
def bfs(G: "List[to]", start_node: int) -> list:
    INF = 10 ** 16
    q = deque()
    dist = [INF] * len(G)
    q.append(start_node)
    dist[start_node] = 0
    while q:
        now = q.popleft()
        for next in G[now]:
            if dist[next] != INF:
                continue
            q.append(next)
            dist[next] = dist[now] + 1
    return dist

def solve(N: int, a: "List[int]", b: "List[int]", Q: int, t: "List[int]", e: "List[int]", x: "List[int]"):
    G = [[] for _ in range(N)]
    for i in range(N - 1):
        G[a[i] - 1].append(b[i] - 1)
        G[b[i] - 1].append(a[i] - 1)
    depth = bfs(G, 0)
    ans = [0] * N
    for tt, ee, xx in zip(t, e, x):
        if tt == 1:
            if depth[a[ee - 1] - 1] > depth[b[ee - 1] - 1]:
                ans[a[ee - 1] - 1] += xx
            else:
                ans[0] += xx
                ans[b[ee - 1] - 1] -= xx
        else:
            if depth[a[ee - 1] - 1] > depth[b[ee - 1] - 1]:
                ans[0] += xx
                ans[a[ee - 1] - 1] -= xx
            else:
                ans[b[ee - 1] - 1] += xx

    q = deque()
    q.append(0)
    while q:
        now = q.popleft()
        for next in G[now]:
            if depth[now] > depth[next]:
                continue
            ans[next] += ans[now]
            q.append(next)
    print(*ans, sep="\n")

    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    a = [int()] * (N - 1)  # type: "List[int]"
    b = [int()] * (N - 1)  # type: "List[int]"
    for i in range(N - 1):
        a[i] = int(next(tokens))
        b[i] = int(next(tokens))
    Q = int(next(tokens))  # type: int
    t = [int()] * (Q)  # type: "List[int]"
    e = [int()] * (Q)  # type: "List[int]"
    x = [int()] * (Q)  # type: "List[int]"
    for i in range(Q):
        t[i] = int(next(tokens))
        e[i] = int(next(tokens))
        x[i] = int(next(tokens))
    solve(N, a, b, Q, t, e, x)

if __name__ == '__main__':
    main()
