#!/usr/bin/env python3
import sys
from collections import deque

def solve(N: int, a: "List[int]", b: "List[int]", Q: int, t: "List[int]", e: "List[int]", x: "List[int]"):
    G = [[] for _ in range(N)]
    for aa, bb in zip(a, b):
        G[aa - 1].append(bb - 1)
        G[bb - 1].append(aa - 1)
    depth = [-1] * N
    depth[0] = 0
    q = deque([0])
    while len(q) > 0:
        now = q.popleft()
        for next in G[now]:
            if depth[next] == -1:
                depth[next] = depth[now] + 1
                q.append(next)
    # print(depth)

    imos = [0] * N
    for tt, ee, xx in zip(t, e, x):
        aa, bb = a[ee - 1] - 1, b[ee - 1] - 1
        if tt == 1: # a -> b
            if depth[aa] > depth[bb]: # a側の部分木
                imos[aa] += xx
            else: # 根の方
                imos[0] += xx
                imos[bb] -= xx
        else: # a <- b
            if depth[aa] < depth[bb]: # b側の部分木
                imos[bb] += xx
            else: # 根の方
                imos[0] += xx
                imos[aa] -= xx
    # print(imos)
    q = deque([0])
    while len(q) > 0:
        now = q.popleft()
        for next in G[now]:
            if depth[next] > depth[now]:
                imos[next] += imos[now]
                q.append(next)
    print(*imos, sep="\n")
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    a = [int()] * (N - 1)  # type: "List[int]"
    b = [int()] * (N - 1)  # type: "List[int]"
    for i in range(N - 1):
        a[i] = int(next(tokens))
        b[i] = int(next(tokens))
    Q = int(next(tokens))  # type: int
    t = [int()] * (Q)  # type: "List[int]"
    e = [int()] * (Q)  # type: "List[int]"
    x = [int()] * (Q)  # type: "List[int]"
    for i in range(Q):
        t[i] = int(next(tokens))
        e[i] = int(next(tokens))
        x[i] = int(next(tokens))
    solve(N, a, b, Q, t, e, x)

if __name__ == '__main__':
    main()
