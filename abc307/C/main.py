#!/usr/bin/env python3
import sys

YES = "Yes"  # type: str
NO = "No"  # type: str


def solve(H_A: int, W_A: int, A: "List[str]", H_B: int, W_B: int, B: "List[str]", H_X: int, W_X: int, X: "List[str]"):
    sa = set()
    for hh in range(H_A):
        for ww in range(W_A):
            if A[hh][ww] == "#":
                sa.add((hh, ww))
    
    sb = set()
    for hh in range(H_B):
        for ww in range(W_B):
            if B[hh][ww] == "#":
                sb.add((hh, ww))
    
    sx = set()
    for hh in range(H_X):
        for ww in range(W_X):
            if X[hh][ww] == "#":
                sx.add((hh, ww))
    
    for cy in range(-10, 21):
        for cx in range(-10, 21):
            new_sb = set()
            for hh, ww in sb:
                new_sb.add((hh + cy, ww + cx))
            # print(new_sb)
            new_sb |= sa
            
            for gy in range(-10, 21):
                for gx in range(-10, 21):
                    new_sx = set()
                    for hhg, wwg in sx:
                        new_sx.add((hhg + gy, wwg + gx))
                    if new_sb == new_sx:
                        print(YES)
                        return
    print(NO)
    

    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    H_A = int(next(tokens))  # type: int
    W_A = int(next(tokens))  # type: int
    A = [next(tokens) for _ in range(H_A)]  # type: "List[str]"
    H_B = int(next(tokens))  # type: int
    W_B = int(next(tokens))  # type: int
    B = [next(tokens) for _ in range(H_B)]  # type: "List[str]"
    H_X = int(next(tokens))  # type: int
    W_X = int(next(tokens))  # type: int
    X = [next(tokens) for _ in range(H_X)]  # type: "List[str]"
    solve(H_A, W_A, A, H_B, W_B, B, H_X, W_X, X)

if __name__ == '__main__':
    main()
