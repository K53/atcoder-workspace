#!/usr/bin/env python3
import sys

MOD = 10 ** 5 # type: int

# d[n][s] := 数字sを2^(n-1)回実行したらあとの数字
def solve(N: int, K: int):
    d = []
    dd = [i for i in range(10 ** 5)]
    d.append(dd)
    l = []
    for num in range(10 ** 5):
        s = num
        for _ in range(5):
            s += num % 10
            num //= 10
            if num == 0:
                break
        l.append(s % MOD)
    d.append(l)
    for j in range(2, 61):
        l = []
        for i in range(10 ** 5):
            l.append(d[j - 1][d[j - 1][i]])
        d.append(l)
    
    a = []
    for i in range(60):
        if K>>i & 1:
            a.append(i + 1)
    now = N
    for i in a:
        now = d[i][now]
    print(now)
    return


# Generated by 2.3.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    solve(N, K)

if __name__ == '__main__':
    main()
