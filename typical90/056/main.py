#!/usr/bin/env python3
import sys

NO = "Impossible"  # type: str

def solve(N: int, S: int, A: "List[int]", B: "List[int]"):
    dp = [[0] * (S + 1) for _ in range(N + 1)]
    dp[0][0] = 1
    for day in range(1, N + 1):
        for cost in range(S + 1):
            if (cost - A[day - 1] >= 0 and dp[day - 1][cost - A[day - 1]]) or (cost - B[day - 1] >= 0 and dp[day - 1][cost - B[day - 1]]):
                dp[day][cost] = 1
    if not dp[-1][-1]:
        print(NO)
        return
    ans = []
    cost = S
    for day in range(1, N + 1):
        if  cost - A[N - day] >= 0 and dp[N - day][cost - A[N - day]]:
            cost -= A[N - day]
            ans.append("A")
        else:
            cost -= B[N - day]
            ans.append("B")
    print(*ans[::-1], sep="")
    return


# Generated by 2.3.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    S = int(next(tokens))  # type: int
    A = [int()] * (N)  # type: "List[int]"
    B = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    solve(N, S, A, B)

if __name__ == '__main__':
    main()
