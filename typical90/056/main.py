#!/usr/bin/env python3
import sys

NO = "Impossible"  # type: str

def solve(N: int, S: int, A: "List[int]", B: "List[int]"):
    dp = [[0] * (S + 1) for _ in range(N + 1)] # dp[n][s] := n日目のコストをsにできる。
    dp[0][0] = 1
    for i in range(N):
        for j in range(S + 1):
            if (j - A[i] >= 0 and dp[i][j - A[i]]) or (j - B[i] >= 0 and dp[i][j - B[i]]):
                dp[i + 1][j] = 1
    if not dp[N][S]:
        print(NO)
        return
    ss = S
    ans = []
    for i in reversed(range(1, N + 1)):
        if ss - A[i - 1] >= 0 and dp[i - 1][ss - A[i - 1]]:
            # print(ss - A[i - 1])
            ans.append("A")
            ss -= A[i - 1]
        else:
            # print(ss - B[i - 1])
            ans.append("B")
            ss -= B[i - 1]
    print(*ans[::-1], sep="")

    # for i in range(N + 1):
    #     print(dp[i])
    return


# Generated by 2.3.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    S = int(next(tokens))  # type: int
    A = [int()] * (N)  # type: "List[int]"
    B = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    solve(N, S, A, B)

if __name__ == '__main__':
    main()
