#!/usr/bin/env python3
import sys
import bisect

def solve(N: int, A: "List[int]", Q: int, B: "List[int]"):
    A.sort()
    # 命題：mid以上かどうか
    # True - ok - ng - False
    def is_ok(mid: int, bb: int):
        # 判定する条件
        if mid < 0:
            return True
        elif mid >= N:
            return False
        return A[mid] <= bb

    def binSearch(ok: int, ng: int, bb: int):
        # print(ok, ng)
        while abs(ok - ng) > 1:
            mid = (ok + ng) // 2
            if is_ok(mid, bb):
                ok = mid
            else:
                ng = mid
            # print(ok, ng)
        return ok
    for bb in B:
        index = binSearch(-1, N, bb)
        if index == N - 1:
            print(bb - A[-1])
        elif index == -1:
            print(A[0] - bb)
        else:
            print(min(abs(A[index] - bb), abs(A[index + 1] - bb)))
        # print("##")
    return

# def solve(N: int, A: "List[int]", Q: int, B: "List[int]"):
#     A.sort()
#     for bb in B:
#         index = bisect.bisect(A, bb)
#         if index == N:
#             print(bb - A[-1])
#         elif index == 0:
#             print(A[0] - bb)
#         else:
#             print(min(abs(A[index - 1] - bb), abs(A[index] - bb)))
#     return


# Generated by 2.2.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    Q = int(next(tokens))  # type: int
    B = [int(next(tokens)) for _ in range(Q)]  # type: "List[int]"
    solve(N, A, Q, B)

if __name__ == '__main__':
    main()
