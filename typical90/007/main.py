#!/usr/bin/env python3
import sys
import bisect

def solve(N: int, A: "List[int]", Q: int, B: "List[int]"):
    A.sort()
    for bb in B:
        i = bisect.bisect_left(A, bb)
        if i == 0:
            print(abs(A[i] - bb))
        elif i == N:
            print(abs(A[-1] - bb))
        else:
            print(min(abs(A[i] - bb), abs(A[i - 1] - bb)))
    return


# Generated by 2.3.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    Q = int(next(tokens))  # type: int
    B = [int(next(tokens)) for _ in range(Q)]  # type: "List[int]"
    solve(N, A, Q, B)

if __name__ == '__main__':
    main()
