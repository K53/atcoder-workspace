#!/usr/bin/env python3
import sys


def solve(N: int, lx: "List[int]", ly: "List[int]", rx: "List[int]", ry: "List[int]"):
    field = [[0 for _ in range(1000 + 1)] for _ in range(1000 + 1)]
    for x1, y1, x2, y2 in zip(lx, ly, rx, ry):
        field[y1][x1] += 1
        field[y1][x2] += -1
        field[y2][x1] += -1
        field[y2][x2] += 1
    
    for hh in range(1000 + 1):
        for ww in range(1, 1000 + 1):
            field[hh][ww] += field[hh][ww - 1]
    
    for ww in range(1000 + 1):
        for hh in range(1, 1000 + 1):
            field[hh][ww] += field[hh - 1][ww]
    
    nums = [0] * (N + 1)
    for hh in range(1000 + 1):
        for ww in range(1000 + 1):
            nums[field[hh][ww]] += 1
    
    for i in range(1, N + 1):
        print(nums[i])
    return


# Generated by 2.3.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    lx = [int()] * (N)  # type: "List[int]"
    ly = [int()] * (N)  # type: "List[int]"
    rx = [int()] * (N)  # type: "List[int]"
    ry = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        lx[i] = int(next(tokens))
        ly[i] = int(next(tokens))
        rx[i] = int(next(tokens))
        ry[i] = int(next(tokens))
    solve(N, lx, ly, rx, ry)

if __name__ == '__main__':
    main()
