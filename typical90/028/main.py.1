#!/usr/bin/env python3
import sys


def solve(N: int, lx: "List[int]", ly: "List[int]", rx: "List[int]", ry: "List[int]"):
    field = [[0] * 1001 for _ in range(1001)]
    for i in range(N):
        field[ly[i]][lx[i]] += 1
        field[ry[i]][rx[i]] += 1
        field[ry[i]][lx[i]] -= 1
        field[ly[i]][rx[i]] -= 1
    # for h in range(20):
    #     print(field[h][:20])

    for h in range(0, 1001):
        for w in range(1, 1001):
            field[h][w] += field[h][w - 1]
    for w in range(0, 1001):
        for h in range(1, 1001):
            field[h][w] += field[h - 1][w]
    # print("3333")
    nums = [0] * (N + 1)
    for w in range(1001):
        for h in range(1001):
            nums[field[h][w]] += 1
    print(*nums[1:], sep="\n")
    return


# Generated by 2.2.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    lx = [int()] * (N)  # type: "List[int]"
    ly = [int()] * (N)  # type: "List[int]"
    rx = [int()] * (N)  # type: "List[int]"
    ry = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        lx[i] = int(next(tokens))
        ly[i] = int(next(tokens))
        rx[i] = int(next(tokens))
        ry[i] = int(next(tokens))
    solve(N, lx, ly, rx, ry)

if __name__ == '__main__':
    main()
