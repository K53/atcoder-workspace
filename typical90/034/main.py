#!/usr/bin/env python3
import sys
from collections import defaultdict


def solve(N: int, K: int, a: "List[int]"):
    d = defaultdict(int)
    l = 0
    r = 0
    ans = 0
    kind = 0
    for _ in range(N):
        while r < N and (d[a[r]] > 0 or (d[a[r]] == 0 and kind < K)):
            # print(l, r, list(d.values()), "#", ans, kind)
            if d[a[r]] == 0:
                kind += 1
            ans = max(ans, r - l + 1)
            d[a[r]] += 1
            r += 1
        # print(l, r, list(d.values()), ans, kind)
        if kind >= K:
            d[a[l]] -= 1
            if d[a[l]] == 0:
                kind -= 1
            l += 1
        # print(l, r, list(d.values()), ans, kind)
    print(ans)
    return


# Generated by 2.3.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    a = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, K, a)

if __name__ == '__main__':
    main()
