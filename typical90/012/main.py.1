#!/usr/bin/env python3

YES = "Yes"  # type: str
NO = "No"  # type: str

# Generated by 2.3.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    from collections import defaultdict
    class UnionFind():
        def __init__(self, n):
            self.n = n
            self.parents = [-1] * n

        def find(self, x):
            if self.parents[x] < 0:
                return x
            else:
                self.parents[x] = self.find(self.parents[x])
                return self.parents[x]

        def union(self, x, y):
            x = self.find(x)
            y = self.find(y)

            if x == y:
                return

            if self.parents[x] > self.parents[y]:
                x, y = y, x

            self.parents[x] += self.parents[y]
            self.parents[y] = x

        def size(self, x):
            return -self.parents[self.find(x)]

        def same(self, x, y):
            return self.find(x) == self.find(y)

        def members(self, x):
            root = self.find(x)
            return [i for i in range(self.n) if self.find(i) == root]

        def roots(self):
            return [i for i, x in enumerate(self.parents) if x < 0]

        def group_count(self):
            return len(self.roots())

        def all_group_members(self):
            group_members = defaultdict(list)
            for member in range(self.n):
                group_members[self.find(member)].append(member)
            return group_members

        def __str__(self):
            return '\n'.join(f'{r}: {m}' for r, m in self.all_group_members().items())
    
    def toNode(ww, hh):
        return ww + hh * W

    H, W = map(int, input().split())
    Q = int(input())
    uf = UnionFind(H * W)
    used = [[0] * H for _ in range(W)]
    for _ in range(Q):
        l = input().split()
        if l[0] == "1":
            hh, ww = map(lambda i: int(i) - 1, l[1:])
            for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:
                if ww + dx >= 0 and ww + dx < W and hh + dy >= 0 and hh + dy < H and used[ww + dx][hh + dy]:
                    uf.union(toNode(ww, hh), toNode(ww + dx, hh + dy))
            used[ww][hh] = 1
        else:
            h1, w1, h2, w2 = map(lambda i: int(i) - 1, l[1:])
            if w1 == w2 and h1 == h2:
                print(YES if used[w1][h1] else NO)
            else:
                print(YES if uf.same(toNode(w1, h1), toNode(w2, h2)) else NO)
    return
        
if __name__ == '__main__':
    main()
