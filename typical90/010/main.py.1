#!/usr/bin/env python3
import sys


def solve(N: int, C: "List[int]", P: "List[int]", Q: int, L: "List[int]", R: "List[int]"):
    sum1 = [0]
    sum2 = [0]
    for i in range(N):
        if C[i] == 1:
            sum1.append(sum1[i] + P[i])
            sum2.append(sum2[i])
        else:
            sum1.append(sum1[i])
            sum2.append(sum2[i] + P[i])
    for i in range(Q):
        print(sum1[R[i]] - sum1[L[i] - 1], sum2[R[i]] - sum2[L[i] - 1])

    return


# Generated by 2.2.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    C = [int()] * (N)  # type: "List[int]"
    P = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        C[i] = int(next(tokens))
        P[i] = int(next(tokens))
    Q = int(next(tokens))  # type: int
    L = [int()] * (Q)  # type: "List[int]"
    R = [int()] * (Q)  # type: "List[int]"
    for i in range(Q):
        L[i] = int(next(tokens))
        R[i] = int(next(tokens))
    solve(N, C, P, Q, L, R)

if __name__ == '__main__':
    main()
