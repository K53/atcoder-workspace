#!/usr/bin/env python3
import sys


def solve(N: int, Q: int, A: "List[int]", L: "List[int]", R: "List[int]", V: "List[int]"):
    if N == 1:
        for i in range(Q):
            print(0)
        return
    inconv = []
    sum = 0
    
    for i in range(N - 1):
        inconv.append(A[i + 1] - A[i]) 
        sum += abs(A[i + 1] - A[i])
    # print(inconv)
    
    for i in range(Q):
        l, r = L[i] - 1, R[i] - 1
        if l > 0:
            print(sum, abs(inconv[l - 1] + V[i]) - abs(inconv[l - 1]), "l")
            sum += abs(inconv[l - 1] + V[i]) - abs(inconv[l - 1])
            inconv[l - 1] += V[i]
            
        if r < N - 1:
            print(inconv[r], V[i])
            print(sum, inconv[r] -  V[i], "r")
            sum += abs(inconv[r]) - abs(inconv[r] - V[i])
            inconv[r] -= V[i]
        print(sum)
    return


# Generated by 2.3.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    Q = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    L = [int()] * (Q)  # type: "List[int]"
    R = [int()] * (Q)  # type: "List[int]"
    V = [int()] * (Q)  # type: "List[int]"
    for i in range(Q):
        L[i] = int(next(tokens))
        R[i] = int(next(tokens))
        V[i] = int(next(tokens))
    solve(N, Q, A, L, R, V)

if __name__ == '__main__':
    main()
