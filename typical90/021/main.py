#!/usr/bin/env python3
import sys
sys.setrecursionlimit(10 ** 9) #再帰回数の限界を変更

def solve(N: int, M: int, A: "List[int]", B: "List[int]"):
    class SCC():
        def __init__(self, nodesNum: int):
            self.nodesNum = nodesNum                    # 頂点数
            self.G = [[] for _ in range(self.nodesNum)] # グラフ
            self.rG = [[] for _ in range(self.nodesNum)]# 全ての辺を逆向きにしたグラフ
            self.seen = [False] * self.nodesNum         # 各ノードが訪問済みかどうかのフラグ
            self.firstOrder = []                        # ノードの行きがけ順(0-indexで採番)
            self.lastOrder = []                         # ノードの帰りがけ順(0-indexで採番)
            self.tplConnections = [-1] * self.nodesNum  # 強連結成分分解の結果(0-indexで採番。数値が若いものから順にトポロジカルソートされている)
            self.sccNum = 0                             # 強連結成分の採番用カウンタ(0-indexで採番)
        
        # 辺の追加
        def addEdge(self, fromNode: int, toNode: int):
            self.G[fromNode].append(toNode)
            self.rG[toNode].append(fromNode)

        # DFS
        def _dfs(self, now: int):
            self.firstOrder.append(now)
            self.seen[now] = True
            for next in self.G[now]:
                if self.seen[next]:
                    continue
                self._dfs(next)
            self.lastOrder.append(now)
        
        # 逆向きグラフの強連結成分チェック
        def _reverseDfs(self, now: int):
            self.seen[now] = True
            self.tplConnections[now] = self.sccNum
            for next in self.rG[now]:
                if self.seen[next]:
                    continue
                self._reverseDfs(next)
        
        # 強連結成分分解SCC
        def scc(self):
            # 帰りがけ順のナンバリングDFS
            for startNode in range(self.nodesNum):
                if self.seen[startNode]:
                    continue
                self._dfs(startNode)
            # seenをリセット
            self.seen = [False] * self.nodesNum
            # 帰りがけ順の大きい方から順に強連結成分の判定DFS
            for node in self.lastOrder[::-1]:
                if self.seen[node]:
                    continue
                self._reverseDfs(node)
                self.sccNum += 1
            return self.tplConnections
        
        # 2つのノードが強連結か。
        def same(self, a: int, b: int):
            return self.tplConnections[a] == self.tplConnections[b]

    # usage
    d = SCC(N) # グラフ生成
    for i in range(M):
        d.addEdge(A[i] - 1, B[i] - 1) # 辺の追加
    nums = [0] * N
    ans = 0
    for i in d.scc(): # 強連結成分分解
        nums[i] += 1
    for i in nums:
        ans += (i * (i - 1)) // 2
    print(ans)
    return


# Generated by 2.3.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    A = [int()] * (M)  # type: "List[int]"
    B = [int()] * (M)  # type: "List[int]"
    for i in range(M):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    solve(N, M, A, B)

if __name__ == '__main__':
    main()
