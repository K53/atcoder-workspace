#!/usr/bin/env python3
import sys


def solve(N: int, A: "List[int]", B: "List[int]", C: "List[int]"):
    mA = [0] * 46
    mB = [0] * 46
    mC = [0] * 46
    for aa, bb, cc in zip(A, B, C):
        mA[aa % 46] += 1
        mB[bb % 46] += 1
        mC[cc % 46] += 1
    ans = 0
    for aa in range(46):
        for bb in range(46):
            for cc in range(46):
                if (aa + bb + cc) % 46 == 0:
                    ans += mA[aa] * mB[bb] * mC[cc]
    print(ans)
    return


# Generated by 2.3.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    B = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    C = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, A, B, C)

if __name__ == '__main__':
    main()
