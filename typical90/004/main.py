#!/usr/bin/env python3
import sys

def generate2Darray(height: int, width: int, init: int) -> "List[List[int]]":
    res = []
    for _ in range(height):
       res.append([init] * width)
    return res

def solve(H: int, W: int, A: "List[List[int]]"):
    Xsum = [0] * H
    Ysum = [0] * W
    ans = generate2Darray(H, W, 0)
    for ww in range(W):
        for hh in range(H):
            Xsum[hh] += A[hh][ww]
            Ysum[ww] += A[hh][ww]
    for hh in range(H):
        for ww in range(W):
            ans[hh][ww] = Xsum[hh] + Ysum[ww] - A[hh][ww]
        print(*(ans[hh]))
    return

# Generated by 2.2.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    H = int(next(tokens))  # type: int
    W = int(next(tokens))  # type: int
    A = [[int(next(tokens)) for _ in range(W)] for _ in range(H)]  # type: "List[List[int]]"
    solve(H, W, A)

if __name__ == '__main__':
    main()
