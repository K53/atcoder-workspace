#!/usr/bin/env python3
import sys

def solve(N: int, L: int, K: int, A: "List[int]"):
    subs = []
    nA = [0] + A + [L]
    for i in range(N + 1):
        subs.append(nA[i + 1] - nA[i])

    def isDividable(l: int) -> bool:
        sum = 0
        count = 0
        for sub in subs:
            sum += sub
            if sum > l:
                sum = 0
                count += 1
        return count >= K + 1


    # False -- ng | ok -- True
    def is_ok(l):
        if l < 0: return False
        if l >= L: return True
        return isDividable(l)

    def binSearch(ng, ok):
        while abs(ok - ng) > 1:
            mid = (ok + ng) // 2
            if is_ok(mid):
                ng = mid
            else:
                ok = mid
        # print(ok, ng)
        return ok

    print(binSearch(0, L))
    return


# Generated by 2.2.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    L = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, L, K, A)

if __name__ == '__main__':
    main()
