#!/usr/bin/env python3
import sys
import queue
INF = 10 ** 18

def bfs(edges: "List[to]", start_node: int) -> list:
    q = queue.Queue()
    dist = [INF] * len(edges)
    q.put(start_node)
    dist[start_node] = 0
    while not q.empty():
        now = q.get()
        for next in edges[now]:
            if dist[next] != INF:
                continue
            q.put(next)
            dist[next] = dist[now] + 1
    return dist

def solve(N: int, A: "List[int]", B: "List[int]"):
    edges = [[] for _ in range(N)]
    for a, b in zip(A, B):
        edges[a - 1].append(b - 1)
        edges[b - 1].append(a - 1)
    dist1 = bfs(edges, 0)
    i = dist1.index(max(dist1))
    dist2 = bfs(edges, i)
    print(max(dist2) + 1)
    return


# Generated by 2.2.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int()] * (N - 1)  # type: "List[int]"
    B = [int()] * (N - 1)  # type: "List[int]"
    for i in range(N - 1):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    solve(N, A, B)

if __name__ == '__main__':
    main()
