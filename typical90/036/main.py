#!/usr/bin/env python3
import sys


def solve(N: int, Q: int, X: "List[int]", Y: "List[int]", q: "List[int]"):
    xmax = xmin = ymax = ymin = 0
    points = []
    for x, y in zip(X, Y):
        points.append((x - y, x + y))
        xmax = max(xmax, x - y)
        xmin = min(xmin, x - y)
        ymax = max(ymax, x + y)
        ymin = min(ymin, x + y)
    for qq in q:
        x, y = points[qq - 1]
        print(max(abs(x - xmax), abs(x - xmin), abs(y - ymax), abs(y - ymin)))
    return


# Generated by 2.3.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    Q = int(next(tokens))  # type: int
    x = [int()] * (N)  # type: "List[int]"
    y = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        x[i] = int(next(tokens))
        y[i] = int(next(tokens))
    q = [int(next(tokens)) for _ in range(Q)]  # type: "List[int]"
    solve(N, Q, x, y, q)

if __name__ == '__main__':
    main()
