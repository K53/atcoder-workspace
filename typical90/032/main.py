#!/usr/bin/env python3
import sys
from itertools import permutations

def solve(N: int, A: "List[List[int]]", M: int, X: "List[int]", Y: "List[int]"):
    # 隣接リストつくる
    nodes = [[] for _ in range(N)]
    for i in range(M):
        nodes[X[i] - 1].append(Y[i] - 1)
        nodes[Y[i] - 1].append(X[i] - 1)
    # print(nodes)


    ans = 100000007
    # 全探索
    for p in permutations([i for i in range(N)]):
        time = 0
        for i in range(N - 1):
            if p[i + 1] in nodes[p[i]]:
                break
            time +=A[p[i]][i]
        else:
            time += A[p[-1]][-1]
            # print(p, time)
            ans = min(ans, time)
            
    print(ans if ans != 100000007 else -1) 

    return


# Generated by 2.3.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [[int(next(tokens)) for _ in range(N)] for _ in range(N)]  # type: "List[List[int]]"
    M = int(next(tokens))  # type: int
    X = [int()] * (M)  # type: "List[int]"
    Y = [int()] * (M)  # type: "List[int]"
    for i in range(M):
        X[i] = int(next(tokens))
        Y[i] = int(next(tokens))
    solve(N, A, M, X, Y)

if __name__ == '__main__':
    main()
