#!/usr/bin/env python3
import sys


def solve(N: int, t: "List[int]", A: "List[int]", B: "List[int]"):
    # True ------ ok | ng ---- False
    def is_ok(k: int):
        expires = []
        # すべての果実がk以上までの日数を算出
        # ソートして最後までその日数を守れるならtrue
        for tt, aa, bb in zip(t, A, B):
            rest = aa - k
            print("@", k, rest)
            if rest < 0:
                return False
            p, q = divmod(rest, bb)
            print("#", p, q, tt)
            p = p + (1 if q > 0 else 0) + (tt - 1)
            expires.append(p)
        expires.sort()
        print(expires)
        for i in range(N):
            if expires[i] < i:
                return False
        return True

    def binSearch(ok: int, ng: int):
        print(ok, ng)              # はじめの2値の状態
        while abs(ok - ng) > 1:     # 終了条件（差が1となり境界を見つけた時)
            mid = (ok + ng) // 2
            print("target > ", mid)
            result = is_ok(mid)
            print(result)
            if result:
                ok = mid            # midが条件を満たすならmidまではokなのでokの方を真ん中まで持っていく
            else:
                ng = mid            # midが条件を満たさないならmidまではngなのでngの方を真ん中まで持っていく
            print(ok, ng)          # 半分に切り分ける毎の2値の状態
        return ok
    print(binSearch(-1 * 10 ** 16, 10 ** 16))
    return


# Generated by 2.6.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    t = [int()] * (N)  # type: "List[int]"
    A = [int()] * (N)  # type: "List[int]"
    B = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        t[i] = int(next(tokens))
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    solve(N, t, A, B)

if __name__ == '__main__':
    main()
