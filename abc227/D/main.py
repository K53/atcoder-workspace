#!/usr/bin/env python3
import sys


def solve(N: int, K: int, A: "List[int]"):
    import heapq
    A.sort(reverse=True)
    q = [aa for aa in A[:K]]
    heapq.heapify(q)
    for aa in A[K:]:
        m = heapq.heappop(q)
        heapq.heappush(q, m + aa)
    print(heapq.heappop(q))
    return


# Generated by 2.9.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, K, A)

if __name__ == '__main__':
    main()
