#!/usr/bin/env python3
import sys

YES = "Yes"  # type: str
NO = "No"  # type: str


def solve(N: int, K: int, A: "List[int]", B: "List[int]"):
    dp = [[0 for _ in range(2)] for _ in range(N)]
    dp[0][0] = 1 
    dp[0][1] = 1 
    for i in range(N - 1):
        if dp[i][0] and abs(A[i] - A[i + 1]) <= K:
            dp[i + 1][0] = 1
        if dp[i][0] and abs(A[i] - B[i + 1]) <= K:
            dp[i + 1][1] = 1
        if dp[i][1] and abs(B[i] - A[i + 1]) <= K:
            dp[i + 1][0] = 1
        if dp[i][1] and abs(B[i] - B[i + 1]) <= K:
            dp[i + 1][1] = 1
    if dp[-1][0] or dp[-1][1]:
        print(YES)        
    else:
        print(NO)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    B = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, K, A, B)

if __name__ == '__main__':
    main()
