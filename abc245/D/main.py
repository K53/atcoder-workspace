#!/usr/bin/env python3
import sys


def solve(N: int, M: int, A: "List[int]", C: "List[int]"):
    A = A[::-1]
    C = C[::-1]
    ans = []
    for cur in range(0, M + 1):
        times = C[cur] // A[0]
        for i in range(cur, cur + N + 1):
            C[i] -= times * A[i - cur]
        ans.append(times)
    print(*ans[::-1], sep=" ")
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N + 1)]  # type: "List[int]"
    C = [int(next(tokens)) for _ in range(N + M + 1)]  # type: "List[int]"
    solve(N, M, A, C)

if __name__ == '__main__':
    main()
