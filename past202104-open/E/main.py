#!/usr/bin/env python3
from collections import deque
import sys


def solve(N: int, S: str):
    q = deque()
    for i in range(N):
        if S[i] == "L":
            q.appendleft(i + 1)
        elif S[i] == "R":
            q.append(i + 1)
        elif S[i] == "A":
            if len(q) <= 0:
                print("ERROR")
            else:
                print(q.popleft())
        elif S[i] == "B":
            if len(q) <= 1:
                print("ERROR")
            else:
                t = q.popleft()
                print(q.popleft())
                q.appendleft(t)
        elif S[i] == "C":
            if len(q) <= 2:
                print("ERROR")
            else:
                t = q.popleft()
                t2 = q.popleft()
                print(q.popleft())
                q.appendleft(t2)
                q.appendleft(t)
        elif S[i] == "D":
            if len(q) <= 0:
                print("ERROR")
            else:
                print(q.pop())
        elif S[i] == "E":
            if len(q) <= 1:
                print("ERROR")
            else:
                t = q.pop()
                print(q.pop())
                q.append(t)
        else: # F
            if len(q) <= 2:
                print("ERROR")
            else:
                t = q.pop()
                t2 = q.pop()
                print(q.pop())
                q.append(t2)
                q.append(t)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    S = next(tokens)  # type: str
    solve(N, S)

if __name__ == '__main__':
    main()
