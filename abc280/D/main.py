#!/usr/bin/env python3
import sys

def primeFactorise(n: int) -> list:
    primeFactors = []
    i = 2
    while i * i <= n: # sqrt(N)まで試し割りする。
        exp = 0
        while n % i == 0:
            exp += 1
            n //= i
        if exp != 0:
            primeFactors.append((i, exp))
        i += 1
    if n != 1:
        primeFactors.append((n, 1))
    return primeFactors

# False ------ ng | ok ---- True
def is_ok(k: int, base: int, need: int):
    num = 0
    for i in range(1, k):
        if k < base ** i:
            break
        num += k // (base ** i)
    # print(num)
    return num >= need

def binSearch(ok: int, ng: int, base: int, need: int):
    # print(ok, ng)              # はじめの2値の状態
    while abs(ok - ng) > 1:     # 終了条件（差が1となり境界を見つけた時)
        mid = (ok + ng) // 2
        # print("target > ", mid)
        result = is_ok(k=mid, base=base, need=need)
        # print(result)
        if result:
            ng = mid            # midが条件を満たすならmidまではokなのでokの方を真ん中まで持っていく
        else:
            ok = mid            # midが条件を満たさないならmidまではngなのでngの方を真ん中まで持っていく
        # print(ok, ng)          # 半分に切り分ける毎の2値の状態
    return ok + 1   # 関数呼び出し時の引数のngは絶対評価されないのでngに書く値が答えになりうるならその数マイナス1を指定する。


def solve(K: int):
    l = primeFactorise(K)
    # print(l)
    ans = []
    for base, c in l:
        res = binSearch(0, K, base, c)
        ans.append(res)
    # print(ans)
    print(max(ans))
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    K = int(next(tokens))  # type: int
    solve(K)

if __name__ == '__main__':
    main()
