#!/usr/bin/env python3
import sys
from collections import deque
import heapq

def solve(N: int, M: int, A: "List[int]", B: "List[int]"):
    # 前からやると q = [(100 4) (50, 1) (1, 3)] みたいな時に(50, 1)が捨て去られる。
    # l = [(bb, aa) for aa, bb in zip(A, B)]
    # l.sort(reverse=True)
    # q = deque(l)
    # # print(q)
    # ans = 0
    # for i in range(M):
    #     while len(q) != 0:
    #         val, day = q.popleft()
    #         if day + i <= M:
    #             ans += val
    #             break
    # print(ans)    
    l = [(aa, -bb) for aa, bb in zip(A, B)]
    l.sort()
    q = deque(l)
    hq = []
    heapq.heapify(hq)
    ans = 0
    for i in range(1, M + 1):
        while len(q) != 0:
            if q[0][0] == i:
                day, val = q.popleft()
                heapq.heappush(hq, val)
            else:
                break
        # print(i, hq)
        if len(hq) == 0:
            continue
        ans += -heapq.heappop(hq)
        # print(ans)
    print(ans)    
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    A = [int()] * (N)  # type: "List[int]"
    B = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    solve(N, M, A, B)

if __name__ == '__main__':
    main()
