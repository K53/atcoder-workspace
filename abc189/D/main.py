#!/usr/bin/env python3
import sys


def solve(N: int, S: "List[str]"):
    dp = [[0] * 2 for _ in range(N + 1)]
    dp[0][0] = 1
    dp[0][1] = 1
    for i in range(N):
        if S[i] == "AND":
            dp[i + 1][0] = dp[i][0] + dp[i][0] + dp[i][1]
            dp[i + 1][1] = dp[i][1] + 0
        else:
            dp[i + 1][0] = 0 + dp[i][0]
            dp[i + 1][1] = dp[i][0] + dp[i][1] + dp[i][1]
    print(dp[-1][1])
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    S = [next(tokens) for _ in range(N)]  # type: "List[str]"
    solve(N, S)

if __name__ == '__main__':
    main()
