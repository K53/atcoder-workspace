#!/usr/bin/env python3
import math

three = (3, 3)
one = (3, 1)
def mul(S, sizeS, T, sizeT):
    ''' 行列積 S @ T を計算する
    S, T: 1次元行列
    sizeS, sizeT: [row数, col数]

    Sc == Tr 必須

    Returns: [Sr, Tc]の1次元行列
    '''
    Sr, Sc = *sizeS
    Tr, Tc = *sizeT
    N = Sr * Tc
    ret = [0] * (N)
    for i in range(N):
        x, y = divmod(i, Tc)
        L = S[Sc * x: Sc * (x + 1)]
        R = [T[Tc * j + y] for j in range(Tr)]
        tmp = sum(a * b for a, b in zip(L, R))
        ret[i] = tmp
    return ret

# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    N = int(input())
    XY = []
    for _ in range(N):
        XY.append(set(map(int, input().split())))
    M = int(input())
    ops = []
    for _ in range(M):
        ops.append(list(map(int, input().split())))
    Q = int(input())
    AB = []
    for _ in range(Q):
        AB.append(list(map(int, input().split())))
    
    mul()


if __name__ == '__main__':
    main()
