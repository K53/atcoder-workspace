#!/usr/bin/env python3
import sys
import bisect
import itertools


def solve(N: int, Q: int, A: "List[int]", X: "List[int]"):
    sortedA = sorted(A)
    sumA = [0] + list(itertools.accumulate(sortedA))
    # print(sumA)
    for xx in X:
        idx = bisect.bisect_left(sortedA, xx)
        # print(idx, idx * xx, sumA[idx])
        # print(idx, sumA[-1] - sumA[idx], (len(sumA) - idx - 1) * xx)
        print(idx * xx - sumA[idx] + (sumA[-1] - sumA[idx] - (len(sumA) - idx - 1) * xx))
    
    # s_nums = [0] + list(itertools.accumulate(nums))
    # s_counts = [0] + list(itertools.accumulate(counts))
    # s_nums.append(s_nums[-1])
    # s_counts.append(s_counts[-1])
    # for xx in X:
    #     idx = bisect.bisect_right(sX, xx) - 1
    #     ans = 0
    #     if s_nums[idx + 1] - s_nums[idx] != s_counts[idx + 1] - s_counts[idx]:

    #     # print((s_nums[-1] - s_nums[idx]) - (s_counts[-1] - s_counts[idx]) * xx)
    #         ans += (s_nums[-1] - s_nums[idx]) - (s_counts[-1] - s_counts[idx]) * xx
    #     # if idx != 0:
    #     # print(s_nums[idx] - s_nums[0])
    #     # print(s_counts[idx] - s_counts[0])
    #     # print((s_counts[idx] - s_counts[0]) * xx - (s_nums[idx] - s_nums[0]))
    #     ans += (s_counts[idx] - s_counts[0]) * xx - (s_nums[idx] - s_nums[0])
    #     print(ans)



        
        
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    Q = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    X = [int(next(tokens)) for _ in range(Q)]  # type: "List[int]"
    solve(N, Q, A, X)

if __name__ == '__main__':
    main()
