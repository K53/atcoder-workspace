#!/usr/bin/env python3
import sys


def solve(N: int, K: int, A: "List[int]", X: "List[int]", Y: "List[int]"):
    ok = []
    ng = []
    for i in range(N):
        if (i + 1) in A:
            ok.append((X[i], Y[i]))
        else:
            ng.append((X[i], Y[i]))
    ans = 0
    for nn in ng:
        near = 10 ** 18
        for oo in ok:
            near = min(near, abs(oo[0] - nn[0]) ** 2 + abs(oo[1] - nn[1]) ** 2)
        ans = max(ans, near)
    print(ans ** 0.5)


    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(K)]  # type: "List[int]"
    X = [int()] * (N)  # type: "List[int]"
    Y = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        X[i] = int(next(tokens))
        Y[i] = int(next(tokens))
    solve(N, K, A, X, Y)

if __name__ == '__main__':
    main()
