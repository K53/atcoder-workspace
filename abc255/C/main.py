#!/usr/bin/env python3
import sys

def solve(X: int, A: int, D: int, N: int):
    if A <= X and D <= 0:
        print(X - A)
        # print("a")
        return
    elif X <= A and D >= 0:
        print(A - X)
        # print("a")
        return

    # True ------ ok | ng ---- False
    def is_ok1(k: int):
        return A + D * k < X

    def binSearch1(ok: int, ng: int):
        # print(ok, ng)              # はじめの2値の状態
        while abs(ok - ng) > 1:     # 終了条件（差が1となり境界を見つけた時)
            mid = (ok + ng) // 2
            # print("target > ", mid)
            result = is_ok1(mid)
            # print(result)
            if result:
                ok = mid            # midが条件を満たすならmidまではokなのでokの方を真ん中まで持っていく
            else:
                ng = mid            # midが条件を満たさないならmidまではngなのでngの方を真ん中まで持っていく
            # print(ok, ng)          # 半分に切り分ける毎の2値の状態
        return ok    # 関数呼び出し時の引数のngは絶対評価されないのでngに書く値が答えになりうるならその数マイナス1を指定する。

    # False ------ ng | ok ---- True
    def is_ok2(k: int):
        return A + D * k < X

    def binSearch2(ok: int, ng: int):
        # print(ok, ng)              # はじめの2値の状態
        while abs(ok - ng) > 1:     # 終了条件（差が1となり境界を見つけた時)
            mid = (ok + ng) // 2
            # print("target > ", mid)
            result = is_ok2(mid)
            # print(result)
            if result:
                ok = mid            # midが条件を満たすならmidまではokなのでokの方を真ん中まで持っていく
            else:
                ng = mid            # midが条件を満たさないならmidまではngなのでngの方を真ん中まで持っていく
            # print(ok, ng)          # 半分に切り分ける毎の2値の状態
        return ok    # 関数呼び出し時の引数のngは絶対評価されないのでngに書く値が答えになりうるならその数マイナス1を指定する。

    if D >= 0:
        num = binSearch1(0, N)
        # print(num)
        if num == N - 1:
            print(abs((A + D * num) - X))
        else:
            print(min(abs((A + D * (num + 1)) - X), abs((A + D * num) - X)))
    else:
        num = binSearch2(N - 1, 0) # mi
        # print(num)
        if num == 0:
            print(abs((A + D * num) - X))
        else:
            print(min(abs((A + D * (num - 1)) - X), abs((A + D * num) - X)))

    # print(min(abs((A + D * (num - 1)) - X), abs((A + D * num) - X)))
    return
# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    X = int(next(tokens))  # type: int
    A = int(next(tokens))  # type: int
    D = int(next(tokens))  # type: int
    N = int(next(tokens))  # type: int
    solve(X, A, D, N)

if __name__ == '__main__':
    main()
