#!/usr/bin/env python3
import sys


def solve(N: int, A: "List[int]"):
    from collections import defaultdict
    d = defaultdict(int)
    for aa in A:
        d[aa] += 1
    cand = []
    for k, v in d.items():
        if v >= 4:
            cand.append(k)
            cand.append(k)
        if v >= 2:
            cand.append(k)
    if len(cand) < 2:
        print(0)
        return
    cand.sort()
    print(cand[-1] * cand[-2])
    return


# Generated by 2.9.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, A)

if __name__ == '__main__':
    main()
