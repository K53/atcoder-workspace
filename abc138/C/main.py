#!/usr/bin/env python3
import sys
import heapq

def solve(N: int, v: "List[int]"):
    heapq.heapify(v)
    while len(v) >= 2:
        m1 = heapq.heappop(v)
        m2 = heapq.heappop(v)
        heapq.heappush(v, (m1 + m2) / 2)
    m1 = heapq.heappop(v)
    print(m1)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    v = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, v)

if __name__ == '__main__':
    main()
