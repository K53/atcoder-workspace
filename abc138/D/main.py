#!/usr/bin/env python3
import sys
from collections import deque

def solve(N: int, Q: int, a: "List[int]", b: "List[int]", p: "List[int]", x: "List[int]"):
    num = [0] * N
    G = [[] for _ in range(N)]
    for i in range(N - 1):
        G[a[i] - 1].append(b[i] - 1)
        G[b[i] - 1].append(a[i] - 1)
    
    for i in range(Q):
        num[p[i] - 1] += x[i]
    
    q = deque()
    q.append((-1, 0))
    while q:
        pre, cur = q.popleft()
        for next in G[cur]:
            if pre == next:
                continue
            q.append((cur, next))
            num[next] += num[cur]
    print(*num)


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    Q = int(next(tokens))  # type: int
    a = [int()] * (N - 1)  # type: "List[int]"
    b = [int()] * (N - 1)  # type: "List[int]"
    for i in range(N - 1):
        a[i] = int(next(tokens))
        b[i] = int(next(tokens))
    p = [int()] * (Q)  # type: "List[int]"
    x = [int()] * (Q)  # type: "List[int]"
    for i in range(Q):
        p[i] = int(next(tokens))
        x[i] = int(next(tokens))
    solve(N, Q, a, b, p, x)

if __name__ == '__main__':
    main()
