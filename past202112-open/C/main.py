#!/usr/bin/env python3
from collections import defaultdict
import sys


def solve(N: int, P: "List[str]", V: "List[str]"):
    d = defaultdict(int)
    for i in range(N):
        pp, vv = P[i], V[i]
        if d[pp] == 0 and vv == "AC":
            d[pp] = i + 1
    for i in "ABCDEF":
        print(d[i])
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    P = [str()] * (N)  # type: "List[str]"
    V = [str()] * (N)  # type: "List[str]"
    for i in range(N):
        P[i] = next(tokens)
        V[i] = next(tokens)
    solve(N, P, V)

if __name__ == '__main__':
    main()
