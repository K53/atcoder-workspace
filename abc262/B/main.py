#!/usr/bin/env python3
import sys


def solve(N: int, M: int, U: "List[int]", V: "List[int]"):
    G = [set() for _ in range(N)]
    for i in range(M):
        G[U[i] - 1].add(V[i] - 1)
        G[V[i] - 1].add(U[i] - 1)
    ans = 0
    for a in range(N - 2):
        for b in range(a, N - 1):
            for c in range(b, N):
                if b in G[a] and c in G[a] and c in G[b]:
                    ans += 1
    print(ans)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    U = [int()] * (M)  # type: "List[int]"
    V = [int()] * (M)  # type: "List[int]"
    for i in range(M):
        U[i] = int(next(tokens))
        V[i] = int(next(tokens))
    solve(N, M, U, V)

if __name__ == '__main__':
    main()
