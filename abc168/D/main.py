#!/usr/bin/env python3
import sys
import queue
INF = 10 ** 16
def bfs(edges: "List[to]", start_node: int) -> list:
    q = queue.Queue()
    dist = [(INF, -1)] * len(edges)
    q.put(start_node)
    dist[start_node] = (0, 0)
    while not q.empty():
        now = q.get()
        for next in edges[now]:
            if dist[next][0] != INF:
                continue
            q.put(next)
            dist[next] = (dist[now][0] + 1, now)
    return dist

YES = "Yes"  # type: str
NO = "No"

def solve(N: int, M: int, A: "List[int]", B: "List[int]"):
    edges = [[] for _ in range(N)]
    for i in range(M):
        edges[A[i] - 1].append(B[i] - 1)
        edges[B[i] - 1].append(A[i] - 1)
    d = bfs(edges, 0)
    ans = []
    for i in range(1, N):
        if d[i][1] == -1:
            print(NO)
            return
        ans.append(d[i][1] + 1)
    print(YES)
    print(*ans, sep="\n")
    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    A = [int()] * (M)  # type: "List[int]"
    B = [int()] * (M)  # type: "List[int]"
    for i in range(M):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    solve(N, M, A, B)

if __name__ == '__main__':
    main()
