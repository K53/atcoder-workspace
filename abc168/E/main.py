#!/usr/bin/env python3
import sys
from collections import defaultdict
import math
MOD = 1000000007  # type: int


def solve(N: int, A: "List[int]", B: "List[int]"):
    d = defaultdict(int)
    a0 = 0
    b0 = 0
    for aa, bb in zip(A, B):
        if aa == 0:
            a0 += 1
            continue
        elif bb == 0:
            b0 += 1
            continue
        g = math.gcd(aa, bb)
        d[(aa / g, bb / g)] += 1
    ans = 2 ** a0 + 2 ** b0 - 1
    for aa, bb in zip(A, B):
        ans += d[(-bb, aa)] + d[(bb, -aa)]
    print(ans)
    print(((2 ** N - 1) - ans // 2) % MOD)
        


    
    

    
    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int()] * (N)  # type: "List[int]"
    B = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    solve(N, A, B)

if __name__ == '__main__':
    main()
