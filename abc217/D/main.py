#!/usr/bin/env python3
import sys


def solve(L: int, Q: int, c: "List[int]", x: "List[int]"):
    L = 10 ** 9
    Q = 2 * 10 ** 5
    c = [1] * (10 ** 5 + 5 * 10 ** 4) + [2] * 10 ** 5
    x = [i for i in range(1, 2 * 10 ** 5 + 1, 2)] + [i for i in range(2, 2 * 10 ** 5 + 10, 2)]
    import bisect
    l = [0, L]
    for i in range(Q):
        if c[i] == 1:
            new = bisect.bisect_left(l, x[i])
            l.insert(new, x[i])
        else:
            k = bisect.bisect_left(l, x[i])
            print(l[k] - l[k - 1])
    return


# Generated by 2.8.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    L = int(next(tokens))  # type: int
    Q = int(next(tokens))  # type: int
    c = [int()] * (Q)  # type: "List[int]"
    x = [int()] * (Q)  # type: "List[int]"
    for i in range(Q):
        c[i] = int(next(tokens))
        x[i] = int(next(tokens))
    solve(L, Q, c, x)

if __name__ == '__main__':
    main()
