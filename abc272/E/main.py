#!/usr/bin/env python3
import heapq
import sys


def solve(N: int, M: int, A: "List[int]"):
    # N = 2 * 10 ** 5
    # A = [-(i ** 2) for i in range(N)]
    # M = N
    mm = 10 #2 * 10 ** 5 + 1
    # l = [set() for _ in range(mm)]
    l = [set() for _ in range(mm)]
    zeroTeam = set()
    hq = heapq.heapify([])
    for i, aa in enumerate(A):
        p = 0
        if aa <= 0:
            p, q = divmod(0 - aa, i + 1)
            if q == 0:
                zeroTeam.add(p)
                l[p + 1].add((i + 1 - q, i + 1))
        else:
            heapq.heappush((aa, i + 1), hq)
    print(zeroTeam)
    print(l)

        
    
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, M, A)

if __name__ == '__main__':
    main()
