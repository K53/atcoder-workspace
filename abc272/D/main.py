#!/usr/bin/env python3
import sys
from collections import deque
INF = 10 ** 16
def bfs(G, H, W, startY, startX, move: set) -> list:
    q = deque()
    dist = [[INF] * W for _ in range(H)]
    q.append((startY, startX))
    dist[startY][startX] = 0
    while q:
        nowy, nowx = q.popleft()
        for dx, dy in move:
            nexty = nowy + dy
            nextx = nowx + dx
            if nexty < 0 or nextx < 0 or nexty >= H or nextx >= W or dist[nexty][nextx] != INF or G[nexty][nextx] == "#":
                continue
            q.append((nexty, nextx))
            dist[nexty][nextx] = dist[nowy][nowx] + 1
    return dist

def solve(N: int, M: int):
    move = set()
    for k in range(10 ** 3 + 1):
        for l in range(10 ** 3 + 1):
            if k ** 2 + l ** 2 == M:
                move.add((k, l))
                move.add((-k, l))
                move.add((k, -l))
                move.add((-k, -l))
    # print(len(move))
    G = [[0 for _ in range(N)] for _ in range(N)]
    d = bfs(G, N, N, 0, 0, move)
    # print(d)
    for i in range(N):
        l = []
        for j in range(N):
            if not (i == j == 0) and \
                d[i][j] == INF:
                l.append(-1)
            else:
                l.append(d[i][j])
        print(*l, sep=" ")



    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    solve(N, M)

if __name__ == '__main__':
    main()
