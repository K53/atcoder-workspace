#!/usr/bin/env python3
import sys


def solve(N: int, H: "List[int]", S: "List[int]"):
    # highest = []
    # # for hh, ss in zip(H, S):
    #     highest.append(hh + ss * N)
    # highest.sort()
    
    # True ------ ok | ng ---- False
    def is_ok(k: int):
        needShoot = []
        for i in range(N):
            if k < H[i]:
                return False
            needShoot.append((k - H[i]) // S[i])
        needShoot.sort()
        for i in range(N):
            if needShoot[i] < i:
                return False
        return True

    def binSearch(ok: int, ng: int):
        # print(ok, ng)              # はじめの2値の状態
        while abs(ok - ng) > 1:     # 終了条件（差が1となり境界を見つけた時)
            mid = (ok + ng) // 2
            # print("target > ", mid)
            result = is_ok(mid)
            # print(result)
            if result:
                ok = mid            # midが条件を満たすならmidまではokなのでokの方を真ん中まで持っていく
            else:
                ng = mid            # midが条件を満たさないならmidまではngなのでngの方を真ん中まで持っていく
            # print(ok, ng)          # 半分に切り分ける毎の2値の状態
        return ok     
    print(binSearch(10 ** 16, 0))
    return


# Generated by 2.6.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    H = [int()] * (N)  # type: "List[int]"
    S = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        H[i] = int(next(tokens))
        S[i] = int(next(tokens))
    solve(N, H, S)

if __name__ == '__main__':
    main()
