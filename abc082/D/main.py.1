#!/usr/bin/env python3
import sys

YES = "Yes"  # type: str
NO = "No"  # type: str

def solve(s: str, x: int, y: int):
    # s = 'FTFTFTFFTFTTFFF'
    # x, y = 4, 1
    l = s.split("T")
    dx = []
    dy = []
    for i in range(len(l)):
        if i % 2 == 0:
            dx.append(len(l[i]))
        else:
            dy.append(len(l[i]))
    # print(dx, dy)
    dpLen = 8000
    cur_dp = [0] * (dpLen * 2 + 3)
    next_dp = [0] * (dpLen * 2 + 3)
    cur_dp[dx[0] + dpLen + 1] = 1
    dx = dx[1:]
    # print(cur_dp)
    for i in range(len(dx)):
        for k in range(len(cur_dp)):
            if cur_dp[k] == 0:
                continue
            if k + dx[i] >= len(next_dp):
                continue
            next_dp[k + dx[i]] = 1
            if k - dx[i] < 0:
                continue
            next_dp[k - dx[i]] = 1
        cur_dp = next_dp
        next_dp = [0] * (dpLen * 2 + 3)
        # print(cur_dp)
    # print(cur_dp[x + dpLen + 1])

    if cur_dp[x + dpLen + 1] == 0:
        print(NO)
        return

    cur_dp = [0] * (dpLen * 2 + 3)
    next_dp = [0] * (dpLen * 2 + 3)
    cur_dp[dpLen + 1] = 1
    # print(cur_dp)
    for i in range(len(dy)):
        for k in range(len(cur_dp)):
            if cur_dp[k] == 0:
                continue
            if k + dy[i] >= len(next_dp):
                continue
            next_dp[k + dy[i]] = 1
            if k - dy[i] < 0:
                continue
            next_dp[k - dy[i]] = 1
        cur_dp = next_dp
        next_dp = [0] * (dpLen * 2 + 3)
    #     print(cur_dp)
    # print(cur_dp[y + dpLen + 1])

    if cur_dp[y + dpLen + 1]:
        print(YES)
    else:
        print(NO)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    s = next(tokens)  # type: str
    x = int(next(tokens))  # type: int
    y = int(next(tokens))  # type: int
    solve(s, x, y)

if __name__ == '__main__':
    main()
