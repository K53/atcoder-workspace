#!/usr/bin/env python3
import sys


def solve(N: int, S: "List[str]"):
    L = sorted([(S[i], i) for i in range(N)])
    ans = [0] * N
    for i in range(N):
        if i == 0:
            count = 0
            for ss, tt in zip(L[i][0], L[i + 1][0]):
                if ss == tt:
                    count += 1
                else:
                    break
        elif i == N - 1:
            count = 0
            for ss, tt in zip(L[i - 1][0], L[i][0]):
                if ss == tt:
                    count += 1
                else:
                    break
        else:
            count = 0
            for ss, tt in zip(L[i][0], L[i + 1][0]):
                if ss == tt:
                    count += 1
                else:
                    break
            count2 = 0
            for ss, tt in zip(L[i - 1][0], L[i][0]):
                if ss == tt:
                    count2 += 1
                else:
                    break
            count = max(count, count2)
        ans[L[i][1]] = count
    print(*ans, sep="\n")
            
            
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    S = [next(tokens) for _ in range(N)]  # type: "List[str]"
    solve(N, S)

if __name__ == '__main__':
    main()
