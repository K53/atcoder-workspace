#!/usr/bin/env python3
import sys


def solve(N: int, X: int, M: int):
    if N == 1:
        print(X)
        return
    d = {X:0}
    aas = [X]
    # sums = [0]
    for c in range(1, M + 1):
        a = X ** 2 % M
        # print(a)
        if a in d:
            pre_loop = aas[:d[a]]
            loop = aas[d[a]:c]
            pre_loop_sum = sum(pre_loop) 
            pre_loop_len = len(pre_loop) 
            loop_sum = sum(loop)
            loop_len = len(loop)
            p, q = divmod(N - pre_loop_len, loop_len)
            rest_loop_sum = sum(loop[:q])
            ans = pre_loop_sum + loop_sum * p + rest_loop_sum
            print(ans)
            break
        d[a] = c
        aas.append(a)
        # sums.append(sums[-1] + a)
        X = a
    return



    # d = {}
    # sums = [0]
    # for c in range(M):
    #     a = X ** 2 % M
    #     print(a)
    #     if a in d:
    #         pre = sums[d[a]]
    #         loop = sums[c] - sums[d[a]]
    #         loop_num = c - d[a]
    #         print("found", pre, loop, loop_num)
    #         print(sums)
    #         break
    #     d[a] = c
    #     sums.append(sums[-1] + a)
    #     X = a

# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    X = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    solve(N, X, M)

if __name__ == '__main__':
    main()
