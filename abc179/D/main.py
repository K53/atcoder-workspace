#!/usr/bin/env python3
import sys

MOD = 998244353  # type: int

# dp[マス]
def solve(N: int, K: int, L: "List[int]", R: "List[int]"):
    dp = [0] * (N + 1)
    sdp = [0] * (N + 1)
    dp[1] = 1
    sdp[1] = 1
    for i in range(2, N + 1):
        for kk in range(K):
            l, r = L[kk], R[kk] + 1
            dp[i] += (sdp[max(i - l, 0)] - sdp[max(i - r, 0)])
            dp[i] %= MOD
        sdp[i] = (sdp[i - 1] + dp[i]) % MOD
    print(dp[-1] % MOD)

    # dp = [0] * (N + 1)
    # dp[1] = 1
    # for i in range(2, N + 1):
    #     for kk in range(K):
    #         for j in range(L[kk], R[kk] + 1):
    #             if i - j >= 1:
    #                 dp[i] += dp[i - j]
    # print(dp[-1] % MOD)
    # print(dp)

    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    L = [int()] * (K)  # type: "List[int]"
    R = [int()] * (K)  # type: "List[int]"
    for i in range(K):
        L[i] = int(next(tokens))
        R[i] = int(next(tokens))
    solve(N, K, L, R)

if __name__ == '__main__':
    main()
