#!/usr/bin/env python3
import sys
from itertools import accumulate

MOD = 998244353  # type: int

def solve(N: int, K: int, L: "List[int]", R: "List[int]"):
    dp = [0 for _ in range(N)] # DPテーブルの作成
    dp[0] = 1                               # DPテーブルの初期化
    sdp = [0] + list(accumulate(dp))              # 累積和テーブルの初期化

    # print(sdp)
    for i in range(1, N):
        for num in range(K):               # 列のDPテーブル更新
            dp[i] += sdp[max(0, i - (L[num] - 1))] - sdp[max(0, i - R[num])]
            dp[i] %= MOD
            sdp[i + 1] = sdp[i] + dp[i]
        # print(dp)
        # print(sdp)
    print(dp[-1] % MOD)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    L = [int()] * (K)  # type: "List[int]"
    R = [int()] * (K)  # type: "List[int]"
    for i in range(K):
        L[i] = int(next(tokens))
        R[i] = int(next(tokens))
    solve(N, K, L, R)

if __name__ == '__main__':
    main()
