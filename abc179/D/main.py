#!/usr/bin/env python3
import sys
from itertools import accumulate

MOD = 998244353  # type: int

def solve(N: int, K: int, L: "List[int]", R: "List[int]"):
    # dp = [0] * N
    # dp[0] = 1
    # for i in range(1, N):
    #     for kk in range(K):
    #         for j in range(L[kk], R[kk] + 1):
    #             if i - j >= 0:
    #                 dp[i] += dp[i - j]
    #                 dp[i] %= MOD
    # print(dp[-1] % MOD)


    dp = [0] * N
    dp[0] = 1
    sdp = [0] + list(accumulate(dp)) 
    for i in range(N):
        for kk in range(K):
            l, r = L[kk], R[kk] + 1
            dx = sdp[max(i - l + 1, 0)] - sdp[max(i - r + 1, 0)]
            # print(i, l, r, dx)
            dp[i] += dx
            dp[i] %= MOD
        # sdp = [0] + list(accumulate(dp)) # こうしたいけどTLE。考えてみるとそもそもi番目より後の累積和は必要ないので更新不要。
        sdp[i + 1] = sdp[i] + dp[i]
    print(dp[-1] % MOD)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    L = [int()] * (K)  # type: "List[int]"
    R = [int()] * (K)  # type: "List[int]"
    for i in range(K):
        L[i] = int(next(tokens))
        R[i] = int(next(tokens))
    solve(N, K, L, R)

if __name__ == '__main__':
    main()
