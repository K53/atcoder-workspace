#!/usr/bin/env python3
import sys
from collections import Counter

def solve(N: int, A: "List[int]", Q: int, B: "List[int]", C: "List[int]"):
    d = Counter(A)
    S = sum(A)
    for bb, cc in zip(B, C):
        S += (cc - bb) * d[bb]
        print(S)
        d[cc] += d[bb]
        d[bb] = 0
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    Q = int(next(tokens))  # type: int
    B = [int()] * (Q)  # type: "List[int]"
    C = [int()] * (Q)  # type: "List[int]"
    for i in range(Q):
        B[i] = int(next(tokens))
        C[i] = int(next(tokens))
    solve(N, A, Q, B, C)

if __name__ == '__main__':
    main()
