#!/usr/bin/env python3
import sys
import math

def solve(N: int, A: "List[int]", Q: int, X: "List[int]"):
    nums = [0]
    vals = [0]
    for aa in A:
        num = aa
        q = 0
        count = 1
        while True:
            p, q = divmod(num, 2)
            if q == 0:
                count *= 2
                num = p
            else:
                break
        nums.append(count + nums[-1])
        vals.append(num)
    # print(nums)
    # print(vals)
    import bisect
    for xx in X:
        i = bisect.bisect_left(nums, xx)
        print(vals[i])
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    Q = int(next(tokens))  # type: int
    X = [int(next(tokens)) for _ in range(Q)]  # type: "List[int]"
    solve(N, A, Q, X)

if __name__ == '__main__':
    main()
