#!/usr/bin/env python3
import sys
class SegmentTree:
    def __init__(self, monoid: int, bottomLen: int):
        self.monoid = monoid
        self.bottomLen = bottomLen
        self.offset = self.bottomLen        # セグ木の最下層の最初のインデックスに合わせるためのオフセット
        self.segLen = self.bottomLen * 2
        self.tree = [monoid] * self.segLen

    """ 一点更新 区間和 (RSQ)
    tree[index] += val
    """
    def pointUpdate(self, index: int, val: int):
        segIndex = index + self.offset
        self.tree[segIndex] = val # 一点更新
        while True:
            segIndex //= 2
            if segIndex == 0:
                break
            self.tree[segIndex] = self.tree[segIndex * 2] + self.tree[segIndex * 2 + 1] # 区間和の算出
        return

    """ 区間和 (RSQ)
    """
    def queryKthItem(self, K: int):
        index = 1
        restK = K
        while index < self.offset:
            if restK <= self.tree[2 * index]:
                index = 2 * index
            else:
                restK -= self.tree[2 * index] # 左に進む場合は右側の分を差し引く。
                index = 2 * index + 1
        return index - self.offset

def solve(Q: int, T: "List[int]", X: "List[int]"):
    tr = SegmentTree(monoid=0, bottomLen=2**18)
    for tt, xx in zip(T, X):
        if tt == 1:
            num = xx - 1
            tr.pointUpdate(num, 1)
        else:
            k = xx
            num = tr.queryKthItem(k)
            print(num + 1)
            tr.pointUpdate(num, 0)
    return


# Generated by 2.11.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    Q = int(next(tokens))  # type: int
    T = [int()] * (Q)  # type: "List[int]"
    X = [int()] * (Q)  # type: "List[int]"
    for i in range(Q):
        T[i] = int(next(tokens))
        X[i] = int(next(tokens))
    solve(Q, T, X)

if __name__ == '__main__':
    main()
