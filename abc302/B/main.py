#!/usr/bin/env python3
import sys

def solve(H: int, W: int, S: "List[str]"):
    snuke = "snuke"
    for i in range(H):
        for j in range(W):
            for dy, dx in [(1, 1), (0, 1), (-1, 1), (-1, 0), (-1, -1), (0, -1), (1, -1), (1, 0)]:
                for l in range(5):
                    if not (0 <= i + dy * l < H) or \
                        not (0 <= j + dx * l < W) or \
                        S[i + dy * l][j + dx * l] != snuke[l]:
                        break
                else:
                    for l in range(5):
                        print(i + dy * l + 1, j + dx * l + 1)
                    return
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    H = int(next(tokens))  # type: int
    W = int(next(tokens))  # type: int
    S = [next(tokens) for _ in range(H)]  # type: "List[str]"
    solve(H, W, S)

if __name__ == '__main__':
    main()
