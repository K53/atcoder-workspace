#!/usr/bin/env python3
import heapq
INF = 10 ** 16
# グラフ + 座標圧縮 の問題の場合、開始点と終了点を圧縮後の座標の集合に加え忘れないこと。
class Dijkstra():
    def __init__(self, N: int) -> None:
        self.N = N 
        self.G = [[] for _ in range(N)]
        return
    
    # 辺の追加
    def addEdge(self, fromNode: int, toNode: int, cost: int):
        self.G[fromNode].append((cost, toNode))
        return

    # "toノードに到達するための辺の番号"を同時に持たせることで経路復元時にedge_numを使用できる。
    # def addEdge(self, fromNode: int, toNode: int, cost: int, edge_num: int):
    #     self.G[fromNode].append((cost, toNode, edge_num))
    #     return
    
    def build(self, startNodes: "list[int]"):
        hq = []
        heapq.heapify(hq)
        # Set start info
        dist = [INF] * self.N
        # prev = [-1] * self.N # 経路復元する場合は移動時に直前の頂点や辺を記録して遷移していく。
        for startNode in startNodes:
            heapq.heappush(hq, (0, startNode))
            dist[startNode] = 0
        # dijkstra
        while hq:
            min_cost, now = heapq.heappop(hq)
            if min_cost > dist[now]:
                continue
            for cost, next in self.G[now]:
                if dist[next] > dist[now] + cost:
                    dist[next] = dist[now] + cost
                    # prev[next] = now # 頂点nextに至る直前の頂点(now)または辺(edge_num)を更新。
                    heapq.heappush(hq, (dist[next], next))
        return dist

# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    N, M = map(int, input().split())
    dk = Dijkstra(N + M)
    startNodes = []
    goals = []
    ans = INF
    for node in range(N):
        A = int(input()) - 1
        S = list(map(lambda i: int(i) - 1, input().split()))
        if 0 in S:
            startNodes.append(node)
        if M - 1 in S:
            goals.append(node)
        for i in S:
            dk.addEdge(node, N + i, 1)
            dk.addEdge(N + i, node, 1)
    dist = dk.build(startNodes)
    # print(dist)
    for i in goals:
        ans = min(ans, dist[i] // 2)
    print(ans if ans < INF // 2 else -1)
    return

if __name__ == '__main__':
    main()
