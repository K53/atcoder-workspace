#!/usr/bin/env python3
import sys
INF = 10 ** 16

def solve(N: int, L: int, R: int, A: "List[int]"):
    dp = [[INF] * 3 for _ in range(N + 1)]
    dp[0][0] = 0
    dp[0][1] = 0
    dp[0][2] = 0
    for i in range(N):
        dp[i + 1][0] = min(dp[i + 1][0], dp[i][0] + L)
        dp[i + 1][1] = min(dp[i + 1][1], dp[i][0] + A[i], dp[i][1] + A[i])
        dp[i + 1][2] = min(dp[i + 1][1], dp[i][0] + R, dp[i][1] + R, dp[i][2] + R)
    print(min(dp[-1]))
    

# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    L = int(next(tokens))  # type: int
    R = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, L, R, A)

if __name__ == '__main__':
    main()
