#!/usr/bin/env python3
from itertools import accumulate
import sys
INF = 10 ** 16

def solve(N: int, L: int, R: int, A: "List[int]"):
    dp = [[-INF] * (N + 1) for _ in range(2)] # 0 OK 1 NG
    dp[0][0] = 0
    dp[1][0] = 0
    for i in range(N):
        dp[0][i + 1] = dp[0][i] + L
        dp[1][i + 1] = min(dp[0][i] + A[i], dp[1][i] + A[i])

    # invdp1 = [[-INF] * (N + 1) for _ in range(2)] # 0 OK 1 NG
    # for i in reversed(range(N)):
    #     invdp1[0][i] = invdp1[0][i + 1] - A[i] + R
    #     invdp1[1][i] = min(invdp1[1][i], invdp1[0][i], invdp1[1][i] + A[i])

    #     dp[1][i + 1] = min(dp[0][i] + A[i], dp[1][i] + A[i])
    # mm0 = INF
    # mmidx0 = INF
    # for i in range(N + 1):
    #     if mm0 > dp[0][i]:
    #         mm0 = dp[0][i]
    #         mmidx0 = i
    # mm1 = INF
    # mmidx1 = INF
    # for i in range(N + 1):
    #     if mm1 > dp[1][i]:
    #         mm1 = dp[1][i]
    #         mmidx1 = i
    # if 
            
    # print(dp[0])
    # print(dp[1])

    maxdiff = -INF
    maxdiffidx = 1
    ref = False
    for i in range(1, N + 1):
        if not ref and dp[0][i] < dp[1][i]:
            ref = True
        if ref and maxdiff <= dp[0][i] - dp[1][i]:
            maxdiff = dp[0][i] - dp[1][i]
            maxdiffidx = i
    
    # print(maxdiffidx - 1)
    ll = [L] * (maxdiffidx - 1) + A[(maxdiffidx - 1):]
    # print(ll)
    ll = ll[::-1]

    dp = [[-INF] * (N + 1) for _ in range(2)] # 0 OK 1 NG
    dp[0][0] = 0
    dp[1][0] = 0
    for i in range(N):
        dp[0][i + 1] = dp[0][i] + R
        dp[1][i + 1] = min(dp[0][i] + ll[i], dp[1][i] + ll[i])


    # for i in range(N):
    #     if dp[0][i] > dp[1][i]:
    #         mm = dp[1][i]
     
        
    # print(dp[0])
    # print(dp[1])
    print(min(dp[0][-1], dp[1][-1]))

# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    L = int(next(tokens))  # type: int
    R = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, L, R, A)

if __name__ == '__main__':
    main()
