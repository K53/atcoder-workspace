#!/usr/bin/env python3
import sys

def my_index(l, x):
    if x in l:
        return l.index(x)
    else:
        return -1

def solve(N: int, K: int, S: str):
    l = list(S)
    ans = []
    change = 0
    changedFlg = [1] * N
    for nn in range(N):
        for i in range(26):
            index = my_index(l[nn:], chr(i + ord("a")))
            if index == -1:
                continue
            c = changedFlg[nn] + changedFlg[nn + index] if index != 0 else 0
            # print(c)
            if c <= K - change:
                l[nn], l[nn + index] = l[nn + index], l[nn]
                changedFlg[nn] = 0
                changedFlg[nn + index] = 0
                change += c
                ans.append(chr(i + ord("a")))
                # print(c)
                # print(next)
                # print(ans, l)
                break
    print(*ans, sep="")
    return


# Generated by 2.6.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    S = next(tokens)  # type: str
    solve(N, K, S)

if __name__ == '__main__':
    main()
