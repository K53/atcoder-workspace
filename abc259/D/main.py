#!/usr/bin/env python3
import sys

YES = "Yes"  # type: str
NO = "No"  # type: str

from collections import defaultdict
class UnionFind():
    def __init__(self, n):
        self.n = n
        self.group_num = n
        self.parents = [-1] * n

    """ 要素xの値を取得。"""
    def find(self, x):
        if self.parents[x] < 0:
            return x
        else:
            self.parents[x] = self.find(self.parents[x])
            return self.parents[x]

    """ 2つの要素の併合。"""
    def union(self, x, y):
        x = self.find(x)
        y = self.find(y)

        if x == y:
            return

        if self.parents[x] > self.parents[y]:
            x, y = y, x

        self.parents[x] += self.parents[y]
        self.parents[y] = x
        self.group_num -= 1
        return

    """ 要素xの属する集合の要素数を取得。"""
    def size(self, x):
        return -self.parents[self.find(x)]

    """ 2つの要素が同一の集合に属するか。"""
    def same(self, x, y):
        return self.find(x) == self.find(y)

    """ 要素xと同一の集合の要素を全取得。
    計算量 : O(N)
    """
    def members(self, x):
        root = self.find(x)
        return [i for i in range(self.n) if self.find(i) == root]

    """ 各集合の根を全取得。
    計算量 : O(N)
    """
    def roots(self):
        return [i for i, x in enumerate(self.parents) if x < 0]

    """ 集合の個数を取得。 v2
    計算量 : O(1)
    """
    def group_count_v2(self):
        return self.group_num

    """ 集合の個数を取得。 v1
    計算量 : O(N)
    """
    def group_count_v1(self):
        return len(self.roots())

    """ 全集合の要素一覧を取得。
    計算量 : O(N)
    """
    def all_group_members(self):
        group_members = defaultdict(list)
        for member in range(self.n):
            group_members[self.find(member)].append(member)
        return group_members

    def __str__(self):
        return '\n'.join(f'{r}: {m}' for r, m in self.all_group_members().items())
    

def solve(N: int, s_x: int, s_y: int, t_x: int, t_y: int, x: "List[int]", y: "List[int]", r: "List[int]"):
    uf = UnionFind(N)
    for i in range(N - 1):
        for j in range(i, N):
            d2 = (x[i] - x[j]) ** 2 + (y[i] - y[j]) ** 2
            if (r[i] + r[j]) ** 2 < d2 or (r[i] - r[j]) ** 2 > d2:
                continue
            else:
                uf.union(i, j)
    
    snum = -1
    tnum = -1
    for i in range(N):
        if (s_x - x[i]) ** 2 + (s_y - y[i]) ** 2 == r[i] ** 2:
            snum = i
            break
    for i in range(N):
        if (t_x - x[i]) ** 2 + (t_y - y[i]) ** 2 == r[i] ** 2:
            tnum = i
            break
    if snum == -1 or tnum == -1:
        print(NO)
        return
    # print(uf)
    # print(snum, tnum)
    if uf.same(snum, tnum):
        print(YES)
    else:
        print(NO)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    s_x = int(next(tokens))  # type: int
    s_y = int(next(tokens))  # type: int
    t_x = int(next(tokens))  # type: int
    t_y = int(next(tokens))  # type: int
    x = [int()] * (N)  # type: "List[int]"
    y = [int()] * (N)  # type: "List[int]"
    r = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        x[i] = int(next(tokens))
        y[i] = int(next(tokens))
        r[i] = int(next(tokens))
    solve(N, s_x, s_y, t_x, t_y, x, y, r)

if __name__ == '__main__':
    main()
