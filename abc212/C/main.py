#!/usr/bin/env python3
import sys


def solve(N: int, M: int, A: "List[int]", B: "List[int]"):
    import bisect
    A.sort()
    B.sort()
    ans = 10 ** 9
    for aa in A:
        num = bisect.bisect_left(B, aa)
        # print("s", num)
        if num == 0:
            ans = min(ans, abs(B[num] - aa))
        elif num == M:
            ans = min(ans, abs(B[num - 1] - aa))
        else:
            ans = min(ans, min(abs(B[num - 1] - aa), abs(B[num] - aa)))
    print(ans)
    return


# Generated by 2.6.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    B = [int(next(tokens)) for _ in range(M)]  # type: "List[int]"
    solve(N, M, A, B)

if __name__ == '__main__':
    main()
