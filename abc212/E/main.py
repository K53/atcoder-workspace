#!/usr/bin/env python3
import sys

MOD = 998244353  # type: int


def solve(N: int, M: int, K: int, U: "List[int]", V: "List[int]"):
    G = [[] for _ in range(N)]
    for uu, vv in zip(U, V):
        G[uu - 1].append(vv - 1)
        G[vv - 1].append(uu - 1)
    
    dp = [[0] * N for _ in range(K + 1)]
    dp[0][0] = 1
    for day in range(K):
        all = sum(dp[day]) % MOD
        for next in range(N):
            sub = 0
            for now in G[next]:
                sub += dp[day][now]
                sub %= MOD
            dp[day + 1][next] = (all - sub - dp[day][next]) % MOD
    print(dp[-1][0])



    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    U = [int()] * (M)  # type: "List[int]"
    V = [int()] * (M)  # type: "List[int]"
    for i in range(M):
        U[i] = int(next(tokens))
        V[i] = int(next(tokens))
    solve(N, M, K, U, V)

if __name__ == '__main__':
    main()
