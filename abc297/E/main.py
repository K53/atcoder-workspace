#!/usr/bin/env python3
import sys
import heapq

def solve(N: int, K: int, A: "List[int]"):
    S = set(A)
    sa = set(A)
    q = [aa for aa in sa]
    heapq.heapify(q)
    for i in range(K + 1):
        m = heapq.heappop(q)
        if i == K - 1:
            print(m)
            return
        for aa in sa:
            if m + aa not in S:
                heapq.heappush(q, m + aa)
                S.add(m + aa)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, K, A)

if __name__ == '__main__':
    main()
