#!/usr/bin/env python3
import sys


def solve(N: int, M: int, S: "List[str]"):
    same = []
    for i in range(N):
        same.append([0] * i)
    for i in range(2 ** M):
        anses = [0] * N
        for n in range(N):
            cnt = 0
            for m in range(M):
                if (i >> m) == int(S[n][m]):
                    cnt += 1
            anses[n] = cnt
            for nn in range(n):
                if cnt != 0 and anses[nn] == cnt:
                    if nn < n:
                        nn, n = n, nn
                    same[nn][n] = 1
        print(anses)
    print(same)
        
            
                    


    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    S = [next(tokens) for _ in range(N)]  # type: "List[str]"
    solve(N, M, S)

if __name__ == '__main__':
    main()
