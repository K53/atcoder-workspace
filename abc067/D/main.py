#!/usr/bin/env python3
import sys


def solve(N: int, a: "List[int]", b: "List[int]"):
    G = [[] for _ in range(N)]
    for i in range(N - 1):
        G[a[i] - 1].append(b[i] - 1)
        G[b[i] - 1].append(a[i] - 1)

    from collections import deque
    def bfs(G: "List[to]", start_node: int) -> list:
        INF = 10 ** 16
        q = deque()
        dist = [INF] * len(G)
        q.append(start_node)
        dist[start_node] = 0
        while q:
            now = q.popleft()
            for next in G[now]:
                if dist[next] != INF:
                    continue
                q.append(next)
                dist[next] = dist[now] + 1
        return dist
    
    d = bfs(G, 0) # saki
    e = bfs(G, N - 1)
    s, t = 0, 0
    for i in range(N):
        if d[i] <= e[i]:
            s += 1
        else:
            t += 1
    if s > t:
        print("Fennec")
    else:
        print("Snuke")        
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    a = [int()] * (N - 1)  # type: "List[int]"
    b = [int()] * (N - 1)  # type: "List[int]"
    for i in range(N - 1):
        a[i] = int(next(tokens))
        b[i] = int(next(tokens))
    solve(N, a, b)

if __name__ == '__main__':
    main()
