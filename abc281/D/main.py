#!/usr/bin/env python3
import sys


def solve(N: int, K: int, D: int, a: "List[int]"):
    dp = [[[-1 for _ in range(K + 1)] for _ in range(D)] for _ in range(N + 1)]
    dp[0][0][0] = 0
    for i in range(N):
        for num in range(D):
            for kk in range(K + 1):
                if dp[i][num][kk] == -1:
                    continue
                # とる
                if kk + 1 <= K:
                    next_sum = dp[i][num][kk] + a[i]
                    dp[i + 1][next_sum % D][kk + 1] = max(dp[i + 1][next_sum % D][kk + 1], next_sum)
                # とらない
                next_sum = dp[i][num][kk] 
                dp[i + 1][next_sum % D][kk] = max(dp[i + 1][next_sum % D][kk], next_sum)
    # for i in range(N + 1):
    #     for num in range(D):
    #         print(dp[i][num])
    #     print()
    print(dp[-1][0][K])
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    D = int(next(tokens))  # type: int
    a = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, K, D, a)

if __name__ == '__main__':
    main()
