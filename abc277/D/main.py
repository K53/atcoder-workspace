#!/usr/bin/env python3
import sys
import collections

def solve(N: int, M: int, A: "List[int]"):
    # N = 4
    # M = 11
    # A = [1,2,3,10]
    if N == 1:
        print(0)
        return
    total = sum(A)
    d = collections.defaultdict(int)
    for aa in A:
        d[aa] += aa
    # print(d)
    kinds = sorted(set(A))
    countNow = False
    tot = 0
    can = []
    isZ = False
    for i in range(len(kinds) - 1):
        if not countNow:
            if (kinds[i + 1] - kinds[i]) == 1:
                tot += d[kinds[i]]
                countNow = True
                if i == 0:
                    isZ = True
        else:
            if (kinds[i + 1] - kinds[i]) != 1:
                tot += d[kinds[i]]
                countNow = False
                can.append(tot)
                tot = 0
    if countNow:
        if isZ:
            tot += can[0]
        tot += d[kinds[i + 1]]
        countNow = False
        can.append(tot)
        tot = 0
    print(can)
    print(total - max(can))

    # K = kinds * 2
    # can = []
    # tmp = []
    # countNow = False
    # # print(K)
    # for i in range(len(K) - 1):
    #     if not countNow:
    #         # start count
    #         if (K[i + 1] - K[i]) % M == 1:
    #             tmp.append(i)
    #             countNow = True
    #     else:
    #         if (K[i + 1] - K[i]) % M != 1:
    #             tmp.append(i)
    #             can.append((tmp[1] - tmp[0] + 1, tmp))
    #             tmp = []
    #             countNow = False
    #     # print(i, can)
    # if countNow:
    #     tmp.append(i + 1)
    #     can.append((tmp[1] - tmp[0] + 1, tmp))
    # # print(can)

    # ans = total - max(A)
    # for l, p in can:
    #     if p[0] >= len(kinds):
    #         continue
    #     s, e = K[p[0]], K[p[1]]
    #     if s < e:
    #         # print(s,e)
    #         rmtot = 0
    #         for num in range(s, e + 1):
    #             rmtot += d[num]
    #         ans = min(ans, total - rmtot)
    #     else:
    #         tot = 0
    #         for num in range(e + 1, s):
    #             # print(num)
    #             tot += d[num]
    #         ans = min(ans, tot)
    # print(ans)



    # # if s < e:
    # #     ans = 0
    # #     for i, tot in d.items():
    # #         if s <= i <= e:
    # #             # print(i, tot)
    # #             ans += tot
    # #     print(total - ans)
    # # else:
    # #     ans = 0
    # #     for i, tot in d.items():
    # #         if i <= e or s <= i:
    # #             ans += tot
    # #     print(total - ans)



        
    



        

        
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, M, A)

if __name__ == '__main__':
    main()
