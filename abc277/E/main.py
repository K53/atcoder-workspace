#!/usr/bin/env python3
import sys

import heapq
INF = 10 ** 16
# グラフ + 座標圧縮 の問題の場合、開始点と終了点を圧縮後の座標の集合に加え忘れないこと。
class Dijkstra():
    def __init__(self, N: int) -> None:
        self.N = N 
        self.G = [[] for _ in range(N)]
        return
    
    # 辺の追加
    def addEdge(self, fromNode: int, toNode: int, cost: int):
        self.G[fromNode].append((cost, toNode))
        # print("Really directed Graph?")
        return
    
    def build(self, startNode: int):
        hq = []
        heapq.heapify(hq)
        # Set start info
        dist = [INF] * self.N
        # prev = [-1] * self.N # 経路復元する場合は移動時に直前の頂点や辺を記録して遷移していく。
        heapq.heappush(hq, (0, startNode))
        dist[startNode] = 0
        # dijkstra
        while hq:
            min_cost, now = heapq.heappop(hq)
            if min_cost > dist[now]:
                continue
            for cost, next in self.G[now]:
                if dist[next] > dist[now] + cost:
                    dist[next] = dist[now] + cost
                    # prev[next] = now # 頂点nextに至る直前の頂点を更新。
                    heapq.heappush(hq, (dist[next], next))
        return dist


def solve(N: int, M: int, K: int, u: "List[int]", v: "List[int]", a: "List[int]", s: "List[int]"):
    dk = Dijkstra(N * 2 + 1)
    for uu, vv, aa in zip(u, v, a):
        if aa:
            dk.addEdge(uu, vv, 1)
            dk.addEdge(vv, uu, 1)
        else:
            dk.addEdge(uu + N, vv + N, 1)
            dk.addEdge(vv + N, uu + N, 1)
    for ss in s:
          dk.addEdge(ss, ss + N, 0)
          dk.addEdge(ss + N, ss, 0)
    d = dk.build(startNode=1)
    ans = min(d[N], d[N * 2])
    print(ans if ans != INF else -1)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    u = [int()] * (M)  # type: "List[int]"
    v = [int()] * (M)  # type: "List[int]"
    a = [int()] * (M)  # type: "List[int]"
    for i in range(M):
        u[i] = int(next(tokens))
        v[i] = int(next(tokens))
        a[i] = int(next(tokens))
    s = [int(next(tokens)) for _ in range(K)]  # type: "List[int]"
    solve(N, M, K, u, v, a, s)

if __name__ == '__main__':
    main()
