#!/usr/bin/env python3
import sys
sys.setrecursionlimit(10 ** 9)

MOD = 1000000007  # type: int

aa = []
def solve(N: int, x: "List[int]", y: "List[int]"):
    G = [[] for _ in range(N)]
    for i in range(N - 1):
        G[x[i] - 1].append(y[i] - 1)
        G[y[i] - 1].append(x[i] - 1)
    # dp[i][color] = 島iのcolorの時の場合の和 (白|黒)
    dp = [[1, 1] for _ in range(N)]

    def dfs(pre: int, now: int):
        # print(pre, now)
        # --- 子ノードを探索 -----------------------
        for next in G[now]:
            if next == pre:
                continue
            dfs(now, next)
        print("#", now + 1)
        print(dp[now][0], dp[now][1])
        print(dp[pre][0])
        print(dp[pre][1])
        dp[pre][0] *= dp[now][0] + dp[now][1]
        dp[pre][1] *= dp[now][0]
        aa.append(now + 1)
        print(dp)
        return
    dfs(-1, 0)
    print(dp)
    print((dp[0][0] + dp[0][1]) % MOD)
    print(aa)
    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    x = [int()] * (N - 1)  # type: "List[int]"
    y = [int()] * (N - 1)  # type: "List[int]"
    for i in range(N - 1):
        x[i] = int(next(tokens))
        y[i] = int(next(tokens))
    solve(N, x, y)

if __name__ == '__main__':
    main()
