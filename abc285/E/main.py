#!/usr/bin/env python3
import sys
import bisect
INF = 10 ** 12


def mysum(l: list):
    res = 0
    for ll in l:
        if ll != INF:
            res += ll
    return res

def solve(N: int, A: "List[int]"):
    # A = [10] + [1] * 4999
    # N = len(A)
    if N % 2 == 0:
        l = [INF] + A[:(N // 2)] + A[:(N // 2 - 1)][::-1]
    else:
        l = [INF] + A[:(N // 2)] + A[:(N // 2)][::-1]
    # print(l)
    # print(mysum(l))
    ans = mysum(l)
    rests = [0, N]

    for i in range(N):
        # target = min(l)
        # idx = l.index(target)
        # print(idx)
        cursums = [0] * N
        dd = {}
        for idx in range(N):
            if idx in rests:
                continue
            linf = bisect.bisect_left(rests, idx) - 1
            rinf = bisect.bisect_left(rests, idx)
            # print(linf,rinf)
            lchange = (idx - 1 - rests[linf]) // 2
            rchange = (rests[rinf] - (idx + 1)) // 2
            # print(lchange, rchange)
            tmpl = l[:(idx - lchange)] + A[:lchange][::-1] + [INF] + A[:rchange] + l[(idx + rchange + 1):]
            # print(l)
            # print(mysum(l))
            cursum = mysum(tmpl)
            if cursum >= ans:
                cursums[idx] = cursum
                dd[cursum] = (tmpl, idx)
        m = max(cursums)
        if m == 0:
            break
        l = dd[m][0]
        ans = m
        rests = rests[:rinf] + [dd[m][1]] + rests[rinf:]
    print(ans)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, A)

if __name__ == '__main__':
    main()
