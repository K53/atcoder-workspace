#!/usr/bin/env python3
import sys


def solve(N: int, K: int, A: "List[int]"):
    if K % 2 == 0:
        ans = 0
        for i in range(K // 2):
            ans += A[i + 1] - A[i]
    else: 
        ans = 10 ** 10
        for skip in range(K):
            tmp = 0
            cur = 0
            for _ in range(K // 2):
                if skip == cur:
                    cur += 1
                num1 = A[cur]
                cur += 1
                if skip == cur:
                    cur += 1
                num2 = A[cur]
                cur += 1
                tmp += num2 - num1
            ans = min(ans, tmp)

    print(ans)
    return


# Generated by 2.13.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(K)]  # type: "List[int]"
    solve(N, K, A)

if __name__ == '__main__':
    main()
