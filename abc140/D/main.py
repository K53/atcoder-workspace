#!/usr/bin/env python3
import sys
from itertools import groupby

def runLengthEncode(S: str) -> "List[List[str, int]]":
    grouped = groupby(S)
    res = []
    for k, v in grouped:
        res.append([k, int(len(list(v)))])
    return res


def solve(N: int, K: int, S: str):
    l = runLengthEncode(S)
    kk = min(K, len(l) // 2)
    for i in range(kk):
        if i * 2 + 2 == len(l):
            l[i * 2 + 1][1] += l[i * 2][1]
            l[i * 2][1] = 0
        else:
            l[i * 2 + 2][1] += l[i * 2][1] + l[i * 2 + 1][1]
            l[i * 2][1] = 0
            l[i * 2 + 1][1] = 0
    ans = 0
    for i in l:
        if i[1] != 0:
            ans += i[1] - 1
    print(ans)
    return

# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    S = next(tokens)  # type: str
    solve(N, K, S)

if __name__ == '__main__':
    main()
