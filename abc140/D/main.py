#!/usr/bin/env python3
import sys
from itertools import groupby
from collections import deque
def runLengthEncode(S: str) -> "List[tuple(str, int)]":
    grouped = groupby(S)
    res = []
    for k, v in grouped:
        res.append((k, int(len(list(v)))))
    return res


def solve(N: int, K: int, S: str):
    l = runLengthEncode(S)
    l = deque(l)
    for _ in range(K):
        if len(l) == 1:
            print(l[0][1] - 1)
            return
        if len(l) == 2:
            a1 = l.popleft()
            a2 = l.popleft()
            print(a1[1] + a2[1] - 1)
            return
        a1 = l.popleft()
        a2 = l.popleft()
        a3 = l.popleft()
        l.appendleft((a1[0], a1[1] + a2[1] + a3[1]))
    ans = 0
    for aa in l:
        ans += aa[1] - 1
    print(ans)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    S = next(tokens)  # type: str
    solve(N, K, S)

if __name__ == '__main__':
    main()
