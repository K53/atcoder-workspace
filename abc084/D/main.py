#!/usr/bin/env python3
import sys


def solve(Q: int, l: "List[int]", r: "List[int]"):
    from itertools import accumulate
    def getPrimeLists(limit: int):
        primes = [] # 素数リスト
        isPrime = [True] * (limit + 1) # 素数かどうかのフラグ
        isPrime[0] = False
        isPrime[1] = False
        
        for p in range(limit + 1):  # p : 判定対象の数
            if not isPrime[p]:
                continue
            primes.append(p)
            # pが素数のためそれ以降に出現するpの倍数を除外する。
            # なお、ループはp始まりでも良いが、p * _ のかける側はすでに同じ処理で弾かれているはずのため無駄。
            for i in range(p * p, limit + 1, p):
                isPrime[i] = False
        return isPrime
    P = getPrimeLists(10 ** 5 + 1)
    # print(P[:10])
    isLike2017 = []
    for i in range(10 ** 5 + 1):
        if i % 2 == 0:
            isLike2017.append(0)
        else: 
            isLike2017.append(1 if P[i] & P[(i + 1) // 2] else 0)
    acc = list(accumulate(isLike2017))
    # print(isLike2017[:20])
    # print(acc[:20])
    for ll, rr in zip(l, r):
        print(acc[rr] - acc[ll - 1])
    return


# Generated by 2.6.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    Q = int(next(tokens))  # type: int
    l = [int()] * (Q)  # type: "List[int]"
    r = [int()] * (Q)  # type: "List[int]"
    for i in range(Q):
        l[i] = int(next(tokens))
        r[i] = int(next(tokens))
    solve(Q, l, r)

if __name__ == '__main__':
    main()
