#!/usr/bin/env python3
from collections import deque
import sys
from itertools import groupby
def runLengthEncode(S: str) -> "List[tuple(str, int)]":
    grouped = groupby(S)
    res = []
    for k, v in grouped:
        res.append([k, int(len(list(v)))])
    return res

def solve(N: int, X: int, S: str):
    q = deque()
    for ss in S:
        if ss == "U":
            if len(q) != 0 and q[-1] != "U":
                q.pop()
            else:
                q.append("U")
        else:
            q.append(ss)
    # print(q)
    l = list(q)
    print(l)
    for ss in q:
        # print(ss)
        if ss == "U":
            X //= 2
            continue
        if ss == "R":
            X *= 2
            X += 1
            continue
        if ss == "L":
            X *= 2
            continue
    print(X)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    X = int(next(tokens))  # type: int
    S = next(tokens)  # type: str
    solve(N, X, S)

if __name__ == '__main__':
    main()
