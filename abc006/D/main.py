#!/usr/bin/env python3
import sys
import bisect
INF = 10 ** 16

# https://tjkendev.github.io/procon-library/python/dp/lis.html
def solve(N: int, c: "List[int]"):
    dp = [INF] * (N + 1)
    # dp[i] := 長さiとなる最長部分増加列(LIS)の中で列の最後の要素の最小値
    dp[0] = -1
    for cc in c:
        idx = bisect.bisect_right(dp, cc - 1) # dp[idx]までは再利用し、末尾をccに書き換える。
        dp[idx] = min(dp[idx], cc)

    print(N - max(i for i in range(N + 1) if dp[i] != INF))
    return


# Generated by 2.6.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    c = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, c)

if __name__ == '__main__':
    main()
