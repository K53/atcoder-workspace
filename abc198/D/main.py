#!/usr/bin/env python3
import sys
import itertools

def solve(S: "List[str]"):
    nums = [i for i in range(10)]
    kinds = set()
    for ss in S:
        for sss in ss:
            kinds.add(sss)
    if len(kinds) > 10:
        print("UNSOLVABLE")
        return
    
    l = list(kinds)
    dic = dict()
    for i in range(len(l)):
        dic[l[i]] = i
    for k in itertools.permutations(nums, len(kinds)):
        n1 = 0
        n2 = 0
        n3 = 0
        decim = 1
        for i in S[0][::-1]:
            n1 += int(k[dic[i]]) * decim
            decim *= 10
        if len(S[0]) != len(str(n1)) or n1 == 0:
            continue
        decim = 1
        for i in S[1][::-1]:
            n2 += int(k[dic[i]]) * decim
            decim *= 10
        decim = 1
        if len(S[1]) != len(str(n2)) or n2 == 0:
            continue
        for i in S[2][::-1]:
            n3 += int(k[dic[i]]) * decim
            decim *= 10
        if len(S[2]) != len(str(n3)) or n3 == 0:
            continue
        if n1 + n2 == n3:
            print(n1)
            print(n2)
            print(n3)
            return

    print("UNSOLVABLE")
    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    S = [next(tokens) for _ in range(3)]  # type: "List[str]"
    solve(S)

if __name__ == '__main__':
    main()
