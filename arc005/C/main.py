#!/usr/bin/env python3

YES = "YES"  # type: str
NO = "NO"  # type: str


# Generated by 2.6.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    H, W = map(int, input().split())
    G = []
    sy, sx = 0, 0
    gy, gx = 0, 0
    for _ in range(H):
        G.append(input())
    for i in range(H):
        for j in range(W):
            if G[i][j] == "s":
                sy, sx = i, j
            if G[i][j] == "g":
                gy, gx = i, j
    from collections import deque
    INF = 10 ** 9       # *2
    def dijkstra(G: "List[str]", H: int, W: int, startY: int, startX: int) -> list:
        q = deque()
        # Set start info
        dist = [[INF] * W for _ in range(H)]
        q.append((0, startY, startX))
        dist[startY][startX] = 0            # *1
        # dijkstra
        while len(q) != 0:
            min_cost, nowY, nowX = q.popleft()
            if min_cost > dist[nowY][nowX]:
                continue
            for dy, dx in [(1, 0), (-1, 0), (0, 1), (0, -1)]:
                nextY = nowY + dy
                nextX = nowX + dx
                if nextY < 0 or nextX < 0 or nextY >= H or nextX >= W:
                    continue
                cost = 1 if G[nextY][nextX] == "#" else 0
                if dist[nextY][nextX] > dist[nowY][nowX] + cost:
                    dist[nextY][nextX] = dist[nowY][nowX] + cost
                    if cost == 1:
                        q.append((dist[nextY][nextX], nextY, nextX))
                    else:
                        q.appendleft((dist[nextY][nextX], nextY, nextX))
        return dist
    d = dijkstra(G, H, W, sy, sx)
    # for i in range(H):
    #     print(d[i])
    print(YES if d[gy][gx] <= 2 else NO)

if __name__ == '__main__':
    main()
