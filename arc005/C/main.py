#!/usr/bin/env python3
from collections import deque

YES = "YES"  # type: str
NO = "NO"  # type: str

# Generated by 2.6.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    H, W = map(int, input().split())
    G = []
    sy, sx = 0, 0
    gy, gx = 0, 0
    for _ in range(H):
        G.append(input())
    for i in range(H):
        for j in range(W):
            if G[i][j] == "s":
                sy, sx = i, j
            if G[i][j] == "g":
                gy, gx = i, j
    
    def bfs(G, H, W, startY, startX) -> list:
        INF = 10 ** 16
        q = deque()
        dist = [[INF] * W for _ in range(H)]
        q.append((startY, startX))
        dist[startY][startX] = 0
        while q:
            nowy, nowx = q.popleft()
            for dx, dy in [(0, 1), (1, 0), (-1, 0), (0, -1)]:
                nexty = nowy + dy
                nextx = nowx + dx
                if nexty < 0 or nextx < 0 or nexty >= H or nextx >= W or dist[nexty][nextx] != INF:
                    continue
                if G[nexty][nextx] == "#":
                    q.append((nexty, nextx))
                    dist[nexty][nextx] = dist[nowy][nowx] + 1
                else:
                    q.appendleft((nexty, nextx))
                    dist[nexty][nextx] = dist[nowy][nowx]
        return dist
    
    d = bfs(G, H, W, sy, sx)
    # for i in range(H):
    #     print(d[i])
    print(YES if d[gy][gx] <= 2 else NO)
    return
    
if __name__ == '__main__':
    main()
