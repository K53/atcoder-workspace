#!/usr/bin/env python3
import sys
from collections import deque
INF = 10 ** 16
def bfs(G: "List[to]", start_node: int) -> list:
    q = deque()
    dist = [[INF] * 3 for _ in range(len(G))]
    q.append((start_node, 0))
    dist[start_node][0] = 0
    while q:
        now, step = q.popleft()
        next_step = (step + 1) % 3
        for next in G[now]:
            if dist[next][next_step] != INF:
                continue
            q.append((next, next_step))
            dist[next][next_step] = dist[now][step] + 1
    return dist

def solve(N: int, M: int, u: "List[int]", v: "List[int]", S: int, T: int):
    G = [[] for _ in range(N)]
    for i in range(M):
        G[u[i] - 1].append(v[i] - 1)
    d = bfs(G, S - 1)
    ans = d[T - 1][0]
    print(-1 if ans == INF else ans // 3)
    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    u = [int()] * (M)  # type: "List[int]"
    v = [int()] * (M)  # type: "List[int]"
    for i in range(M):
        u[i] = int(next(tokens))
        v[i] = int(next(tokens))
    S = int(next(tokens))  # type: int
    T = int(next(tokens))  # type: int
    solve(N, M, u, v, S, T)

if __name__ == '__main__':
    main()
