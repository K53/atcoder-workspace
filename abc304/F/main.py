#!/usr/bin/env python3
import sys

MOD = 998244353  # type: int

def getDivisors(n: int):
    lowerDivisors, upperDivisors = [], []
    i = 1
    while i * i <= n: # sqrt(N)まで試し割りする。
        if n % i == 0:
            lowerDivisors.append(i)
            if i != n // i:
                upperDivisors.append(n//i)
        i += 1
    return lowerDivisors + upperDivisors[::-1]

# usage
def solve(N: int, S: str):
    ds = getDivisors(N)[:-1]
    # print(ds)
    d = {}
    for dds in ds:
        a = set()
        for i in range(N):
            ss = S[i]
            if ss == ".":
                a.add(i % dds)
        d[dds] = a
    print(d)
    ans = 0
    for idx, kv in enumerate(d.items()):
        k, v = kv
        ans += pow(2, k - len(v), MOD)
    print(ans)

    for k, v in d.items():
        for target in getDivisors(k)[:-1]:
            print(k, target)
            l = set()
            for num in v:
                l.add(num % target)
            print(l, d[target])
            if l == d[target]:
                if target - len(l) != :
                    print(target - len(l), pow(2, target - len(l)), "#")
                    ans -= pow(2, target - len(l))
    print(ans)
    return


        # for i in ds[(idx + 1):]:
        #     vv = d[i]
        #     l = set()
        #     for num in vv:
        #         l.add(num % k)
        #     if l == v:
        #         ans -= 1
            
    
    print(ans)
    print(ans % MOD)

                


    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    S = next(tokens)  # type: str
    solve(N, S)

if __name__ == '__main__':
    main()
