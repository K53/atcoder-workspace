#!/usr/bin/env python3
import sys


YES = "Yes"  # type: str
NO = "No"  # type: str


def solve(N: int, D: int, X: "List[int]", Y: "List[int]"):
    dd = D ** 2
    from collections import deque
    def bfs(G: "List[to]", start_node: int) -> list:
        INF = 10 ** 16
        q = deque()
        dist = [INF] * len(G)
        q.append(start_node)
        dist[start_node] = 1
        while q:
            now = q.popleft()
            for next in G[now]:
                if dist[next] != INF:
                    continue
                q.append(next)
                dist[next] = dist[now]
        return dist
    
    G = [[] for _ in range(N)]
    for ss in range(N):
        for tt in range(ss + 1, N):
            l = (X[ss] - X[tt]) ** 2 + (Y[ss] - Y[tt]) ** 2
            if l <= dd:
                G[ss].append(tt)
                G[tt].append(ss)
    # print(G)
    d = bfs(G, 0)
    for i in d:
        if i == 1:
            print(YES)
        else:
            print(NO)


    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    D = int(next(tokens))  # type: int
    X = [int()] * (N)  # type: "List[int]"
    Y = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        X[i] = int(next(tokens))
        Y[i] = int(next(tokens))
    solve(N, D, X, Y)

if __name__ == '__main__':
    main()
