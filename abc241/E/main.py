#!/usr/bin/env python3
import sys

MOD = 5  # type: int


def solve(N: int, K: int, A: "List[int]"):
    find = set([0])
    history = [0]
    up = [0]
    now = 0
    for i in range(K):
        p, q = divmod(now + A[now], N)
        now = q
        if not now in find:
            up.append(p)
            history.append(now)
            find.add(now)
        else:
            first = sum(up)
            # print("f",first)
            # up.append(p)
            # history.append(now)
            start = history.index(now)
            # print(start)
            up[start] = p
            rest = K - (i + 1)
            # print("rest", rest)
            cycle = len(history) - start
            # print(cycle)
            pp, qq = divmod(rest, cycle)
            # first = sum(up)
            # print(first)
            sumcycle = sum(up[start:]) * pp
            # print("sumcs", sumcycle)
            sumrest = sum(up[start:(start + qq + 1)])
            # print(sumrest)
            # print(start + qq)
            print((first + sumcycle + sumrest) * N + history[start + qq])
            # print("--")
            # print(history)
            # print(up)
            return
    # no cycle
    print(now + sum(up) * N)
    # print(history)
    # print(up)
    # print(now)
    





    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, K, A)

if __name__ == '__main__':
    main()
