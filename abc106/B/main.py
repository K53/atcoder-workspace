#!/usr/bin/env python3
import sys


def solve(N: int):
    class Eratosthenes():
        """ 素数列挙
        計算量 : O(NloglogN)
        """
        def __init__(self, N: int) -> None:
            self.isPrime = [True] * (N + 1) # 数iが素数かどうかのフラグ
            self.isPrime[0] = False
            self.isPrime[1] = False
            self.minfactor = [0] * (N + 1) # 数iの最小の素因数
            self.minfactor[1] = 1
            self.primes = []    # 数Nまでの素数のリスト
            for p in range(2, N + 1):  # p : 判定対象の数
                if not self.isPrime[p]:
                    continue
                self.minfactor[p] = p
                self.primes.append(p)
                # pが素数のためそれ以降に出現するpの倍数を除外する。
                # なお、ループはp始まりでも良いが、p * _ のかける側はすでに同じ処理で弾かれているはずのため無駄。
                for i in range(p * p, N + 1, p):
                    if self.minfactor[i] == 0:
                        self.minfactor[i] = p
                    self.isPrime[i] = False
            return
        def factorize(self, n: int) -> list:
            res = [] # (p, exp)
            while n > 1:
                p = self.minfactor[n]
                exp = 0
                while self.minfactor[n] == p:
                    n //= p
                    exp += 1
                res.append((p, exp))
            return res
        def getDivisors(self, n: int) -> list:
            res = [1]
            for p in self.factorize(n):
                for i in range(len(res)):
                    v = 1
                    for _ in range(p[1]):
                        v *= p[0]
                        res.append(res[i] * v)
            return res
    ans = 0
    e = Eratosthenes(N)
    for i in range(1, N + 1, 2):
        if len(e.getDivisors(i)) == 8:
            ans += 1
    print(ans)
    return


# Generated by 2.6.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    solve(N)

if __name__ == '__main__':
    main()
