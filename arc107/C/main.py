#!/usr/bin/env python3
import sys

MOD = 998244353  # type: int


def solve(N: int, K: int, a: "List[List[int]]"):
    from collections import defaultdict
    class UnionFind():
        def __init__(self, n):
            self.n = n
            self.parents = [-1] * n

        def find(self, x):
            if self.parents[x] < 0:
                return x
            else:
                self.parents[x] = self.find(self.parents[x])
                return self.parents[x]

        def union(self, x, y):
            x = self.find(x)
            y = self.find(y)

            if x == y:
                return

            if self.parents[x] > self.parents[y]:
                x, y = y, x

            self.parents[x] += self.parents[y]
            self.parents[y] = x

        def size(self, x):
            return -self.parents[self.find(x)]

        def same(self, x, y):
            return self.find(x) == self.find(y)

        def members(self, x):
            root = self.find(x)
            return [i for i in range(self.n) if self.find(i) == root]

        def roots(self):
            return [i for i, x in enumerate(self.parents) if x < 0]

        def group_count(self):
            return len(self.roots())

        def all_group_members(self):
            group_members = defaultdict(list)
            for member in range(self.n):
                group_members[self.find(member)].append(member)
            return group_members

        def __str__(self):
            return '\n'.join(f'{r}: {m}' for r, m in self.all_group_members().items())
    
    def convert(x, y):
        return x + y * N

    uf = UnionFind(N * N)

    for y in range(N):
        for x1 in range(N):
            for x2 in range(x1, N):
                if a[y][x1] + a[y][x2] <= K:
                    uf.union(convert(x1, y), convert(x2, y))
    for x in range(N):
        for y1 in range(N):
            for y2 in range(y1, N):
                if a[y1][x] + a[y2][x] <= K:
                    uf.union(convert(x, y1), convert(x, y2))
    
    print(uf.all_group_members())



    return


# Generated by 2.6.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    a = [[int(next(tokens)) for _ in range(N)] for _ in range(N)]  # type: "List[List[int]]"
    solve(N, K, a)

if __name__ == '__main__':
    main()
