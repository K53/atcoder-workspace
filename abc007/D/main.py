#!/usr/bin/env python3
import sys


def solve(A: int, B: int):
    def d(S: str):
        N = len(S)
        dp = [[[0] * 2 for _ in range(2)] for _ in range(N + 1)]
        dp[0][0][0] = 1
        for i in range(1, N + 1):
            for smaller in range(2):
                for j in range(2):
                    maxNum = int(S[i - 1]) if smaller == 0 else 9
                    for num in range(maxNum + 1):
                        dp[i][smaller or num < int(S[i - 1])][j or num == 4 or num == 9] += dp[i - 1][smaller][j]
        return dp[-1][0][1] + dp[-1][1][1]

        # for dig in range(1, len(S) + 1):
        #     targetDigNum = int(S[dig - 1])
        #     for smaller in range(2):
        #         for fourOrNine in range(2):
        #             ceil = 9 if smaller else targetDigNum
        #             for num in range(ceil + 1):
        #                 next_smaller = 0
        #                 next_fourOrNine = 0
        #                 # 現状上限でない or 次の数字が上限じゃない なら次の桁も当然上限ではない。
        #                 if smaller == 1 or num < targetDigNum:
        #                     next_smaller = 1
        #                 if fourOrNine == 1 or num == 4 or num == 9:
        #                     next_fourOrNine = 1
        #                 dp[dig][next_smaller][next_fourOrNine] += dp[dig - 1][smaller][fourOrNine]
        # return dp[-1][0][1] + dp[-1][1][1]
    print(d(str(B)) - d(str(A - 1)))

    return


# Generated by 2.6.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    A = int(next(tokens))  # type: int
    B = int(next(tokens))  # type: int
    solve(A, B)

if __name__ == '__main__':
    main()
