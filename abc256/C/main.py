#!/usr/bin/env python3
import sys


def solve(h: "List[int]", w: "List[int]"):
    # a1 a2 a3 -h1
    # b1 b2 b3 -h2
    # c1 c2 c3 -h3
    ans = 0
    for a1 in range(1, 30):
        for a2 in range(1, 30):
            for b1 in range(1, 30):
                for b2 in range(1, 30):
                    a3 = h[0] - a1 - a2
                    b3 = h[1] - b1 - b2
                    c1 = w[0] - a1 - b1
                    c2 = w[1] - a2 - b2
                    c3w = w[2] - a3 - b3
                    c3h = h[2] - c1 - c2

                    if a3 <= 0 or b3 <= 0 or c1 <= 0 or c2 <= 0 or c3w != c3h or c3w <= 0:
                        continue
                    else:
                        ans += 1
    print(ans)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    h = [int(next(tokens)) for _ in range(3)]  # type: "List[int]"
    w = [int(next(tokens)) for _ in range(3)]  # type: "List[int]"
    solve(h, w)

if __name__ == '__main__':
    main()
