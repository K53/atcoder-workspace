#!/usr/bin/env python3
import sys


def solve(H: int, W: int, N: int):
    grid = [["."] * W for _ in range(H)]
    y, x = 0, 0
    dir = 0
    D = {
        0: {
            "cw": {
                "d": (0, 1),
                "next": 1,
            },
            "ccw": {
                "d": (0, -1),
                "next": 3,
            }
        },
        1: {
            "cw": {
                "d": (1, 0),
                "next": 2,
            },
            "ccw": {
                "d": (-1, 0),
                "next": 0,
            }
        },
        2: {"ccw": {
                "d": (0, 1),
                "next": 1,
            },
            "cw": {
                "d": (0, -1),
                "next": 3,
            },
        },
        3: {
            "ccw": {
                "d": (1, 0),
                "next": 2,
            },
            "cw": {
                "d": (-1, 0),
                "next": 0,
            }
        }
    }

    for i in range(N):
        if grid[y][x] == ".":
            grid[y][x] = "#"
            dy, dx = D[dir]["cw"]["d"]
            y += dy
            y %= H
            x += dx
            x %= W
            dir = D[dir]["cw"]["next"]
        else:
            grid[y][x] = "."
            dy, dx = D[dir]["ccw"]["d"]
            y += dy
            y %= H
            x += dx
            x %= W
            dir = D[dir]["ccw"]["next"]
    for hh in range(H):
        print(*grid[hh], sep="")

    return


# Generated by 2.13.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    H = int(next(tokens))  # type: int
    W = int(next(tokens))  # type: int
    N = int(next(tokens))  # type: int
    solve(H, W, N)

if __name__ == '__main__':
    main()
