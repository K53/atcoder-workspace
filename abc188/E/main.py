#!/usr/bin/env python3


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    N, M = map(int, input().split())
    A = list(map(int, input().split()))
    edges = [[] for _ in range(N)]
    for _ in range(M):
        f, t = map(lambda x: int(x) - 1, input().split())
        edges[f].append(t)
    
    order = []
    for i, aa in enumerate(A):
        order.append((aa, i))
    order.sort()

    INF = 10 ** 16
    profit = [-INF] * N
    from collections import deque
    def bfs(edges: "List[to]", start_node: int) -> list:
        q = deque()
        q.append(start_node)
        profit[start_node] = -INF + 1
        while q:
            now = q.popleft()
            for next in edges[now]:
                if profit[next] != -INF:
                    continue
                q.append(next)
                profit[next] = A[next] - A[s]
        profit[s] = -INF
        return
    for _, s in order:
        if profit[s] != -INF:
            continue
        bfs(edges, s)
    print(max(profit))

if __name__ == '__main__':
    main()
