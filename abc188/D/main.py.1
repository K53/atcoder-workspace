#!/usr/bin/env python3
import sys
from itertools import accumulate

def solve(N: int, C: int, a: "List[int]", b: "List[int]", c: "List[int]"):
    end = []
    for bb in b:
        end.append(bb + 1)
    compressed = {}
    compressed_to_row = []
    for index, val in enumerate(sorted(list(set(a + end)))):
        compressed[val] = index
        compressed_to_row.append(val)
    # print(compressed)
    l = [0] * len(compressed_to_row)
    for aa, ee, cc in zip(a, end, c):
        l[compressed[aa]] += cc
        l[compressed[ee]] -= cc
    acc = list(accumulate(l))
    prime = []
    for cc in acc:
        prime.append(min(cc, C))
    # print(prime)
    ans = 0
    for i in range(len(prime) - 1):
        ans += (compressed_to_row[i + 1] - compressed_to_row[i]) * prime[i]
    print(ans)

    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    C = int(next(tokens))  # type: int
    a = [int()] * (N)  # type: "List[int]"
    b = [int()] * (N)  # type: "List[int]"
    c = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        a[i] = int(next(tokens))
        b[i] = int(next(tokens))
        c[i] = int(next(tokens))
    solve(N, C, a, b, c)

if __name__ == '__main__':
    main()
