#!/usr/bin/env python3
import sys
from itertools import accumulate

def solve(N: int, C: int, a: "List[int]", b: "List[int]", c: "List[int]"):
    eb = [bb + 1 for bb in b]
    L = a + eb
    raw_to_compressed = {}
    compressed_to_raw = []
    for index, val in enumerate(sorted(list(set(L)))):
        raw_to_compressed[val] = index
        compressed_to_raw.append(val)

    imos = [0] * len(compressed_to_raw)
    for i in range(N):
        imos[raw_to_compressed[a[i]]] += c[i]
        imos[raw_to_compressed[eb[i]]] -= c[i]
        
    # ビルド
    for i in range(1, len(imos)):
        imos[i] += imos[i - 1]
    
    ans = 0
    # 値の復元
    # いもす配列上でのi番目を圧縮前の値に復元した時の次の要素までの範囲。
    # original       3,     9 
    #       ↓
    # compressed(i)  0,     1
    #                ↓
    #               この0の期間は original[i + 1] - original[i] の期間。
    #               すなわち、compressed_to_raw[i + 1] - compressed_to_raw[i]
    for i in range(len(compressed_to_raw) - 1):
        span = compressed_to_raw[i + 1] - compressed_to_raw[i]
        cost = imos[i]
        if cost > C:
            cost = C

        ans += span * cost
    print(ans)

    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    C = int(next(tokens))  # type: int
    a = [int()] * (N)  # type: "List[int]"
    b = [int()] * (N)  # type: "List[int]"
    c = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        a[i] = int(next(tokens))
        b[i] = int(next(tokens))
        c[i] = int(next(tokens))
    solve(N, C, a, b, c)

if __name__ == '__main__':
    main()
