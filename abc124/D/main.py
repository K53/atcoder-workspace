#!/usr/bin/env python3
import sys


def solve(N: int, K: int, S: str):
    from itertools import groupby
    def runLengthEncode(S: str) -> "List[tuple(str, int)]":
        grouped = groupby(S)
        res = []
        for k, v in grouped:
            res.append((k, int(len(list(v)))))
        return res
    S = runLengthEncode(S)
    N = len(S)
    l = 0 # 含む → 区間短縮時、移動元を引く
    r = 0 # 含まない → 区間拡張時、移動元を足す
    ans = 0
    count = 0
    for _ in range(N):
        while r < N:
            # print("#", l, r, count)
            if S[r][0] == "0":
                if K == 0: 
                    break
                count += S[r][1]
                r += 1
                K -= 1
            else:
                count += S[r][1]
                r += 1
        if l == r: # rが一歩も進まなかったらその要素は無視してlもrも先に進まませる。
            l += 1
            r += 1
            continue
        ans = max(ans, count)
        if S[l][0] == "0":
            count -= S[l][1]
            l += 1
            K += 1
        else:
            count -= S[l][1]
            l += 1
        # print(">", l, r, count)
    ans = max(ans, count) # 一度もlを縮めることがないケースではansに到達しないため最後にansの更新を入れる必要あり。 ansがlに依存する問題では入れること。
    print(ans)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    S = next(tokens)  # type: str
    solve(N, K, S)

if __name__ == '__main__':
    main()
