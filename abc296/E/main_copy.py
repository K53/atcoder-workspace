#!/usr/bin/env python3
import sys
from collections import deque
INF = 10 ** 16

def solve(N: int, A: "List[int]"):
    G = [[] for _ in range(N)]
    for i in range(N):
        G[i].append(A[i] - 1)
    
    dist = [INF] * N
    def bfs(start_node: int) -> list:
        q = deque()
        idx = {
            start_node: 0
        }
        q.append(start_node)
        dist[start_node] = start_node
        chain = [start_node]
        while q:
            now = q.popleft()
            for next in G[now]:
                if dist[next] == start_node:
                    return chain[idx[next]:]
                if dist[next] != INF:
                    continue
                q.append(next)
                dist[next] = dist[now]
                idx[next] = len(chain)
                chain.append(next)
        return []

    ans = 0
    for i in range(N):
        if dist[i] != INF:
            continue
        l = bfs(i)
        ans += len(l)
    print(ans)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, A)

if __name__ == '__main__':
    main()
