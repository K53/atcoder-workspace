#!/usr/bin/env python3
import sys


def solve(N: int, A: "List[int]", B: "List[int]"):
    if N < 2:
        print(B[0] + abs(A[0] - B[0]))
        return
    ans = B[0]
    for i in range(N - 2):
        ans += abs(A[i] - B[i]) + abs(A[i] - B[i + 1])
    case1 = ans + abs(A[-2] - B[-2]) + abs(A[-2] - B[-1]) + abs(A[-1] - B[-1])
    case2 = ans + abs(B[-2] - B[-1]) + abs(B[-1] - A[-1]) + abs(A[-2] - A[-1])
    case3 = ans + abs(B[-2] - B[-1]) + abs(B[-1] - A[-2]) + abs(A[-2] - A[-1])
    print(min([case1, case2, case3]))
    return


# Generated by 2.9.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    B = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, A, B)

if __name__ == '__main__':
    main()
