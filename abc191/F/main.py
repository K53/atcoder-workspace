#!/usr/bin/env python3
import sys

def getDivisors(n: int):
    lowerDivisors, upperDivisors = [], []
    i = 1
    while i * i <= n:
        if n % i == 0:
            lowerDivisors.append(i)
            if i != n // i:
                upperDivisors.append(n//i)
        i += 1
    return lowerDivisors + upperDivisors[::-1]

def solve(N: int, A: "List[int]"):
    from collections import defaultdict
    import math
    # gcd() <= min() が必ず成立し、min()の最小値はAの最小値。
    # = gcdで取りうる値は全て選択可能。 ただし、min(A)以上にはなれないので、min(A)以下に限る。
    #
    # xを最大公約数となる = Aの中でxを約数に持つものを求め、それらのgcdがxになる。 →xは採用。
    d = defaultdict(int)
    for aa in A:
        dividers = getDivisors(aa)
        for i in dividers:
            d[i] = math.gcd(d[i], aa)
    m = min(A)
    ans = 0
    for k, v in d.items():
        if k > m:
            continue
        if k == v:
            ans += 1
    print(ans)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, A)

if __name__ == '__main__':
    main()
