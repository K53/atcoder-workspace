#!/usr/bin/env python3
import sys

MOD = 1000000007  # type: int


def solve(N: int, K: int, A: "List[int]"):
    pos, neg = [], []
    for aa in A:
        if aa > 0:
            pos.append(aa)
        else:
            neg.append(-aa)
    bin = []
    if K % 2 == 0:
        pos.sort(reverse=True)
        neg.sort(reverse=True)
        for i in range(1, len(pos), 2):
            bin.append(pos[i] * pos[i - 1] % MOD)
        for i in range(1, len(neg), 2):
            bin.append(neg[i] * neg[i - 1] % MOD)
        bin.sort(reverse=True)
        ans = 1
        for i in bin[:(K // 2)]:
            ans *= i
            ans %= MOD
        print(ans)
    else:
        if len(pos) == 0:
            neg.sort()
            ans = 1
            for i in neg[:K]:
                ans *= i
                ans %= MOD
            print(-ans % MOD)
        elif K == 1:
            pos.sort(reverse=True)
            print(pos[0] % MOD)
        elif 1:
            pos.sort(reverse=True)
            neg.sort(reverse=True)
            for i in range(1, len(pos), 2):
                bin.append((pos[i] * pos[i - 1] % MOD, i))
            for i in range(1, len(neg), 2):
                bin.append((neg[i] * neg[i - 1] % MOD, 10 ** 16))
            bin.sort(reverse=True)
            ans = 1
            num_pos = 0
            for i, x in bin[:((K - 1) // 2)]:
                ans *= i
                ans %= MOD
                if x == 10 ** 16:
                    continue
                num_pos = max(num_pos, x)
            print(ans * pos[num_pos * 2])



    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, K, A)

if __name__ == '__main__':
    main()
