#!/usr/bin/env python3
import sys
import heapq
from collections import defaultdict
INF = 10 ** 16

def solve(N: int, M: int, A: "List[int]", B: "List[int]", C: "List[int]"):
    edges = [defaultdict(int) for _ in range(N)]
    class Dijkstra():
        def __init__(self, N: int) -> None:
            self.N = N 
            self.G = [[] for _ in range(N)]
            return
        
        # 辺の追加
        def addEdge(self, fromNode: int, toNode: int, cost: int):
            self.G[fromNode].append((cost, toNode))
            return
        
        def build(self, startNode: int):
            hq = []
            heapq.heapify(hq)
            # Set start info
            dist = [INF] * self.N
            prev = [-1] * self.N # 経路復元する場合は移動時に直前の頂点や辺を記録して遷移していく。
            heapq.heappush(hq, (0, startNode))
            dist[startNode] = 0
            # dijkstra
            while hq:
                min_cost, now = heapq.heappop(hq)
                if min_cost > dist[now]:
                    continue
                for cost, next in self.G[now]:
                    if dist[next] > dist[now] + cost:
                        dist[next] = dist[now] + cost
                        prev[next] = edges[now][next] # 頂点nextに至る直前の頂点を更新。
                        heapq.heappush(hq, (dist[next], next))
            return prev
    dk = Dijkstra(N)
    for i in range(M):
        dk.addEdge(A[i] - 1, B[i] - 1, C[i])
        dk.addEdge(B[i] - 1, A[i] - 1, C[i])
        edges[A[i] - 1][B[i] - 1] = i + 1
        edges[B[i] - 1][A[i] - 1] = i + 1
    print(*dk.build(0)[1:])
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    A = [int()] * (M)  # type: "List[int]"
    B = [int()] * (M)  # type: "List[int]"
    C = [int()] * (M)  # type: "List[int]"
    for i in range(M):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
        C[i] = int(next(tokens))
    solve(N, M, A, B, C)

if __name__ == '__main__':
    main()
