#!/usr/bin/env python3
import sys


def solve(N: int, A: "List[str]"):
    G = []
    for aa in A:
        G.append(list(aa))
    newG = []
    for hh in range(N):
        if hh == 0:
            newG.append(A[1][0] + A[0][:-1])
            continue
        if hh == N - 1:
            newG.append(A[-1][1:] + A[-2][-1])
            continue
        newG.append(A[hh + 1][0] + A[hh][1:-1] + A[hh - 1][-1])
    for i in range(N):
        print(newG[i])
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [next(tokens) for _ in range(N)]  # type: "List[str]"
    solve(N, A)

if __name__ == '__main__':
    main()
