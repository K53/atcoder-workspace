#!/usr/bin/env python3
import sys

maxNum = 300
INF = 10 ** 16


def solve(N: int, X: int, Y: int, A: "List[int]", B: "List[int]"):
    def change(a, b):
        return a * (maxNum + 1) + b

    # dp = [[False] * (301 * 301) for _ in range(300)]
    dp = [[INF] * ((maxNum + 1 )* (maxNum + 1)) for _ in range(N + 2)]
    dp[0][0] = 0
    for i in range(N):
        for aa in range(maxNum):
            for bb in range(maxNum):
                nn = change(A[i], B[i])
                now = dp[i][change(aa, bb)]
                nextV = change(aa, bb) + nn
                if now != INF:
                    dp[i + 1][change(aa, bb)] = now
                    if nextV >= len(dp[0]):
                        continue
                    dp[i + 1][nextV] = min(dp[i + 1][nextV], now + 1)
    # print(change(X, Y), change(maxNum, maxNum))               
    for i in range(N + 2):
        # print(dp[i])
        for ab in range(change(X, Y), ((maxNum + 1 )* (maxNum + 1))):
            # print(ab)
            if dp[i][ab] != INF:
                print(dp[i][ab])
                return
    print(-1)
    return
# Generated by 2.8.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    X = int(next(tokens))  # type: int
    Y = int(next(tokens))  # type: int
    A = [int()] * (N)  # type: "List[int]"
    B = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    solve(N, X, Y, A, B)

if __name__ == '__main__':
    main()
