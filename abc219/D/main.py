#!/usr/bin/env python3
import sys

maxNum = 300
INF = 10 ** 16

# dp[i][a][b]

def solve(N: int, X: int, Y: int, A: "List[int]", B: "List[int]"):
    dp = [[[INF] * (maxNum + 1) for _ in range(maxNum + 1)] for _ in range(N + 1)]
    dp[0][0][0] = 0
    for i in range(1, N + 1):
        for nowA in range(maxNum + 1):
            for nowB in range(maxNum + 1):
                now = dp[i - 1][nowA][nowB]
                if now == INF:
                    continue
                # 取らない
                dp[i][nowA][nowB] = min(dp[i][nowA][nowB], now)
                # 取る
                nextA = nowA + A[i - 1]
                nextB = nowB + B[i - 1]
                if nextA > maxNum:
                    nextA = maxNum
                if nextB > maxNum:
                    nextB = maxNum
                # print(i, nextA, nextB)
                dp[i][nextA][nextB] = min(dp[i][nextA][nextB], now + 1)

    ans = INF
    for i in range(N + 1):
        for aa in range(X, maxNum + 1):
            for bb in range(Y, maxNum + 1):
                if dp[i][aa][bb] != INF:
                    ans = min(ans, dp[i][aa][bb])
    print(ans if ans != INF else -1)
    return
# Generated by 2.8.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    X = int(next(tokens))  # type: int
    Y = int(next(tokens))  # type: int
    A = [int()] * (N)  # type: "List[int]"
    B = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    solve(N, X, Y, A, B)

if __name__ == '__main__':
    main()
