#!/usr/bin/env python3
import sys

MOD = 998244353  # type: int


def solve(N: int, A: int, B: int, P: int, Q: int):
    dp_taka = [[0] * N for _ in range(N)]
    dp_taka[0][A - 1] = 1
    for turn in range(N - 1):
        for x in range(N - 1):
            for num in range(1, P + 1):
                dp_taka[turn + 1][min(N - 1, x + num)] += dp_taka[turn][x] * pow(P, MOD - 2, MOD)
                dp_taka[turn + 1][x] %= MOD
    # print(dp_taka)

    dp_aoki = [[0] * N for _ in range(N)]
    dp_aoki[0][B - 1] = 1
    for turn in range(N - 1):
        for x in range(N - 1):
            for num in range(1, Q + 1):
                dp_aoki[turn + 1][min(N - 1, x + num)] += dp_aoki[turn][x] * pow(Q, MOD - 2, MOD)
                dp_aoki[turn + 1][x] %= MOD
    # print(dp_aoki)
    ans = 0
    for i in range(1, N):
        # takahashi arrive in time i
        # if dp_taka[i][-1] == 0:
        #     continue
        notgoal = sum(dp_aoki[i - 1][:-1])
        # print(notgoal, "*", dp_taka[i][-1] )
        notgoal %= MOD
        ans += dp_taka[i][-1] * notgoal % MOD
        ans %= MOD
    print(ans % MOD)

    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = int(next(tokens))  # type: int
    B = int(next(tokens))  # type: int
    P = int(next(tokens))  # type: int
    Q = int(next(tokens))  # type: int
    solve(N, A, B, P, Q)

if __name__ == '__main__':
    main()
