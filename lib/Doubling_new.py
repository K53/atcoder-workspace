#!/usr/bin/env python3
import sys
class Doubling:
    def __init__(self, doubling_times: int, first_states: "List[int]", first_accs: "List[int]" = None):
        self.states = [first_states]   # 数列(状態)のダブリングテーブル。states[k][s] := 状態sから2^k回実行したらあとの状態
        self.acc = [first_accs]              # 和のダブリングテーブル
        self.state_kind = len(first_states)   # 状態の種類数s
        self.doubling_times = doubling_times   # 実行回数kの範囲の定義(2^0 ≦ k ≦ 2^maxDoublingTimes)

    def build(self):
        for i in range(1, self.doubling_times):
            l = []
            s = []
            for j in range(self.state_kind):
                l.append(self.states[i - 1][self.states[i - 1][j]])
                s.append(self.acc[i - 1][j] + self.acc[i - 1][self.states[i - 1][j]])
            self.states.append(l)
            self.acc.append(s)

    def get_state(self, start_state: int, doubing_times: int):
        """
        start_state : 開始状態
        doubing_times : 開始状態からの遷移回数
        """
        a = []
        for i in range(self.doubling_times):
            if doubing_times >> i & 1:
                a.append(i)
        now = start_state
        for i in a:
            now = self.states[i][now]
        return now
    
    def get_acc(self, start_state: int, doubing_times: int):
        """
        start_state : 開始状態
        doubing_times : 開始状態からの遷移回数
        """
        res = 0
        a = []
        for i in range(self.doubling_times):
            if doubing_times >> i & 1:
                a.append(i)
        now = start_state
        for i in a:
            res += self.acc[i][now]
            now = self.states[i][now]
        return res

    # def get_all_states(self, doubing_times: int):
    #     return self.states[doubing_times]

import math
def solve(N: int, K: int, P: "List[int]", C: "List[int]"):
    db = Doubling(int(math.log2(K)) + 1, [i - 1 for i in P], [C[i - 1] for i in P])
    db.build()
    for i in range(N):
        print(db.get_acc(start_state=i, doubing_times=K))

    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    P = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    C = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, K, P, C)

if __name__ == '__main__':
    main()
