#!/usr/bin/env python3
import sys
class SegmentTree:
    def __init__(self, monoid: int, bottomLen: int):
        self.monoid = monoid
        self.bottomLen = bottomLen
        self.offset = self.bottomLen        # セグ木の最下層の最初のインデックスに合わせるためのオフセット
        self.segLen = self.bottomLen * 2
        self.tree = [monoid] * self.segLen

    # 一応確認済み
    def initBottom(self, bottomList: list):
        self.tree[self.offset:] = bottomList
        preLayer = self.offset
        layer = self.offset // 2
        while layer >= 1:
            for segIndex in range(layer, preLayer):
                self.tree[segIndex] = min(self.tree[segIndex * 2], self.tree[segIndex * 2 + 1])
            layer //= 2
        return
        

    """ 一点更新 区間最小値 (RMQ)
    tree[index] = val
    """
    def pointUpdate(self, index: int, val: int):
        segIndex = index + self.offset
        self.tree[segIndex] = val
        while True:
            segIndex //= 2
            if segIndex == 0:
                break
            self.tree[segIndex] = min(self.tree[segIndex * 2], self.tree[segIndex * 2 + 1])
        return

    # def rangeMinQuery(self, l: int, r: int):
    #     l += self.offset
    #     r += self.offset
    #     res = self.monoid
    #     while l < r:
    #         if l % 2 == 1:
    #             res = min(res, self.tree[l])
    #             l += 1
    #         l //= 2
    #         if r % 2 == 1:
    #             res = min(res, self.tree[r - 1])
    #             r -= 1
    #         r //= 2
    #     return res

    # 最初のK以下のindexを取得
    def q(self, K: int):
        index = 1
        if self.tree[index] >= K:  # その寿司を食べたい奴はいない
            return -1
        while index < self.offset:
            if self.tree[2 * index] < K: # 左側にその寿司を食べたい奴がいる
                index = 2 * index
            else:
                index = 2 * index + 1
        return index - self.offset


# Range Minimum Query


def solve(N: int, M: int, a: "List[int]"):
    INF = 10 ** 9
    tr = SegmentTree(monoid=0, bottomLen=8)
    print(tr.tree)
    return
    for aa in a:
        p = tr.q(aa)
        if p == -1:
            print(-1)
            continue
        print(p + 1)
        tr.pointUpdate(index=p, val=aa)
        print(tr.tree)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    a = [int(next(tokens)) for _ in range(M)]  # type: "List[int]"
    solve(N, M, a)

if __name__ == '__main__':
    main()
