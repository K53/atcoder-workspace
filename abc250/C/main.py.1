#!/usr/bin/env python3
import sys



def greedy(N: int, Q: int, x: "List[int]"):
    l = [i for i in range(1, N + 1)]
    for xx in x:
        k = l.index(xx)
        if k == N - 1:
            l[k - 1], l[k] = l[k], l[k - 1] 
        else:
            l[k], l[k + 1] = l[k + 1], l[k]
    return l

def solve(N: int, Q: int, x: "List[int]"):
    if N == 2:
        l = greedy(N, Q, x)
        print(*l, sep=" ")
        return
    l = [[(i - 1) % N, i, (i + 1) % N] for i in range(N)]
    s = 0
    e = N - 1
    # print(l)
    for xx in x:
        num = xx - 1
        if num == e:
            pre1 = l[num][0]
            pre0 = l[pre1][0]
            next1 = l[num][2]
            # print(pre0, pre1, next1)
            e = pre1
            if s == pre1:
                s = num
            l[num][0] = pre0
            l[num][2] = pre1
            l[pre0][2] = num
            l[pre1][0] = num
            l[pre1][2] = next1
            l[next1][0] = pre1
        else:
            pre1 = l[num][0]
            next1 = l[num][2]
            next2 = l[next1][2]
            # print("#", pre1, next1, next2)
            # print(num, s)
            if num == s:
                s = next1
            if next1 == e:
                e = num
            l[next1][0] = pre1
            l[next1][2] = num
            l[pre1][2] = next1
            l[num][0] = next1
            l[num][2] = next2
            l[next2][0] = num
            # print(l, s)
    ans = [s + 1]
    for i in range(N - 1):
        ans.append(l[s][2] + 1)
        s = l[s][2]
    # print(ans)
    return ans
    print(*ans, sep=" ")


    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    Q = int(next(tokens))  # type: int
    x = [int(next(tokens)) for _ in range(Q)]  # type: "List[int]"
    solve(N, Q, x)

    # checkTimes = 10 # テスト試行回数
    # for i in range(checkTimes):
    #     import random
    #     N = 2
    #     # K = random.randint(1, 4) # 発生させる乱数範囲 (末尾を含む)
    #     S = [random.randint(1, N) for _ in range(N)]
    #     ac = greedy(N,1,S)
    #     checkee = solve(N,1,S)
    #     if ac != checkee:
    #         print(N)
    #         print(S)
    #         print(ac, "!=", checkee)
    #         print("----------------")


if __name__ == '__main__':
    main()
