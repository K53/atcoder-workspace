#!/usr/bin/env python3
import sys


def solve(N: int, Q: int, x: "List[int]"):
    d = {i + 1: i for i in range(N)}
    ans = [i for i in range(1, N + 1)]
    # print(d)
    for xx in x:
        idx = d[xx]
        if idx == N - 1:
            d[xx] = idx - 1
            d[ans[idx - 1]] = idx
            ans[idx], ans[idx - 1] = ans[idx - 1], ans[idx]
        else:
            d[xx] = idx + 1
            d[ans[idx + 1]] = idx
            ans[idx], ans[idx + 1] = ans[idx + 1], ans[idx]
        # print(d)
    print(*ans, sep=" ")
        

    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    Q = int(next(tokens))  # type: int
    x = [int(next(tokens)) for _ in range(Q)]  # type: "List[int]"
    solve(N, Q, x)

if __name__ == '__main__':
    main()
