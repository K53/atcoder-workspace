#!/usr/bin/env python3
import sys


def solve(N: int):
    class Eratosthenes():
        """ 素数列挙
        計算量 : O(NloglogN)
        """
        def __init__(self, N: int) -> None:
            self.primeTable = [True] * (N + 1) # 数iが素数かどうかのフラグ
            self.primeTable[0] = False
            self.primeTable[1] = False
            self.minfactor = [0] * (N + 1) # 数iの最小の素因数
            self.minfactor[1] = 1
            self.primes = []    # 数Nまでの素数のリスト
            for p in range(2, N + 1):  # p : 判定対象の数
                if not self.primeTable[p]:
                    continue
                self.minfactor[p] = p
                self.primes.append(p)
                # pが素数のためそれ以降に出現するpの倍数を除外する。
                # なお、ループはp始まりでも良いが、p * _ のかける側はすでに同じ処理で弾かれているはずのため無駄。
                for i in range(p * p, N + 1, p):
                    if self.minfactor[i] == 0:
                        self.minfactor[i] = p
                    self.primeTable[i] = False
            return
    er = Eratosthenes(10 ** 6)
    l = er.primes
    print(er.primes[:3])

    def is_ok(k: int):
        if k == 0:
            return True
        return er.primes[k - 1] * er.primes[k] ** 3 <= N

    def binSearch(ok: int, ng: int):
        print(ok, ng)              # はじめの2値の状態
        while abs(ok - ng) > 1:     # 終了条件（差が1となり境界を見つけた時)
            mid = (ok + ng) // 2
            print("target > ", mid)
            result = is_ok(mid)
            print(result)
            if result:
                ok = mid            # midが条件を満たすならmidまではokなのでokの方を真ん中まで持っていく
            else:
                ng = mid            # midが条件を満たさないならmidまではngなのでngの方を真ん中まで持っていく
            print(ok, ng)          # 半分に切り分ける毎の2値の状態
        return ok    # 関数呼び出し時の引数のngは絶対評価されないのでngに書く値が答えになりうるならその数マイナス1を指定する。

    q = binSearch(0, len(er.primes) + 1)
    print(q)
    print(er.primes[q - 1] * er.primes[q] ** 3)
    print(123456789012345)
    print(er.primes[q] * er.primes[q + 1] ** 3)
    print(469 * (469 - 1) // 2)

    print("----")    
    def is_ok2(k: int, q: int):
        if k == 0:
            return True
        return er.primes[k - 1] * er.primes[q] ** 3 <= N

    def binSearch2(ok: int, ng: int, q):
        print(ok, ng)              # はじめの2値の状態
        while abs(ok - ng) > 1:     # 終了条件（差が1となり境界を見つけた時)
            mid = (ok + ng) // 2
            print("target > ", mid)
            result = is_ok2(mid, q)
            print(result)
            if result:
                ok = mid            # midが条件を満たすならmidまではokなのでokの方を真ん中まで持っていく
            else:
                ng = mid            # midが条件を満たさないならmidまではngなのでngの方を真ん中まで持っていく
            print(ok, ng)          # 半分に切り分ける毎の2値の状態
        return ok    # 関数呼び出し時の引数のngは絶対評価されないのでngに書く値が答えになりうるならその数マイナス1を指定する。

    a = binSearch2(0, q + 1, q + 1)
    print(a)
    print((1 + q) * q // 2 + a)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    solve(N)

if __name__ == '__main__':
    main()
