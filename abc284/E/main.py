#!/usr/bin/env python3
import sys
sys.setrecursionlimit(10 ** 9)

def solve(N: int, M: int, u: "List[int]", v: "List[int]"):
    G = [[] for _ in range(N)]
    for i in range(M):
        G[u[i] - 1].append(v[i] - 1)
        G[v[i] - 1].append(u[i] - 1)

    ans = 0
    path = set([0])
    def dfs(prev: int, cur: int):
        nonlocal ans
        ans += 1
        if ans >= 10 ** 6:
            print(10 ** 6)
            exit()
        for next in G[cur]:
            if next in path:
                continue
            path.add(next)
            dfs(cur, next)
            path.remove(next)
    dfs(-1, 0)
    print(ans)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    u = [int()] * (M)  # type: "List[int]"
    v = [int()] * (M)  # type: "List[int]"
    for i in range(M):
        u[i] = int(next(tokens))
        v[i] = int(next(tokens))
    solve(N, M, u, v)

if __name__ == '__main__':
    main()
