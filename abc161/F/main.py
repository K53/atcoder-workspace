#!/usr/bin/env python3
import sys

def getDivisors(n: int):
    lowerDivisors, upperDivisors = [], []
    i = 1
    while i * i <= n: # sqrt(N)まで試し割りする。
        if n % i == 0:
            lowerDivisors.append(i)
            if i != n // i:
                upperDivisors.append(n//i)
        i += 1
    return lowerDivisors + upperDivisors[::-1]


def solve(N: int):
    # N -> L -> L%K = 1
    # case1) L = N 即ちNはKで割れない場合、
    l = getDivisors(N - 1)

    ans = set(l)
    ans.remove(1)

    # case2) N = pK * L 即ちNは少なくとも1回はKで割れる(=素因数にKを持つ)の場合
    Ks = getDivisors(N)
    for k in Ks:
        if k == 1:
            continue
        rest = N
        while True:
            p, q = divmod(rest, k)
            if q != 0:
                break
            rest = p
        if rest % k == 1:
            ans.add(k)
    
    print(len(ans))

    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    solve(N)

if __name__ == '__main__':
    main()
