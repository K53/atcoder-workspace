#!/usr/bin/env python3


# Generated by 2.6.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    H, W = map(int, input().split())
    INF = 10 ** 16
    G = []
    blacks = 0
    for _ in range(H):
        wb = input()
        G.append(wb)
        blacks += wb.count("#")
    from collections import deque
    def bfs(edges, H, W, startY, startX) -> list:
        q = deque()
        dist = [[INF] * W for _ in range(H)]
        q.append((startY, startX))
        dist[startY][startX] = 0
        while q:
            nowy, nowx = q.popleft()
            for dx, dy in [(0, 1), (1, 0), (-1, 0), (0, -1)]:
                nexty = nowy + dy
                nextx = nowx + dx
                if nexty < 0 or nextx < 0 or nexty >= H or nextx >= W or dist[nexty][nextx] != INF or edges[nexty][nextx] == "#":
                    continue
                q.append((nexty, nextx))
                dist[nexty][nextx] = dist[nowy][nowx] + 1
        return dist
    d = bfs(G, H, W, 0, 0)
    t = d[H - 1][W - 1]
    if t == INF:
        print(-1)
        return
    least = t + 1
    print(H * W - least - blacks)

if __name__ == '__main__':
    main()
