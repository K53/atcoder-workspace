#!/usr/bin/env python3
import sys
import math

def solve(N: int, x: "List[int]", y: "List[int]"):
    node = [(xx, yy) for xx, yy in zip(x, y)]
    # if (0, 0) in node:
    #     node = [(xx + 1, yy + 1) for xx, yy in zip(x, y)]
    ss = set()
    for i in range(N):
        ox, oy = node[i][0], node[i][1]
        for j in range(N):
            if i == j:
                continue
            tx, ty = node[j][0], node[j][1]
            xx = (tx - ox)
            yy = (ty - oy)
            gg = math.gcd(xx, yy)
            # print(xx, yy)
            # print(gg)
            # print((xx // gg, yy // gg))
            ss.add((xx // gg, yy // gg))
    print(len(ss))


            
    return


# Generated by 2.9.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    x = [int()] * (N)  # type: "List[int]"
    y = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        x[i] = int(next(tokens))
        y[i] = int(next(tokens))
    solve(N, x, y)

if __name__ == '__main__':
    main()
