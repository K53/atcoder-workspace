#!/usr/bin/env python3
import sys


def rest(x, y):
    half = (x + y) // 2 + 1
    if x >= half:
        return 0
    return half - x

def solve(N: int, X: "List[int]", Y: "List[int]", Z: "List[int]"):
    maxZ = sum(Z)
    INF = 10 ** 14
    dp = [[INF] * (maxZ + 1) for _ in range(N + 1)]
    dp[0][0] = 0
    for i in range(N):
        for j in range(maxZ):
            if dp[i][j] == INF:
                continue
            # とる
            dp[i + 1][j + Z[i]] = min(dp[i][j + Z[i]], dp[i][j] + rest(X[i], Y[i]))
            dp[i + 1][j] = min(dp[i + 1][j], dp[i][j])
    half = maxZ // 2 + 1
    print(min(dp[-1][half:]))
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    X = [int()] * (N)  # type: "List[int]"
    Y = [int()] * (N)  # type: "List[int]"
    Z = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        X[i] = int(next(tokens))
        Y[i] = int(next(tokens))
        Z[i] = int(next(tokens))
    solve(N, X, Y, Z)

if __name__ == '__main__':
    main()
