#!/usr/bin/env python3
import sys
from collections import defaultdict, deque

def solve(N: int, M: int, S: str, C: "List[int]"):
    d = defaultdict(deque)
    for i in range(N):
        d[C[i]].append(S[i])
    
    for dd in d.values():
        num = dd.pop()
        dd.appendleft(num)
    ans = []
    for i in range(N):
        ans.append(d[C[i]].popleft())
    print(*ans, sep="")

    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    S = next(tokens)  # type: str
    C = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, M, S, C)

if __name__ == '__main__':
    main()
