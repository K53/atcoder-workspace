#!/usr/bin/env python3
import sys


def solve(N: int, X: int, Y: int, P: "List[int]", T: "List[int]", Q: int, q: "List[int]"):
    import heapq
    INF = 10 ** 16
    # グラフ + 座標圧縮 の問題の場合、開始点と終了点を圧縮後の座標の集合に加え忘れないこと。
    class Dijkstra():
        def __init__(self, N: int) -> None:
            self.N = N 
            self.G = [[] for _ in range(N)]
            return
        
        # 辺の追加
        def addEdge(self, fromNode: int, toNode: int, cost: int):
            self.G[fromNode].append((cost, toNode))
            print("Really directed Graph?")
            return

        # "toノードに到達するための辺の番号"を同時に持たせることで経路復元時にedge_numを使用できる。
        # def addEdge(self, fromNode: int, toNode: int, cost: int, edge_num: int):
        #     self.G[fromNode].append((cost, toNode, edge_num))
        #     return
        
        def build(self, startNode: int):
            """
            多始点ダイクストラの場合、初期化するdistとヒープを各スタートノード分やってbuildすればいい。
            これは単一の超頂点をスタートとして与えられた多始点それぞれにコスト0の辺が伸びていたと解釈すれば成立すると分かる。
            """
            hq = []
            heapq.heapify(hq)
            # Set start info
            dist = [INF] * self.N
            # prev = [-1] * self.N # 経路復元する場合は移動時に直前の頂点や辺を記録して遷移していく。
            heapq.heappush(hq, (0, startNode))
            dist[startNode] = 0
            # dijkstra
            while hq:
                min_cost, now = heapq.heappop(hq)
                if min_cost > dist[now]:
                    continue
                for cost, next in self.G[now]:
                    if dist[next] > dist[now] + cost:
                        dist[next] = dist[now] + cost
                        # prev[next] = now # 頂点nextに至る直前の頂点(now)または辺(edge_num)を更新。
                        heapq.heappush(hq, (dist[next], next))
            return dist

    dk = Dijkstra(N * 8)
    for i in range(N - 1):
        for tt in range(1, 8):
            dk.addEdge(i * 8 + tt, i * 8, 8 - tt)
        
        for tt in range(8):
            if P[]
    
    dists = [dk.build(i) for i in range(P[0])]
    print(dists[0])
    for qq in q:
        qq + X


    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    X = int(next(tokens))  # type: int
    Y = int(next(tokens))  # type: int
    P = [int()] * (N - 1)  # type: "List[int]"
    T = [int()] * (N - 1)  # type: "List[int]"
    for i in range(N - 1):
        P[i] = int(next(tokens))
        T[i] = int(next(tokens))
    Q = int(next(tokens))  # type: int
    q = [int(next(tokens)) for _ in range(Q)]  # type: "List[int]"
    solve(N, X, Y, P, T, Q, q)

if __name__ == '__main__':
    main()
