#!/usr/bin/env python3
import sys

from collections import deque

def solve(N: int, X: "List[int]", Y: "List[int]"):
    INF = 1
    offset = 1000
    maxHW = offset * 2 + 1 
    G = [[0 for _ in range(maxHW)] for _ in range(maxHW)]
    dist = [[INF] * maxHW for _ in range(maxHW)]
    for xx, yy in zip(X, Y):
        G[yy + offset][xx + offset] = 1
        dist[yy + offset][xx + offset] = 0
    ans = 0
    for xx, yy in zip(X, Y):
        q = deque()
        q.append((yy + offset, xx + offset))
        # print("$")
        # print(dist[999][999:1010])
        # print(dist[1000][999:1010])
        # print(dist[1001][999:1010])
        # print(dist[1002][999:1010])
        # print()
        flg = 0
        while q:
            # print(q)
            nowy, nowx = q.popleft()
            if dist[nowy][nowx] == INF:
                # print(nowy, nowx)
                continue
            # print(nowy, nowx, ans)
            # print(q)
            # # print(dist[995][999:1010])
            # # print(dist[996][999:1010])
            # # print(dist[997][999:1010])
            # # print(dist[998][999:1010])
            # print(dist[999][999:1010])
            # print(dist[1000][999:1010])
            # print(dist[1001][999:1010])
            # print(dist[1002][999:1010])
            # print("--")
            # print(dist[1003][999:1010])
            # print(dist[1004][999:1010])
            # print(dist[1005][999:1010])
            # print(nowy, nowx)
            dist[nowy][nowx] = INF
            flg = 1
            for dx, dy in [(0, 1), (1, 1), (1, 0), (-1, 0), (-1, -1), (0, -1)]:
                nexty = nowy + dy
                nextx = nowx + dx
                if nexty < 0 or nextx < 0 or nexty >= maxHW or nextx >= maxHW or dist[nexty][nextx] == INF:
                    continue
                q.append((nexty, nextx))
                # print(q)
                # dist[nexty][nextx] = 1
                # flg = 1
            # print(dist[995][999:1010])
            # print(dist[996][999:1010])
            # print(dist[997][999:1010])
            # print(dist[998][999:1010])
            # print(dist[999][999:1010])
            # print(dist[1000][999:1010])
            # print(dist[1001][999:1010])
            # print(dist[1002][999:1010])
            # print(dist[1003][999:1010])
            # print(dist[1004][999:1010])
            # print(dist[1005][999:1010])
        if flg:
            ans += 1
    print(ans)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    X = [int()] * (N)  # type: "List[int]"
    Y = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        X[i] = int(next(tokens))
        Y[i] = int(next(tokens))
    solve(N, X, Y)

if __name__ == '__main__':
    main()
