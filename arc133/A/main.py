#!/usr/bin/env python3
import sys


def solve(N: int, A: "List[int]"):
    from itertools import groupby
    def runLengthEncode(S: str) -> "List[tuple(str, int)]":
        grouped = groupby(S)
        res = []
        for k, v in grouped:
            res.append(k)
        return res
    B = runLengthEncode(A)
    ans = A[-1]
    for i in range(len(B) - 1):
        if B[i] > B[i + 1]:
            ans = B[i]
            break
    print(*[aa for aa in A if aa != ans], sep=" ")
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, A)

if __name__ == '__main__':
    main()

# 3 2 1 4
# 2 4 1 2