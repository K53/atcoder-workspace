#!/usr/bin/env python3
import sys

def getLengthOfLcs(a: str, b: str):
    L = []
    for bk in b:
        bgn_idx = 0  # 検索開始位置
        for i, cur_idx in enumerate(L):
            # ※1
            # chr_idx = a.find(bk, bgn_idx) + 1
            for j in range(bgn_idx, len(a)):
                if a[j] % bk == 0:
                    break
            else:
                break
            chr_idx = j + 1
            # if not chr_idx:
            #     break
            L[i] = min(cur_idx, chr_idx)
            bgn_idx = cur_idx
        else:
            # ※2
            # chr_idx = a.find(bk, bgn_idx) + 1
            for j in range(bgn_idx, len(a)):
                if a[j] % bk == 0:
                    break
            else:
                continue
            chr_idx = j + 1
            if chr_idx:
                L.append(chr_idx)
    # print(L)
    return len(L)

def solve(N: int, P: "List[int]", Q: "List[int]"):
    # pp = "".join(P)
    # qq = "".join(Q)
    print(getLengthOfLcs(Q, P))
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    P = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    Q = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, P, Q)

if __name__ == '__main__':
    main()
