#!/usr/bin/env python3
import sys

MOD = 998244353  # type: int

def solve(N: int, M: int, K: int):
    MODinv = pow(M,MOD-2,MOD)
    dp = [[0] * (N + 1) for _ in range(K + 1)]
    dp[0][0] = 1
    for i in range(K):
        for now in range(N + 1):
            # すでにNマスに到着している
            if now == N:
                dp[i + 1][now] += dp[i][now]
                dp[i + 1][now] %= MOD
                continue
            for mm in range(1, M + 1):
                dest = N - (now + mm - N) if now + mm > N else now + mm 
                dp[i + 1][dest] += (dp[i][now] * MODinv)
                dp[i + 1][dest] %= MOD
    # for i in range(K + 1):
    #     print(dp[i])
    print(dp[-1][-1])
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    solve(N, M, K)

if __name__ == '__main__':
    main()
