#!/usr/bin/env python3
import sys
from itertools import permutations

YES = "Yes"  # type: str
NO = "No"  # type: str

def solve(N: int, H: int, W: int, A: "List[int]", B: "List[int]"):
    # usage
    Shw = H * W
    field = [[0] * W for _ in range(H)]

    def put(tiles, idx, start_hhww):
        start_hh, start_ww = divmod(start_hhww, W)
        # print(field, bin(tiles), start_hh, start_ww)
        aa, bb = A[tiles[idx]], B[tiles[idx]]
        l = [(aa, bb)]
        if aa != bb:
            l.append((bb, aa))
        for dh, dw in l:
            if start_hh + dh > H or start_ww + dw > W:
                continue

            for ddh in range(dh):
                for ddw in range(dw):
                    if field[start_hh + ddh][start_ww + ddw] != 0:
                        break
                else:
                    continue
                break
            else:
                for ddh in range(dh):
                    for ddw in range(dw):
                        field[start_hh + ddh][start_ww + ddw] = 1
            
                # Check
                for hh in range(H):
                    for ww in range(W):
                        if field[hh][ww] == 0:
                            break
                    else:
                        continue
                    break
                else:
                    print(YES)
                    exit()
                
                if idx + 1 != len(tiles):
                    for next_hhww in range(start_hhww, Shw):
                        next_hh, next_ww = divmod(next_hhww, W)
                        if field[next_hh][next_ww] == 0:
                                put(tiles, idx + 1, next_hhww)
                # 0に戻す
                for ddh in range(dh):
                    for ddw in range(dw):
                        field[start_hh + ddh][start_ww + ddw] = 0
                

    for b in range(2 ** N):
        s = 0
        tiles = []
        for i in range(N):
            if (b >> i) & 1:
                s += A[i] * B[i]
                tiles.append(i)
                if s > Shw:
                    break
        else:
            if s != Shw:
                continue
            for p in permutations(tiles):
                put(p, 0, 0)
                            
    
    print(NO)
    return


# Generated by 2.13.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    H = int(next(tokens))  # type: int
    W = int(next(tokens))  # type: int
    A = [int()] * (N)  # type: "List[int]"
    B = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    solve(N, H, W, A, B)

if __name__ == '__main__':
    main()
