#!/usr/bin/env python3
import sys

YES = "Yes"  # type: str
NO = "No"  # type: str




def solve(N: int, H: int, W: int, A: "List[int]", B: "List[int]"):
    Ar = []
    Br = []
    for aa, bb in zip(A, B):
        Ar.append(aa)
        Br.append(bb)
        if aa != bb:
            Ar.append(bb)
            Br.append(aa)
    # print(Ar, Br)
    N = len(Ar)
    # [1, 3, 4, 2, 3, 2, 5] [1, 3, 4, 3, 2, 5, 2]
    def put(i_useTiles, tileidx): # start_hh, start_ww):
        for hh in range(H):
            for ww in range(W):
                if field[hh][ww] == 0:
                    break
            else:
                continue
            break
        else:
            print(YES)
            exit()
        if tileidx > len(i_useTiles):
            return
        # print(field, i_useTiles, tileidx, i_useTiles[tileidx])
        
        for start_hh in range(H):
            for start_ww in range(W):
                is_ok = True
                for aa in range(Ar[i_useTiles[tileidx]]):
                    for bb in range(Br[i_useTiles[tileidx]]):
                        if start_hh + aa >= H or start_ww + bb >= W:
                            is_ok = False
                            break
                        if field[start_hh + aa][start_ww + bb] != 0:
                            is_ok = False
                            break
                    else:
                        continue
                    break
                if not is_ok:
                    continue
                for aa in range(Ar[i_useTiles[tileidx]]):
                    for bb in range(Br[i_useTiles[tileidx]]):
                        field[start_hh + aa][start_ww + bb] = 1
                put(i_useTiles, tileidx + 1)
                break
            else:
                continue
            break
        else:
            return
        for aa in range(Ar[i_useTiles[tileidx]]):
            for bb in range(Br[i_useTiles[tileidx]]):
                field[start_hh + aa][start_ww + bb] = 0


    Shw = H * W
    field = [[0] * W for _ in range(H)]
    for b in range(2 ** N):
        s = 0
        i_useTiles = []
        for i in range(N):
            if (b >> i) & 1:
                i_useTiles.append(i)
                s += Ar[i] * Br[i]
                if s > Shw:
                    break
        else:
            if s != Shw:
                continue
            # print(s, i_useTiles)
            put(i_useTiles, 0)
                            
    print(NO)


    return


# Generated by 2.13.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    H = int(next(tokens))  # type: int
    W = int(next(tokens))  # type: int
    A = [int()] * (N)  # type: "List[int]"
    B = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    solve(N, H, W, A, B)

if __name__ == '__main__':
    main()
