#!/usr/bin/env python3
import sys

class Eratosthenes():
    """
    エラトステネス
    """
    def __init__(self, N: int) -> None:
        self.isPrime = [True] * (N + 1) # 数iが素数かどうかのフラグ
        self.isPrime[0] = False
        self.isPrime[1] = False
        self.minfactor = [0] * (N + 1) # 数iの最小の素因数
        self.minfactor[1] = 1
        self.primes = []    # 数Nまでの素数のリスト
        for p in range(2, N + 1):  # p : 判定対象の数
            if not self.isPrime[p]:
                continue
            self.minfactor[p] = p
            self.primes.append(p)
            # pが素数のためそれ以降に出現するpの倍数を除外する。
            # なお、ループはp始まりでも良いが、p * _ のかける側はすでに同じ処理で弾かれているはずのため無駄。
            for i in range(p * p, N + 1, p):
                if self.minfactor[i] == 0:
                    self.minfactor[i] = p
                self.isPrime[i] = False
        return
    
    def getPrimes(self) -> list:
        return self.primes
    
    """
    n <= 1の場合、空のリストが返却される。
    """
    def factorize(self, n: int) -> list:
        res = [] # (p, exp)
        while n > 1:
            p = self.minfactor[n]
            exp = 0
            while self.minfactor[n] == p:
                n //= p
                exp += 1
            res.append((p, exp))
        return res


def solve(N: int, M: int, A: "List[int]"):
    er = Eratosthenes(10 ** 5 + 1)
    s = set()
    for aa in A:
        for i, _ in er.factorize(aa):
            s.add(i)
    ans = [] # 素数リスト
    isAns = [True] * (M + 1) # 素数かどうかのフラグ
    isAns[0] = False
    
    for num in s:
        for i in range(num, M + 1, num):
            isAns[i] = False
    ans = [i for i in range(M + 1) if isAns[i]]
    print(len(ans))
    print(*ans, sep="\n")
    
# Generated by 2.8.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, M, A)

if __name__ == '__main__':
    main()
