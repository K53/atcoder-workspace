#!/usr/bin/env python3
import sys


def solve(N: int, A: "List[int]"):
    INF = 10 ** 16
    B = A + [INF]
    dp = [INF] * (N + 1)
    dp[0] = 0
    for i in range(N + 1):
        if i + 1 < len(B):
            dp[i + 1] = min(dp[i + 1], dp[i] + B[i])
        if i + 2 < len(B):
            dp[i + 2] = min(dp[i + 2], dp[i] + B[i])
        # print(dp)

    B = A + [INF] * 2
    dp2 = [INF] * (N + 2)
    dp2[1] = 0
    for i in range(N + 2):
        if i + 1 < len(B):
            dp2[i + 1] = min(dp2[i + 1], dp2[i] + B[i])
        if i + 2 < len(B):
            dp2[i + 2] = min(dp2[i + 2], dp2[i] + B[i])
        # print(dp2)
    print(min(dp[-1], dp2[-1]))

    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, A)

if __name__ == '__main__':
    main()
