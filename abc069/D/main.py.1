#!/usr/bin/env python3
import sys


def solve(H: int, W: int, N: int, a: "List[int]"):
    ans = [[0] * W for _ in range(H)]
    l = []
    for i in range(1, N + 1):
        l.extend([i] * a[i - 1])
    for i in range(H * W):
        hh, ww = divmod(i, W)
        if hh % 2 == 1:
            ww = W - 1 - ww
        ans[hh][ww] = l[i]
    for i in range(H):
        print(*ans[i], sep=" ")
    return


# Generated by 2.9.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    H = int(next(tokens))  # type: int
    W = int(next(tokens))  # type: int
    N = int(next(tokens))  # type: int
    a = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(H, W, N, a)

if __name__ == '__main__':
    main()
