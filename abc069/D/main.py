#!/usr/bin/env python3
import sys


def solve(H: int, W: int, N: int, a: "List[int]"):
    l = []
    for i, aa in enumerate(a, 1):
        for _ in range(aa):
            l.append(i)
    for hh in range(H):
        if hh % 2 == 0:
            print(*l[(W * hh):(W * (hh + 1))])
        else:
            print(*l[(W * hh):(W * (hh + 1))][::-1])

    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    H = int(next(tokens))  # type: int
    W = int(next(tokens))  # type: int
    N = int(next(tokens))  # type: int
    a = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(H, W, N, a)

if __name__ == '__main__':
    main()
