#!/usr/bin/env python3
import sys


def solve(H: int, N: int, A: "List[int]", B: "List[int]"):
    INF = 10 ** 16
    # dp = [[INF] * (N + 1) for _ in range(H + 1)]
    # dp[0][0] = 0
    dp = [INF] * (H + 1)
    dp[0] = 0
    for hh in range(H):
        if [hh] == INF:
            continue
        for i in range(N):
            next = hh + A[i]
            if next > H:
                next = H
            dp[next] = min(dp[next], dp[hh] + B[i])
    print(dp[-1])
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    H = int(next(tokens))  # type: int
    N = int(next(tokens))  # type: int
    A = [int()] * (N)  # type: "List[int]"
    B = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    solve(H, N, A, B)

if __name__ == '__main__':
    main()
