#!/usr/bin/env python3
import sys
from collections import defaultdict

def solve(N: int, A: "List[int]"):
    INF = 10 ** 16
    dp = [[defaultdict(lambda: -INF) for _ in range(2)] for _ in range(N + 1)]
    dp[0][0][0] = 0 # dp[i][j][k] : i番目まで選択した時(i番目は選択している(j=1)orいない(j=0))、すでにk個選択している場合の答え。
    
    for i in range(N):
        for j in [i // 2 - 1, i // 2, i // 2 + 1]:
            # 選択する
            dp[i + 1][1][j + 1] = max(dp[i + 1][1][j + 1], dp[i][0][j] + A[i])
            # 選択しない
            dp[i + 1][0][j] = max(dp[i + 1][0][j], dp[i][0][j], dp[i][1][j])
    print(max(dp[-1][0][N // 2], dp[-1][1][N // 2]))
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, A)

if __name__ == '__main__':
    main()
