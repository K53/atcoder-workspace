#!/usr/bin/env python3
import queue
INF = 10 ** 9
def bfs(field: "List[Lsit[]]", H: int, W: int, y: int, x: int) -> list:
    q = queue.Queue()
    dist = []
    for _ in range(H):
        dist.append([-INF] * W)
    q.put((x, y, 0))
    dist[y][x] = 0
    while not q.empty():
        now_x, now_y, now_p= q.get()
        for dx, dy in [(0, 1), (1, 0)]:
            next_x, next_y = now_x + dx, now_y + dy
            if next_y < 0 or next_y >= H or next_x < 0 or next_x >= W:
                continue
            if now_p == 0:
                aa = dist[now_y][now_x] + field[next_y][next_x]
                if (dist[next_y][next_x] >= aa):
                    continue
                else:
                    dist[next_y][next_x] = aa
            else:
                aa = dist[now_y][now_x] + -(field[next_y][next_x])
                if (dist[next_y][next_x] >= aa):
                    continue
                else:
                    dist[next_y][next_x] = aa
            q.put((next_x, next_y, (now_p + 1) % 2))
    return dist

# Generated by 2.3.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    H, W = map(int, input().split())
    field = []
    for _ in range(H):
        field.append([1 if i == "+" else -1 for i in list(input())])
    # print(field)     # [['.', '.', '.', '.', '.'], ['.', '#', '#', '#', '.'], ['.', '#', '#', '#', '.'], ['.', '#', '#', '#', '.'], ['.', '.', '.', '.', '.']]
    field[0][0] = "a"   # 置き換え可能
    
    d = bfs(field, H, W, 0, 0)
    res = d[H - 1][W - 1]
    if res > 0:
        print("Takahashi")
    elif res < 0:
        print("Aoki")
    else:
        print("Draw")





if __name__ == '__main__':
    main()
