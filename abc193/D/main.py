#!/usr/bin/env python3
import sys


def getScore(l):
    score = 0
    for i, n in enumerate(l):
        score += i * (10 ** n)
    return score


def solve(K: int, S: str, T: str):
    nums = [0] + [K] * 9
    s = (list(map(int, list(S[:-1]))))
    t = (list(map(int, list(T[:-1]))))
    ss = [0] + [0] * 9
    tt = [0] + [0] * 9
    for i in range(4):
        nums[s[i]] -= 1
        nums[t[i]] -= 1
        ss[s[i]] += 1
        tt[t[i]] += 1
    # score_s = 0
    # score_t = 0
    # for i, n in enumerate(ss):
    #     score_s += i * (10 ** n)
    # for i, n in enumerate(tt):
    #     score_t += i * (10 ** n)
    
    ans = 0
    for i, n in enumerate(nums):
        if n == 0:
            continue
        ss[i] += 1
        nums[i] -= 1
        score_s = getScore(ss)
        for j, m in enumerate(nums):
            if m == 0:
                continue
            tt[j] += 1
            score_t = getScore(tt)
            if score_s > score_t:
                ans += nums[j]
            tt[j] -=1
        ss[i] -=1
        nums[i] += 1
    # print(ans)
    # print((9 *K - 9))
    print(ans * 2 / (9 *K - 8) / (9*K - 9))
    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    K = int(next(tokens))  # type: int
    S = next(tokens)  # type: str
    T = next(tokens)  # type: str
    solve(K, S, T)

if __name__ == '__main__':
    main()
