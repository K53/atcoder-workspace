#!/usr/bin/env python3
import sys
from collections import Counter

def solve(K: int, S: str, T: str):
    ds = Counter(S[:4])
    dt = Counter(T[:4])
    d = ds + dt
    restTotal = K * 9 - 8
    ans = 0
    for i in range(1, 10):
        score_taka = 0
        for num in range(1, 10):
            score_taka += num * 10 ** (ds[str(num)] + (1 if i == num else 0))
        restI = K - d[str(i)]
        if restI == 0:
            continue
        pi = restI
        for j in range(1, 10):
            score_ao = 0
            for num in range(1, 10):
                score_ao += num * 10 ** (dt[str(num)] + (1 if j == num else 0))
            if i == j:
                restJ = K - d[str(j)] - 1
            else:
                restJ = K - d[str(j)]
            if restJ == 0:
                continue
            pj = restJ
            if score_taka > score_ao:
                ans += pi * pj
    print(ans / (restTotal * (restTotal - 1)))
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    K = int(next(tokens))  # type: int
    S = next(tokens)  # type: str
    T = next(tokens)  # type: str
    solve(K, S, T)

if __name__ == '__main__':
    main()
