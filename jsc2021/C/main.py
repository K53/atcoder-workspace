#!/usr/bin/env python3
import sys

def getDivisors(n: int):
    # validation check
    # if not isinstance(n, int):
    #     raise("[ERROR] parameter must be integer")
    # if n < 0:
    #     raise("[ERROR] parameter must be not less than 0 (n >= 0)")

    lowerDivisors, upperDivisors = [], []
    i = 1
    while i * i <= n:
        if n % i == 0:
            lowerDivisors.append(i)
            if i != n // i:
                upperDivisors.append(n//i)
        i += 1
    return lowerDivisors + upperDivisors[::-1]

def solve(A: int, B: int):
    nums = [0] * (2 * 10 ** 5 + 1)
    for i in range(A, B + 1):
        d = getDivisors(i)
        for i in d:
            nums[i] += 1
    ans = 0
    for n in range(len(nums)):
        if nums[n] >= 2:
            ans = n
    print(ans)

    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    A = int(next(tokens))  # type: int
    B = int(next(tokens))  # type: int
    solve(A, B)

if __name__ == '__main__':
    main()
