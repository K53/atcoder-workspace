#!/usr/bin/env python3
import sys

MOD = 1000000007  # type: int

def solve(D: int, N: str):
    L = len(N)
    dp = [[[0] * D for _ in range(2)] for _ in range(L + 1)]
    dp[0][0][0] = 1

    for i in range(1, L + 1):
        for smaller in range(2):
            for j in range(D):
                maxNum = int(N[i - 1]) if smaller == 0 else 9
                for num in range(maxNum + 1):
                    dp[i][smaller or num < int(N[i - 1])][(j + num) % D] += dp[i - 1][smaller][j]
                    dp[i][smaller or num < int(N[i - 1])][(j + num) % D] %= MOD
    print((dp[-1][0][0] + dp[-1][1][0] + MOD - 1) % MOD)
    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    D = int(next(tokens))  # type: int
    N = next(tokens)  # type: str
    solve(D, N)

if __name__ == '__main__':
    main()
