#!/usr/bin/env python3
import sys

MOD = 1000000007  # type: int

def cmb(n, r):
    if n - r < r: r = n - r
    if r == 0: return 1
    if r == 1: return n
 
    numerator = [n - r + k + 1 for k in range(r)]
    denominator = [k + 1 for k in range(r)]
    for p in range(2,r + 1):                    # p番目について、
        pivot = denominator[p - 1]              # pivotで約分を試みる。
        if pivot > 1:                           # ただし、pivotが1、すなわちすでに割り尽くされているならp番目は飛ばす。
            offset = (n - r) % p
            for k in range(p - 1, r, p):            # p番目を約分できるということはp番目からpの倍数番目も約分可能なので実施する。
                numerator[k - offset] //= pivot
                denominator[k] //= pivot
 
    result = 1
    for k in range(r):
        if numerator[k] > 1:
            result *= int(numerator[k])
            result %= MOD
    return result % MOD

def solve(X: int, Y: int):
    # X = 1
    # Y = 30002
    # ur
    # u + 2 * r = X
    # 2 * u + r = Y
    # 2X - 4r + r = Y 
    # 2X - 3r = Y
    # r = (2X - Y) // 3
    if not (2 * X - Y) % 3 == 0:
        print(0)
        return
    r = (2 * X - Y) // 3
    u = X - 2 * r
    if r < 0 or u < 0:
        print(0)
        return
    print(cmb(r + u, r))

    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    X = int(next(tokens))  # type: int
    Y = int(next(tokens))  # type: int
    solve(X, Y)

if __name__ == '__main__':
    main()
