#!/usr/bin/env python3
import sys

def print_for_inf_replacable(l, replace_target):
    def _replace(l):
        if isinstance(l[0], list):
            return [_replace(ll) for ll in l]
        else:
            return ['' if i == replace_target else i for i in l]
    print(_replace(l))

def solve(N: int, K: int, H: "List[int]"):
    INF = 10 ** 16
    H = [0] + H
    raw_to_compressed = {}
    compressed_to_raw = []
    for index, val in enumerate(sorted(list(set(H)))):
        raw_to_compressed[val] = index
        compressed_to_raw.append(val)
    lenH = len(compressed_to_raw)
    INF = 10 ** 16
    # dp[i][k][h] = i列目までを考える。k個の列を選択する。最後の高さはhである。時の最小操作回数
    dp = [[[INF] * (lenH) for _ in range(N + 1)] for _ in range(N + 1)]
    dp[0][0][0] = 0
    for i in range(N):
        for k in range(N):
            for h in range(lenH):
                if dp[i][k][h] == INF:
                    continue
                # 選択する
                idx_curH = h
                real_curH = compressed_to_raw[h]
                idx_nextH = raw_to_compressed[H[i + 1]]
                real_nextH = H[i + 1]
                dp[i + 1][k + 1][idx_nextH] = min(dp[i + 1][k + 1][idx_nextH], dp[i][k][idx_curH] + max(0, real_nextH - real_curH))
                # 選択しない
                dp[i + 1][k][idx_curH] = min(dp[i + 1][k][idx_curH], dp[i][k][idx_curH])
    
    # for i in range(N + 1):
    #     print_for_inf_replacable(dp[i], INF)
    #     print("--")

    ans = INF
    for k in range(K + 1):
        ans = min(ans, min(dp[N][N - k]))
    print(ans)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    H = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, K, H)

if __name__ == '__main__':
    main()
