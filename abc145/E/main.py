#!/usr/bin/env python3
import sys


def solve(N: int, T: int, A: "List[int]", B: "List[int]"):
    q = [0, 1, 2, 3]
    dp = [[0] * T for _ in range(N + 1)]
    for i in range(N):
        for tt in range(T):
            if tt + A[i] < T:
                dp[i + 1][tt + A[i]] += max(dp[i + 1][tt + A[i]], dp[i][tt] + B[i])
            dp[i + 1][tt] = max(dp[i + 1][tt], dp[i][tt])
    # print(dp)
    invA = A[::-1]
    invB = B[::-1]
    dp2 = [[0] * T for _ in range(N + 1)]
    for i in range(N):
        for tt in range(T):
            if tt + invA[i] < T:
                dp2[i + 1][tt + invA[i]] += max(dp2[i + 1][tt + invA[i]], dp2[i][tt] + invB[i])
            dp2[i + 1][tt] = max(dp2[i + 1][tt], dp2[i][tt])
    # print(dp2) 
    ans = 0
    for last_eat in range(1, N + 1):
        for tt in range(T - 1):
            # print(tt, T - 1 - tt, last_eat - 1, N - last_eat)
            last_b = B[last_eat - 1]
            pre_last = dp[last_eat - 1][tt]
            suf_last = dp2[N - last_eat][T - 1 - tt]
            # print("---")
            ans = max(ans, pre_last + last_b + suf_last)
    print(ans)
    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    T = int(next(tokens))  # type: int
    A = [int()] * (N)  # type: "List[int]"
    B = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    solve(N, T, A, B)

if __name__ == '__main__':
    main()
