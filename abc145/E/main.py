#!/usr/bin/env python3
import sys

def solve(N: int, T: int, A: "List[int]", B: "List[int]"):
    dp1 = [[0]*T for _ in range(N+1)]
    dp2 = [[0]*T for _ in range(N+1)]
    # 1~iまでの料理の満足度
    for i in range(N):
        time, score = A[i], B[i]
        for t in range(T):
            if t + time < T:
                dp1[i + 1][t + time] = max(dp1[i + 1][t + time], dp1[i][t] + score)
            dp1[i + 1][t] = max(dp1[i + 1][t], dp1[i][t])
    
    for i in reversed(range(1, N)):
        time, score = A[i], B[i]
        for t in range(T):
            if t + time < T:
                dp2[i][t + time] = max(dp2[i][t + time], dp2[i + 1][t]+score)
            dp2[i][t] = max(dp2[i][t], dp2[i + 1][t])
    
    ans = 0
    for i in range(N):
        time, score = A[i], B[i]
        for t in range(T):
            tmp = dp1[i][t] + dp2[i + 1][T - 1 - t] + score
            ans = max(ans, tmp)
    print(ans)

# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    T = int(next(tokens))  # type: int
    A = [int()] * (N)  # type: "List[int]"
    B = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    solve(N, T, A, B)

if __name__ == '__main__':
    main()
