#!/usr/bin/env python3
import sys
import itertools
import math

def distance(x1, y1, x2, y2):
    return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** (1/2)

def solve(N: int, x: "List[int]", y: "List[int]"):
    p = [i for i in range(N)]
    l = itertools.permutations(p)
    ans = 0
    for case in l:
        for i in range(N - 1):
            # case[i] -> case[i + 1]
            ans += distance(x[case[i]], y[case[i]], x[case[i + 1]], y[case[i + 1]])
    print(ans / math.factorial(N))
    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    x = [int()] * (N)  # type: "List[int]"
    y = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        x[i] = int(next(tokens))
        y[i] = int(next(tokens))
    solve(N, x, y)

if __name__ == '__main__':
    main()
