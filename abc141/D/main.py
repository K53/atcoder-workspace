#!/usr/bin/env python3
import sys
import heapq

def solve(N: int, M: int, A: "List[int]"):
    l = [-aa for aa in A]
    heapq.heapify(l)
    for _ in range(M):
        if len(l) == 0:
            break
        next = -(heapq.heappop(l))
        discounted = next // 2
        if discounted == 0:
            continue
        heapq.heappush(l, -discounted)
    print(-sum(l))
    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, M, A)

if __name__ == '__main__':
    main()
