#!/usr/bin/env python3
import sys

def solve(N: int, M: int, S: "List[str]", C: "List[int]"):
    INF = 10 ** 16
    dp = [[INF for _ in range(2 ** N)] for _ in range(M + 1)]
    dp[0][0] = 0
    for i in range(M):
        for b in range(2 ** N):
            if dp[i][b] == INF:
                continue
            # 買わない
            dp[i + 1][b] = min(dp[i + 1][b], dp[i][b])
            # 買う
            next = 0
            for si in range(N):
                if S[i][si] == "Y":
                    next += 2 ** si
            dp[i + 1][b | next] = min(dp[i + 1][b | next], dp[i][b] + C[i])
    ans = dp[-1][-1] 
    print(-1 if ans == INF else ans)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    S = [str()] * (M)  # type: "List[str]"
    C = [int()] * (M)  # type: "List[int]"
    for i in range(M):
        S[i] = next(tokens)
        C[i] = int(next(tokens))
    solve(N, M, S, C)

if __name__ == '__main__':
    main()
