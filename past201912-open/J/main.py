#!/usr/bin/env python3
import sys
import heapq
INF = 10 ** 16

class Dijkstra():
    def __init__(self, H: int, W: int, G: "list[list[int]]") -> None:
        self.H = H
        self.W = W
        self.G = G
        return
    
    def build(self, startY: int, startX: int):
        hq = []
        heapq.heapify(hq)
        # Set start info
        dist = [[INF for _ in range(self.W)] for _ in range(self.H)]
        heapq.heappush(hq, (0, startY, startX)) # (cost, y, x)
        dist[startY][startX] = 0
        # dijkstra
        while hq:
            min_cost, nowy, nowx = heapq.heappop(hq)
            if min_cost > dist[nowy][nowx]:
                continue
            for dx, dy in [(0, 1), (1, 0), (-1, 0), (0, -1)]:
                nexty = nowy + dy
                nextx = nowx + dx
                if nexty < 0 or nextx < 0 or nexty >= self.H or nextx >= self.W:
                    continue
                cost = self.G[nexty][nextx]
                if dist[nexty][nextx] > dist[nowy][nowx] + cost:
                    dist[nexty][nextx] = dist[nowy][nowx] + cost
                    heapq.heappush(hq, (dist[nexty][nextx], nexty, nextx))
        return dist

def solve(H: int, W: int, A: "List[List[int]]"):
    dk = Dijkstra(H, W, A)
    fromX = dk.build(H - 1, 0)
    fromY = dk.build(H - 1, W - 1)
    fromZ = dk.build(0, W - 1)

    ans = INF
    # 経由点(hh, ww)を全探索
    for hh in range(H):
        for ww in range(W):
            fromXtoY = fromX[hh][ww] + fromY[hh][ww] - A[hh][ww]
            fromYtoZ = 0 + fromZ[hh][ww] - A[hh][ww] # Yから経由点までは必ずゼロ。
            ans = min(ans, fromXtoY + fromYtoZ)
    print(ans)
    


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    H = int(next(tokens))  # type: int
    W = int(next(tokens))  # type: int
    A = [[int(next(tokens)) for _ in range(W)] for _ in range(H)]  # type: "List[List[int]]"
    solve(H, W, A)

if __name__ == '__main__':
    main()
