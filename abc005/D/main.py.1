#!/usr/bin/env python3
import sys

class MatrixAccumulates:
    def __init__(self, H: int, W: int) -> None:
        self.H, self.W = H, W
        self.LL = []
        self.S = []
    
    def add(self, y, x, val):
        self.LL[y][x] = val
        pass

    def setList(self, LL: "List[List[int]]"):
        self.LL = LL

    def build(self, index0: bool = True):
        if index0:
            # 累積和(DPで算出)
            # 0行目/0列目に0を挿入した二次元累積和Sを得る。
            self.S = [[0] * (self.W + 1) for _ in range(self.H + 1)]
            for i in range(self.H):
                for j in range(self.W):
                    self.S[i + 1][j + 1] = self.S[i + 1][j] + self.S[i][j + 1] - self.S[i][j] + self.LL[i][j]
        else:
            self.S = [[0] * self.W for _ in range(self.H)]
            #ヨコに累積和
            for i in range(self.H):
                for j in range(self.W):
                    if i == 0:
                        self.S[i][j] = self.LL[i][j]
                    else:
                        self.S[i][j] = self.S[i-1][j] + self.LL[i][j]
            #タテに累積和
            for i in range(self.H):
                for j in range(self.W):
                    if j == 0:
                        self.S[i][j] = self.S[i][j]
                    else:
                        self.S[i][j] = self.S[i][j-1] + self.S[i][j]
    
    def getArea(self, excX, incX, excY, incY) -> int:
        '''
        exampl) excX = 1, excY = 0, incX = 3, incY = 2
                excX  incX
                0  1  2  3
        excY 0  x  x  x  x
             1  x  x  o  o
        incY 2  x  x  o  o
        '''
        areaAccumulate = self.S[incY][incX] - self.S[excY][incX] - self.S[incY][excX] + self.S[excY][excX]
        return areaAccumulate
    
    def printS(self) -> int:
        for i in range(self.H):
            print(self.S[i])

def solve(N: int, D: "List[List[int]]", Q: int, P: "List[int]"):
    ma = MatrixAccumulates(N, N)
    ma.setList(D)
    ma.build()
    # ma.printS()
    nums = [0] * (N ** 2 + 1)
    for ex in range(N):
        for ix in range(ex + 1, N + 1):
            for ey in range(N):
                for iy in range(ey + 1 , N + 1):
                    area = (ix - ex) * (iy - ey)
                    num = ma.getArea(ex, ix, ey, iy)
                    nums[area] = max(nums[area], num)
    for area in range(1, N ** 2 + 1):
        nums[area] = max(nums[area - 1], nums[area])
    for p in P:
        print(nums[p])
    # print(nums)


        

        

            
    return


# Generated by 2.6.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    D = [[int(next(tokens)) for _ in range(N)] for _ in range(N)]  # type: "List[List[int]]"
    Q = int(next(tokens))  # type: int
    P = [int(next(tokens)) for _ in range(Q)]  # type: "List[int]"
    solve(N, D, Q, P)

if __name__ == '__main__':
    main()
