#!/usr/bin/env python3
import sys


def solve(N: int, S: int, X: str):
    dp = [set() for _ in range(N + 1)]
    dp[-1].add(0)
    for i in reversed(range(N)):
        for r in range(7):
            if X[i] == "T" and ((r * 10) % 7 in dp[i + 1] or (r * 10 + int(S[i])) % 7 in dp[i + 1]):
                dp[i].add(r)
            elif X[i] == "A" and ((r * 10) % 7 in dp[i + 1] and (r * 10 + int(S[i])) % 7 in dp[i + 1]):
                dp[i].add(r)
    # for i in range(N + 1):
    #     print(dp[i])
    if 0 in dp[0]:
        print("Takahashi")
    else:
        print("Aoki")
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    S = str(next(tokens))  # type: int
    X = next(tokens)  # type: str
    solve(N, S, X)

if __name__ == '__main__':
    main()
