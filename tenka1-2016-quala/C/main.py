#!/usr/bin/env python3
import sys


def solve(N: int, A: "List[str]", B: "List[str]"):
    from collections import deque
    class Tree:
        def __init__(self, N) -> None:
            self.nodes = N
            self.seen = [0] * N
            self.G = [[] for _ in range(N)]
            self.degree = [0] * N # 各ノードの入次数
            return
        
        # 辺の追加
        def addEdge(self, fromNode: int, toNode: int, bothDirection: bool):
            self.G[fromNode].append(toNode)
            self.degree[toNode] += 1
            if bothDirection:
                self.G[toNode].append(fromNode)
                self.degree[fromNode] += 1
            
        
        def topologicalSort(self):
            topologicalOrder = [node for node in range(self.nodes) if self.degree[node] == 0] # 入次数0のものがスタート
            deq = deque(topologicalOrder)

            # 片っ端から入次数0のものを取り出していく。取り出すとそのノードから遷移するノードの入次数をデクリメントする。
            while deq:
                node = deq.popleft()
                for t in self.G[node]:
                    self.degree[t] -= 1
                    if self.degree[t] == 0:
                        deq.append(t)
                        topologicalOrder.append(t)
            if [i for i in range(self.nodes) if self.degree[i]]: # 最終的な入次数が0じゃないものが残る場合循環がある。
                return None
            return topologicalOrder

    # tr = Tree(26)
    # q = set("z")
    # for aa, bb in zip(A, B):
    #     for aaa, bbb in zip(aa, bb):
    #         if aaa != bbb:
    #             tr.addEdge(ord(aaa) - ord("a"), ord(bbb) - ord("a"), False)
    #             q.add(aaa)
    # for i in range(26):
    #     print(tr.G[i])
    # import string
    # for ch in string.ascii_lowercase:
    #     if ch in q:
    #         continue
    #     tr.addEdge(ord(ch) - ord("a"), ord(ch) + 1 - ord("a"), False)
    # l = tr.topologicalSort()
    # print(l)
    return


# Generated by 2.6.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [str()] * (N)  # type: "List[str]"
    B = [str()] * (N)  # type: "List[str]"
    for i in range(N):
        A[i] = next(tokens)
        B[i] = next(tokens)
    solve(N, A, B)

if __name__ == '__main__':
    main()
