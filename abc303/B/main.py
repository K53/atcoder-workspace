#!/usr/bin/env python3
import sys


def solve(N: int, M: int, a: "List[List[int]]"):
    f = [[0 for _ in range(N)] for _ in range(N)]
    for i in range(N):
        f[i][i] = 1
    for i in range(M):
        for j in range(N - 1):
            f[a[i][j] - 1][a[i][j + 1] - 1] = 1
            f[a[i][j + 1] - 1][a[i][j] - 1] = 1
    ans = 0
    # for i in range(N):
    #     print(f[i])
    for i in range(N):
        for j in range(N):
            if f[i][j] == 0:
                ans += 1
    print(ans // 2)
    
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    a = [[int(next(tokens)) for _ in range(N)] for _ in range(M)]  # type: "List[List[int]]"
    solve(N, M, a)

if __name__ == '__main__':
    main()
