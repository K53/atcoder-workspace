#!/usr/bin/env python3
import sys


def solve(X: int, Y: int, Z: int, S: str):
    dp = [[0 for _ in range(len(S) + 1)] for _ in range(2)]
    dp[1][0] = 10 ** 18
    for i in range(len(S)):
        # for cp in range(2):
        #cp0 = off cp1 = on
        if S[i] == "A":
            dp[0][i + 1] = min(dp[0][i] + Y, dp[1][i] + Z + Y)
            dp[1][i + 1] = min(dp[1][i] + X, dp[0][i] + Z + X)
        else:
            dp[0][i + 1] = min(dp[0][i] + X, dp[1][i] + Z + X)
            dp[1][i + 1] = min(dp[1][i] + Y, dp[0][i] + Z + Y)
    # for k in range(2):
    #     print(dp[k])
    #     print("--")
    
    print(min(dp[0][-1], dp[1][-1]))




    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    X = int(next(tokens))  # type: int
    Y = int(next(tokens))  # type: int
    Z = int(next(tokens))  # type: int
    S = next(tokens)  # type: str
    solve(X, Y, Z, S)

if __name__ == '__main__':
    main()
