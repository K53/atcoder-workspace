#!/usr/bin/env python3
import sys
sys.setrecursionlimit(10 ** 9)

# def solve(N: int, u: "List[int]", v: "List[int]"):
from sys import stdin
N = int(input())
G = [[] for _ in range(N)]
for _ in range(N - 1):
    u, v = map(int, stdin.readline().split())
    G[u - 1].append(v - 1)
    G[v - 1].append(u - 1)

ll = [0] * N
seen = [0] * N
ans = []
def dfs(cur):
    # print("--", cur)
    seen[cur] = 1
    isStar = 0
    visited = 0
    for next in G[cur]:
        if seen[next]:
            continue
        res = dfs(next)
        # print(res, cur)
        if res == 1:
            isStar = 1
        if res != -1:
            visited += 1

    
    if visited == 0:
        return 1 # 親は星になる
    
    if isStar == 1:
        ll[cur] = 1
        ans.append(len(G[cur]))
        return 0 # 親は星じゃない
    elif isStar == 0:
        return -1 # 結合処理された
    else:
        return 1
dfs(0)
# print(ll)
# ans = []
# for i in range(N):
#     if ll[i] == 1:
#         ans.append(len(G[i]))
ans.sort()
print(*ans)

# return


# # Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
# def main():
#     def iterate_tokens():
#         for line in sys.stdin:
#             for word in line.split():
#                 yield word
#     tokens = iterate_tokens()
#     N = int(next(tokens))  # type: int
#     u = [int()] * (N - 1)  # type: "List[int]"
#     v = [int()] * (N - 1)  # type: "List[int]"
#     for i in range(N - 1):
#         u[i] = int(next(tokens))
#         v[i] = int(next(tokens))
#     solve(N, u, v)

# if __name__ == '__main__':
#     main()
