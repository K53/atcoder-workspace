#!/usr/bin/env python3
import sys

YES = "Yes"  # type: str
NO = "No"  # type: str


def solve(N: int, M: int, H: int, K: int, S: str, x: "List[int]", y: "List[int]"):
    item = set()
    for xx, yy in zip(x, y):
        item.add((xx, yy))
    nowx, nowy = 0, 0
    life = H
    for i in range(N):
        life -= 1
        if S[i] == "R":
            nowx += 1
        if S[i] == "L":
            nowx -= 1
        if S[i] == "U":
            nowy += 1
        if S[i] == "D":
            nowy -= 1
        if life < 0:
            print(NO)
            return
        if (nowx, nowy) in item:
            if life < K:
                life = K
                item.remove((nowx, nowy))
        # print(life)
    print(YES)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    H = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    S = next(tokens)  # type: str
    x = [int()] * (M)  # type: "List[int]"
    y = [int()] * (M)  # type: "List[int]"
    for i in range(M):
        x[i] = int(next(tokens))
        y[i] = int(next(tokens))
    solve(N, M, H, K, S, x, y)

if __name__ == '__main__':
    main()
