#!/usr/bin/env python3
import sys
from itertools import combinations

def solve(N: int, D: int, X: "List[List[int]]"):
    ans = 0
    for k in combinations([i for i in range(N)], 2):
        sum = 0
        for j in range(D):
            sum += (X[k[0]][j] - X[k[1]][j]) ** 2
        if (sum ** 0.5).is_integer():
            ans += 1
    print(ans)
    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    D = int(next(tokens))  # type: int
    X = [[int(next(tokens)) for _ in range(D)] for _ in range(N)]  # type: "List[List[int]]"
    solve(N, D, X)

if __name__ == '__main__':
    main()
