#!/usr/bin/env python3
import sys


def solve(N: int, X: int, A: "List[int]"):
    ans = 10 ** 18
    for K in range(1, N + 1):
        # dp[i][j][k] i番目までにj個選んだ時にMOD Kでkになるものの最大値
        dp = [[[-1] * K for _ in range(K + 1)] for _ in range(N + 1)]
        dp[0][0][0] = 0
        for i in range(N):
            for j in range(K + 1):
                for kk in range(K):
                    if dp[i][j][kk] == -1:
                        continue
                    # 選ぶ
                    if j < K:
                        dp[i + 1][j + 1][(kk + A[i]) % K] = max(dp[i + 1][j + 1][(kk + A[i]) % K], dp[i][j][kk] + A[i])
                    # 選ばない
                    dp[i + 1][j][kk] = max(dp[i + 1][j][kk], dp[i][j][kk])
        if dp[-1][-1][X % K] == -1:
            continue
        ans = min(ans, (X - dp[-1][-1][X % K]) // K)
    print(ans)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    X = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, X, A)

if __name__ == '__main__':
    main()
