#!/usr/bin/env python3
import sys


def solve(N: int, M: int, X: int, Y: int, A: "List[int]", B: "List[int]", T: "List[int]", K: "List[int]"):
    import heapq
    INF = 10 ** 16
    # グラフ + 座標圧縮 の問題の場合、開始点と終了点を圧縮後の座標の集合に加え忘れないこと。
    class Dijkstra():
        def __init__(self, N: int) -> None:
            self.N = N 
            self.G = [[] for _ in range(N)]
            return
        
        # 辺の追加
        def addEdge(self, fromNode: int, toNode: int, cost: int, k: int):
            self.G[fromNode].append((cost, toNode, k))
            return
        
        def build(self, startNode: int):
            hq = []
            heapq.heapify(hq)
            # Set start info
            dist = [INF] * self.N
            # prev = [-1] * self.N # 経路復元する場合は移動時に直前の頂点や辺を記録して遷移していく。
            heapq.heappush(hq, (0, startNode))
            dist[startNode] = 0
            # dijkstra
            while hq:
                min_cost, now = heapq.heappop(hq)
                if min_cost > dist[now]:
                    continue
                for cost, next, k in self.G[now]:
                    ad = 0
                    if dist[now] % k != 0:
                        ad = k - (dist[now] % k)
                    if dist[next] > dist[now] + cost + ad:
                        dist[next] = dist[now] + cost + ad
                        # prev[next] = now # 頂点nextに至る直前の頂点を更新。
                        heapq.heappush(hq, (dist[next], next))
            return dist
    
    dk = Dijkstra(N)
    for aa, bb, tt, kk in zip(A, B, T, K):
        dk.addEdge(aa - 1, bb - 1, tt, kk)
        dk.addEdge(bb - 1, aa - 1, tt, kk)
    
    dist = dk.build(X - 1) 
    ans = dist[Y - 1]
    print(-1 if ans == INF else ans)

    
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    X = int(next(tokens))  # type: int
    Y = int(next(tokens))  # type: int
    A = [int()] * (M)  # type: "List[int]"
    B = [int()] * (M)  # type: "List[int]"
    T = [int()] * (M)  # type: "List[int]"
    K = [int()] * (M)  # type: "List[int]"
    for i in range(M):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
        T[i] = int(next(tokens))
        K[i] = int(next(tokens))
    solve(N, M, X, Y, A, B, T, K)

if __name__ == '__main__':
    main()
