#!/usr/bin/env python3
import sys
import heapq
INF = 10 ** 18

def f(k, c):
    if c % k == 0:
        return 0
    return k - c % k

class Dijkstra():
    def __init__(self, N: int) -> None:
        self.N = N 
        self.G = [[] for _ in range(N)]
        return
    
    # 辺の追加
    def addEdge(self, fromNode: int, toNode: int, cost: int, k: int):
        self.G[fromNode].append((cost, k, toNode))
        return
    
    def build(self, startNode: int):
        hq = []
        heapq.heapify(hq)
        # Set start info
        dist = [INF] * self.N
        # prev = [-1] * self.N # 経路復元する場合は移動時に直前の頂点や辺を記録して遷移していく。
        heapq.heappush(hq, (0, startNode))
        dist[startNode] = 0
        # dijkstra
        while hq:
            min_cost, now = heapq.heappop(hq)
            if min_cost > dist[now]:
                continue
            for cost, k, next in self.G[now]:
                if dist[next] > dist[now] + cost + f(k, min_cost):
                    dist[next] = dist[now] + cost + f(k, min_cost)
                    # prev[next] = now # 頂点nextに至る直前の頂点を更新。
                    heapq.heappush(hq, (dist[next], next))
        return dist

def solve(N: int, M: int, X: int, Y: int, A: "List[int]", B: "List[int]", T: "List[int]", K: "List[int]"):
    dk = Dijkstra(N)
    for a, b, t, k in zip(A, B, T, K):
        dk.addEdge(fromNode=a - 1, toNode=b - 1, cost=t, k=k)
        dk.addEdge(fromNode=b - 1, toNode=a - 1, cost=t, k=k)
    d = dk.build(startNode=X - 1)
    print(d[Y - 1] if d[Y - 1] != INF else -1)



# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    X = int(next(tokens))  # type: int
    Y = int(next(tokens))  # type: int
    A = [int()] * (M)  # type: "List[int]"
    B = [int()] * (M)  # type: "List[int]"
    T = [int()] * (M)  # type: "List[int]"
    K = [int()] * (M)  # type: "List[int]"
    for i in range(M):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
        T[i] = int(next(tokens))
        K[i] = int(next(tokens))
    solve(N, M, X, Y, A, B, T, K)

if __name__ == '__main__':
    main()
