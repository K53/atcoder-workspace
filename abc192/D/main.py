#!/usr/bin/env python3
import sys

def baseKto10int(baseKvalue: str, fromBase: int):
    """
    - fromBase : N進数
    - baseKvalue : N進数表記された数値
    ${fromBase}進数の数である${baseKvalue}を10進数で表した数値を得る。
    """
    ans = 0
    exp = 0
    baseKvalue = list(baseKvalue)
    for i in baseKvalue[::-1]:
        ans += int(i) * fromBase ** exp
        exp += 1
    return ans


def solve(X: str, M: int):
    if len(X) == 1:
        if int(X) > M:
            print(0)
            return
        print(1)
        return
    q = max([int(xx) for xx in X])
    if baseKto10int(X, q + 1) > M:
        print(0)
        return
    # True ------ ok | ng ---- False
    def is_ok(k: int):
        return baseKto10int(X, k) <= M   # 条件式

    def binSearch(ok: int, ng: int):
        # print(ok, ng)              # はじめの2値の状態
        while abs(ok - ng) > 1:     # 終了条件（差が1となり境界を見つけた時)
            mid = (ok + ng) // 2
            # print("target > ", mid)
            result = is_ok(mid)
            # print(result)
            if result:
                ok = mid            # midが条件を満たすならmidまではokなのでokの方を真ん中まで持っていく
            else:
                ng = mid            # midが条件を満たさないならmidまではngなのでngの方を真ん中まで持っていく
            # print(ok, ng)          # 半分に切り分ける毎の2値の状態
        return ok    # 関数呼び出し時の引数のngは絶対評価されないのでngに書く値が答えになりうるならその数マイナス1を指定する。

    l = binSearch(q + 1, M + 1)
    print(l - q)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    X = next(tokens)  # type: str
    M = int(next(tokens))  # type: int
    solve(X, M)

if __name__ == '__main__':
    main()
