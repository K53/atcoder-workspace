#!/usr/bin/env python3
from collections import defaultdict
import sys


def solve(x: "List[int]", y: "List[int]"):
    dx = defaultdict(int)
    dy = defaultdict(int)
    for xx, yy in zip(x, y):
        dx[xx] += 1
        dy[yy] += 1
    ans = []
    for k, v in dx.items():
        if v == 1:
            ans.append(k)
    for k, v in dy.items():
        if v == 1:
            ans.append(k)
    print(*ans, sep=" ")
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    x = [int()] * (3)  # type: "List[int]"
    y = [int()] * (3)  # type: "List[int]"
    for i in range(3):
        x[i] = int(next(tokens))
        y[i] = int(next(tokens))
    solve(x, y)

if __name__ == '__main__':
    main()
