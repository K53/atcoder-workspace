#!/usr/bin/env python3
import sys


def solve(N: int, K: int, X: int, A: "List[int]"):
    nums = []
    for aa in A:
        if K == 0:
            nums.append(aa)
            continue
        
        need, q = divmod(aa, X)
        if K > need:
            if q != 0:
                nums.append(q)
            K -= need
        elif K == need:
            if q != 0:
                nums.append(q)
            K = 0
        else:
            # Kしかだせない。
            if aa - K * X != 0:
                nums.append(aa - K * X)
            K = 0
    nums.sort(reverse=True)
    # print(nums)
    print(sum(nums[K:]))
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    X = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, K, X, A)

if __name__ == '__main__':
    main()
