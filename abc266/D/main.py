#!/usr/bin/env python3
import sys


def solve(N: int, T: "List[int]", X: "List[int]", A: "List[int]"):
    maxt = 10 ** 5 + 10
    dp = [[0 for _ in range(maxt)] for _ in range(5)]
    map = [[0 for _ in range(maxt)] for _ in range(5)]
    for tt, xx, aa in zip(T, X, A):
        map[xx][tt] = max(aa,  map[xx][tt])

    dp[0][0] = map[0][0]
    for tt in range(maxt - 1):
        for i in range(5):
            # if tt == 3 and i == 3:
            #    for i in range(5):
            #         print(dp[i])
            if tt == 0:
                if i == 1:
                    break
            if tt == 1:
                if i == 2:
                    break
            if tt == 2:
                if i == 3:
                    break
            if tt == 3:
                if i == 4:
                    break

            if i == 0:
                dp[i][tt + 1] = max(dp[i][tt + 1], dp[i][tt] + map[i][tt + 1])
                dp[i + 1][tt + 1] = max(dp[i + 1][tt + 1], dp[i][tt] + map[i + 1][tt + 1])
            elif i == 4:
                dp[i - 1][tt + 1] = max(dp[i - 1][tt + 1], dp[i][tt] + map[i - 1][tt + 1])
                dp[i][tt + 1] = max(dp[i][tt + 1], dp[i][tt] + map[i][tt + 1])
            else:
                dp[i - 1][tt + 1] = max(dp[i - 1][tt + 1], dp[i][tt] + map[i - 1][tt + 1])
                dp[i][tt + 1] = max(dp[i][tt + 1], dp[i][tt] + map[i][tt + 1])
                dp[i + 1][tt + 1] = max(dp[i + 1][tt + 1], dp[i][tt] + map[i + 1][tt + 1])
    # for i in range(5):
    #     print(map[i])
    
    # for i in range(5):
    #     print(dp[i])
    ans = 0
    for i in range(5):
        ans = max(ans, dp[i][-1])
    print(ans)


        

    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    T = [int()] * (N)  # type: "List[int]"
    X = [int()] * (N)  # type: "List[int]"
    A = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        T[i] = int(next(tokens))
        X[i] = int(next(tokens))
        A[i] = int(next(tokens))
    solve(N, T, X, A)

if __name__ == '__main__':
    main()
