#!/usr/bin/env python3
import sys

YES = "Yes"  # type: str
NO = "No"  # type: str

def outerProduct(A_x: int, A_y: int, B_x: int, B_y: int, C_x: int, C_y: int, D_x: int, D_y: int):
    """
    交差判定は2回行うこと
          .C                                .C
    A・--------・B    OR    A・--------・B
          .D                                .D
    """
    s = (B_x-A_x) * (C_y-A_y) - (C_x-A_x) * (B_y-A_y)
    t = (B_x-A_x) * (D_y-A_y) - (D_x-A_x) * (B_y-A_y) 
    return s * t # < 0 であれば線分ABに対して点Cと点Dは異なる方向にある。

# 線分の交差判定
def isCrossing(A_x: int, A_y: int, B_x: int, B_y: int, C_x: int, C_y: int, D_x: int, D_y: int):
    """
    線分ABとCDの交差判定
    """
    return outerProduct(A_x, A_y, B_x, B_y, C_x, C_y, D_x, D_y) < 0 and \
        outerProduct(C_x, C_y, D_x, D_y, A_x, A_y, B_x, B_y) < 0

def solve(A_x: int, A_y: int, B_x: int, B_y: int, C_x: int, C_y: int, D_x: int, D_y: int):
    print(YES if isCrossing(A_x, A_y, C_x, C_y, B_x, B_y, D_x, D_y) else NO)
    return
    
# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    A_x = int(next(tokens))  # type: int
    A_y = int(next(tokens))  # type: int
    B_x = int(next(tokens))  # type: int
    B_y = int(next(tokens))  # type: int
    C_x = int(next(tokens))  # type: int
    C_y = int(next(tokens))  # type: int
    D_x = int(next(tokens))  # type: int
    D_y = int(next(tokens))  # type: int
    solve(A_x, A_y, B_x, B_y, C_x, C_y, D_x, D_y)

if __name__ == '__main__':
    main()
