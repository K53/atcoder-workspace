#!/usr/bin/env python3
from math import acos, degrees, sqrt
import sys

YES = "Yes"  # type: str
NO = "No"  # type: str


# def f(x0, y0, x1, y1, x2, y2):
#     avx = x1 - x0
#     avy = y1 - y0
#     bvx = x2 - x0
#     bvy = y2 - x0
#     print(sqrt(avx ** 2 + bvx ** 2))
#     print(sqrt(avy ** 2 + bvy ** 2))
#     if (sqrt(avx ** 2 + bvx ** 2) * sqrt(avy ** 2 + bvy ** 2)) == 0:
#         return 90
#     q = (avx * bvx + avy * bvy) / (sqrt(avx ** 2 + bvx ** 2) * sqrt(avy ** 2 + bvy ** 2))
#     return degrees(acos(q))

# def intersect(p1, p2, p3, p4):
    # tc1 = (p1[0] - p2[0]) * (p3[1] - p1[1]) + (p1[1] - p2[1]) * (p1[0] - p3[0])
    # tc2 = (p1[0] - p2[0]) * (p4[1] - p1[1]) + (p1[1] - p2[1]) * (p1[0] - p4[0])
    # td1 = (p3[0] - p4[0]) * (p1[1] - p3[1]) + (p3[1] - p4[1]) * (p3[0] - p1[0])
    # td2 = (p3[0] - p4[0]) * (p2[1] - p3[1]) + (p3[1] - p4[1]) * (p3[0] - p2[0])
    # print(tc1, tc2, td1, td2)
    # return tc1*tc2<0 and td1*td2<0

def f(A_x: int, A_y: int, B_x: int, B_y: int, C_x: int, C_y: int, D_x: int, D_y: int):
    s = (B_x-A_x) * (C_y-A_y) - (C_x-A_x) * (B_y-A_y)
    t = (B_x-A_x) * (D_y-A_y) - (D_x-A_x) * (B_y-A_y) 
    return s * t < 0

def solve(A_x: int, A_y: int, B_x: int, B_y: int, C_x: int, C_y: int, D_x: int, D_y: int):
    c = 0
    if f(A_x, A_y, B_x, B_y, C_x, C_y, D_x, D_y): c += 1
    if f(A_x, A_y, C_x, C_y, D_x, D_y, B_x, B_y): c += 1
    if f(A_x, A_y, D_x, D_y, B_x, B_y, C_x, C_y): c += 1
    if c != 1:
        print(NO)
        return
    c = 0
    if f(B_x, B_y, C_x, C_y, D_x, D_y, A_x, A_y): c += 1
    if f(B_x, B_y, D_x, D_y, A_x, A_y, C_x, C_y): c += 1
    if f(B_x, B_y, A_x, A_y, C_x, C_y, D_x, D_y): c += 1
    if c != 1:
        print(NO)
        return
    c = 0
    if f(C_x, C_y, D_x, D_y, A_x, A_y, B_x, B_y): c += 1
    if f(C_x, C_y, A_x, A_y, B_x, B_y, D_x, D_y): c += 1
    if f(C_x, C_y, B_x, B_y, D_x, D_y, A_x, A_y): c += 1
    if c != 1:
        print(NO)
        return
    c = 0
    if f(D_x, D_y, A_x, A_y, B_x, B_y, C_x, C_y): c += 1
    if f(D_x, D_y, B_x, B_y, C_x, C_y, A_x, A_y): c += 1
    if f(D_x, D_y, C_x, C_y, A_x, A_y, B_x, B_y): c += 1
    if c != 1:
        print(NO)
        return
    print(YES)
    # print(intersect((A_x, A_y), (B_x, B_y), (C_x, C_y), (D_x, D_y)))


    
#     # print(f(A_x, A_y, B_x, B_y, C_x, C_y))
#     # print(f(A_x, A_y, B_x, B_y, D_x, D_y))
#     # return
#     x1, y1 = A_x, A_y
#     x2, y2 = B_x, B_y
#     x3, y3 = C_x, C_y
#     x4, y4 = D_x, D_y

#     b12x=x2-x1
#     b12y=y2-y1
#     b34x=x4-x3
#     b34y=y4-y3
#     b13x=x3-x1
#     b13y=y3-y1
#     b14x=x4-x1
#     b14y=y4-y1
#     b32x=x2-x3
#     b32y=y2-y3
#     b24x=x4-x2
#     b24y=y4-y2
# # /* 平面ベクトルをz成分が0の空間ベクトルとみなし、
# #    外積のz成分を計算する */ 
#     g1213=b12x*b13y-b13x*b12y
#     g1214=b12x*b14y-b14x*b12y
#     g3431=b34x*(-b13y)-(-b13x)*b34y
#     g3432=b34x*b32y-b32x*b34y
# # /* ベクトルの内積を計算する */ 
#     n1213=b12x*b13x+b12y*b13y
#     n1214=b12x*b14x+b12y*b14y
#     n3431=b34x*(-b13x)+b34y*(-b13y)
#     n3432=b34x*b32x+b34y*b32y
#     n2123=(-b12x)*(-b32x)+(-b12y)*(-b32y)
#     n2124=(-b12x)*b24x+(-b12y)*b24y
#     n4341=(-b34x)*(-b14x)+(-b34y)*(-b14y)
#     n4342=(-b34x)*(-b24x)+(-b34y)*(b24y)

# # /* ベクトルの外積の符号が違っていれば、交わっている */
#     if ((g1213<0 and g1214>0) or (g1213>0 and g1214<0)) and ((g3431<0 and g3432>0) or (g3431>0 and g3432<0)):
#         print(YES)
#         return
# # /* 線分の端が他方の線分上にあるので、交わっている */
#     if (g1213==0 and n1213>=0 and n2123>=0) or (g1214==0 and n1214>=0 and n2124>=0) or (g3431==0 and n3431>=0 and n4341>=0) or (g3432==0 and n3432>=0 and n4342>=0):
#         print(YES)
#         return
# # /* 交わっていない */ 
#     print(NO)
#     return

# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    A_x = int(next(tokens))  # type: int
    A_y = int(next(tokens))  # type: int
    B_x = int(next(tokens))  # type: int
    B_y = int(next(tokens))  # type: int
    C_x = int(next(tokens))  # type: int
    C_y = int(next(tokens))  # type: int
    D_x = int(next(tokens))  # type: int
    D_y = int(next(tokens))  # type: int
    solve(A_x, A_y, B_x, B_y, C_x, C_y, D_x, D_y)

if __name__ == '__main__':
    main()
