#!/usr/bin/env python3
import sys


def solve(N: int, X: "List[int]", Y: "List[int]"):
    dp = [[-(10 ** 18) for _ in range(N + 1)] for _ in range(2)]
    dp[0][0] = 0
    for i in range(N):
        if X[i] == 0:
            dp[0][i + 1] = max(dp[0][i] + Y[i], dp[0][i + 1]) # ダメ -> ok たべる
            dp[0][i + 1] = max(dp[1][i] + Y[i], dp[0][i + 1]) # ok -> ok たべる
            dp[0][i + 1] = max(dp[0][i], dp[0][i + 1]) # ok -> ok たべない
            dp[1][i + 1] = max(dp[1][i], dp[1][i + 1]) # ダメ -> ダメ たべない
        else: # 毒入り
            dp[1][i + 1] = max(dp[0][i] + Y[i], dp[1][i + 1]) # ok -> ダメ たべる
            dp[0][i + 1] = max(dp[0][i], dp[0][i + 1]) # ok -> ok たべない
            dp[1][i + 1] = max(dp[1][i], dp[1][i + 1]) # ダメ -> ダメ たべない
    # print(dp[0])
    # print(dp[1])
    print(max(dp[0][-1], dp[1][-1]))
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    X = [int()] * (N)  # type: "List[int]"
    Y = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        X[i] = int(next(tokens))
        Y[i] = int(next(tokens))
    solve(N, X, Y)

if __name__ == '__main__':
    main()
