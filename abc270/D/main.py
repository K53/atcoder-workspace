#!/usr/bin/env python3
import sys
import bisect

def solve(N: int, K: int, A: "List[int]"):
    A = sorted(A)
    m = min(A)
    l = []
    while N >= m:
        idx = bisect.bisect_right(A, N)
        N -= A[idx - 1]
        l.append(A[idx - 1])
    ans = 0
    for i in range(len(l)):
        if i % 2 == 0:
            ans += l[i]
    print(ans)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(K)]  # type: "List[int]"
    solve(N, K, A)

if __name__ == '__main__':
    main()
