#!/usr/bin/env python3
import sys
from collections import defaultdict
INF = 10 ** 16

class UnionFind():
    def __init__(self, n):
        self.n = n
        self.group_num = n
        self.parents = [-1] * n # サイズ

    def find(self, x):
        """ 要素xの親を取得。"""
        if self.parents[x] < 0:
            return x
        else:
            self.parents[x] = self.find(self.parents[x]) # 経路圧縮
            return self.parents[x]

    def union(self, x, y):
        """ 2つの要素の併合。"""
        x = self.find(x)
        y = self.find(y)

        if x == y:
            return

        if self.parents[x] > self.parents[y]:
            x, y = y, x

        self.parents[x] += self.parents[y]
        self.parents[y] = x
        self.group_num -= 1
        return

    def size(self, x):
        """ 要素xの属する集合の要素数を取得。"""
        return -self.parents[self.find(x)]

    def same(self, x, y):
        """ 2つの要素が同一の集合に属するか。"""
        return self.find(x) == self.find(y)

    def members(self, x):
        """ 要素xと同一の集合の要素を全取得。
        計算量 : O(N)
        """
        root = self.find(x)
        return [i for i in range(self.n) if self.find(i) == root]

    def roots(self):
        """ 各集合の根を全取得。
        計算量 : O(N)
        """
        return [i for i, x in enumerate(self.parents) if x < 0]

    def group_count_v2(self):
        """ 集合の個数を取得。 v2
        計算量 : O(1)
        """
        return self.group_num

    def group_count_v1(self):
        """ 集合の個数を取得。 v1
        計算量 : O(N)
        """
        return len(self.roots())

    def all_group_members(self):
        """ 全集合の要素一覧を取得。
        計算量 : O(N)
        """
        group_members = defaultdict(list)
        for member in range(self.n):
            group_members[self.find(member)].append(member)
        return group_members

    def __str__(self):
        return '\n'.join(f'{r}: {m}' for r, m in self.all_group_members().items())

class Kruskal():
    def __init__(self, N: int) -> None:
        # self.minimumG = [[] for _ in range(N)] # 全域最小木自体が欲しい場合にはこれを有効にする。
        self.N = N
        self.edges = []
        self.uf =  UnionFind(N)
        self.minimunCost = 0 # 最小全域木を構成する全体のコストの総和の最小。
        return
    
    def addEdge(self, a: int, b: int, cost: int):
        self.edges.append((cost, a, b))
        self.edges.append((cost, b, a))
        return
    
    def build(self):
        for cost, a, b in sorted(self.edges):
            if self.uf.same(a, b):
                continue
            minimunCost += cost
            self.uf.union(a, b)
            # --- 全域最小木自体を構築 ---
            # self.minimumG[a].append(b)
            # self.minimumG[b].append(a)
        return minimunCost
    
    def build2(self):
        for cost, a, b in sorted(self.edges):
            if a == self.N or b == self.N:
                continue
            if self.uf.same(a, b):
                continue
            self.minimunCost += cost
            self.uf.union(a, b)
            # --- 全域最小木自体を構築 ---
            # self.minimumG[a].append(b)
            # self.minimumG[b].append(a)
        return self.minimunCost
    
    def build3(self):
        for cost, a, b in sorted(self.edges):
            if a == self.N + 1 or b == self.N + 1:
                continue
            if self.uf.same(a, b):
                continue
            self.minimunCost += cost
            self.uf.union(a, b)
            # --- 全域最小木自体を構築 ---
            # self.minimumG[a].append(b)
            # self.minimumG[b].append(a)
        return self.minimunCost
    
    def build4(self):
        for cost, a, b in sorted(self.edges):
            if a == self.N or b == self.N:
                continue
            if a == self.N + 1 or b == self.N + 1:
                continue
            if self.uf.same(a, b):
                continue
            self.minimunCost += cost
            self.uf.union(a, b)
            # --- 全域最小木自体を構築 ---
            # self.minimumG[a].append(b)
            # self.minimumG[b].append(a)
        if self.uf.group_num != 1:
            return INF
        return self.minimunCost

def solve(N: int, M: int, X: "List[int]", Y: "List[int]", A: "List[int]", B: "List[int]", Z: "List[int]"):
    # N : 空港
    # N+1 : 港
    tree = Kruskal(N + 2)
    for i in range(N):
        tree.addEdge(i, N, X[i])
        tree.addEdge(i, N + 1, Y[i])
    for aa, bb, zz in zip(A, B, Z):
        tree.addEdge(aa - 1, bb - 1, zz)
    ans = INF
    b1 = tree.build()
    b2 = tree.build2()
    b3 = tree.build3()
    b4 = tree.build4()
    print(b1, b2, b3, b4)


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    X = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    Y = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    A = [int()] * (M)  # type: "List[int]"
    B = [int()] * (M)  # type: "List[int]"
    Z = [int()] * (M)  # type: "List[int]"
    for i in range(M):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
        Z[i] = int(next(tokens))
    solve(N, M, X, Y, A, B, Z)

if __name__ == '__main__':
    main()
