#!/usr/bin/env python3
import sys
import bisect

def solve(N: int, M: int, L: int, a: "List[int]", b: "List[int]", c: "List[int]", d: "List[int]"):
    A = sorted(a)
    B = sorted(b)
    ngs = sorted([a[cc - 1] + b[dd - 1] for cc, dd in zip(c, d)])
    # True ------ ok | ng ---- False
    def is_ok(k: int):
        num_higher_ng = L - bisect.bisect_left(ngs, k)
        num_higher_ok = -num_higher_ng
        for aa in A:
            rest = k - aa
            if rest < 0:
                continue
            num_higher_ok += M - bisect.bisect_left(B, rest)
        # 10 20 30 40


        # 31 30 29 28
        # 0  2  2  2
        #print(num_higher_ng, num_higher_ok, "##")
        return num_higher_ok > 0

    def binSearch(ok: int, ng: int):
        #print(ok, ng)              # はじめの2値の状態
        while abs(ok - ng) > 1:     # 終了条件（差が1となり境界を見つけた時)
            mid = (ok + ng) // 2
            #print("target > ", mid)
            result = is_ok(mid)
            #print(result)
            if result:
                ok = mid            # midが条件を満たすならmidまではokなのでokの方を真ん中まで持っていく
            else:
                ng = mid            # midが条件を満たさないならmidまではngなのでngの方を真ん中まで持っていく
            #print(ok, ng)          # 半分に切り分ける毎の2値の状態
        return ok    # 関数呼び出し時の引数のngは絶対評価されないのでngに書く値が答えになりうるならその数マイナス1を指定する。
    ans = binSearch(0, 10 ** 19)
    # ans = binSearch(0, 40)
    print(ans)
    return


# Generated by 2.13.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    L = int(next(tokens))  # type: int
    a = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    b = [int(next(tokens)) for _ in range(M)]  # type: "List[int]"
    c = [int()] * (L)  # type: "List[int]"
    d = [int()] * (L)  # type: "List[int]"
    for i in range(L):
        c[i] = int(next(tokens))
        d[i] = int(next(tokens))
    solve(N, M, L, a, b, c, d)

if __name__ == '__main__':
    main()
