#!/usr/bin/env python3
import sys
from collections import Counter
from itertools import accumulate

def solve(N: int, A: "List[int]"):
    d = Counter(A)
    S = sorted(list(set(A)))
    acc = [0] + list(accumulate(sorted(A)))
    total = acc[-1]
    idx = 0
    ans = {
        S[-1]: 0
    }
    for num in S[:-1]:
        idx += d[num]
        ans[num] = total - acc[idx]
    print(*[ans[aa] for aa in A])
    
        
    return
    


# Generated by 2.13.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, A)

if __name__ == '__main__':
    main()
