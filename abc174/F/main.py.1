#!/usr/bin/env python3
# import sys

# class BIT:
#     def __init__(self, N):
#         self.N = N
#         self.tree = [0] * (self.N + 1) # 1-indexedのため
        
#     def add(self, pos, val):
#         '''Add : A[pos] = val '''
#         i = pos + 1 # convert from 0-index to 1-index
#         while i <= self.N:
#             self.tree[i] += val
#             i += i & -i

#     def sum(self, pos):
#         ''' Return Sum(A[1], ... , A[pos])'''
#         res = 0
#         i = pos + 1 # convert from 0-index to 1-index
#         while i > 0:
#             res += self.tree[i]
#             # res %= MOD
#             i -= i & -i    
#         return res


# # # 転倒数
# # l = [3, 0, 5, 4, 2]
# # bit = BIT(6)
# # ans = 0

# # # 既出のもの(=自分より左側のもの)からBITに記入されることを利用している。
# # # 大小比較のIFとかがないのもその理由。
# # for i in range(len(l)):
# #     val = l[i]
# #     print(bit.tree[1:])
# #     print(val, ":",  bit.sum(val)) # 今の位置iよりも左側に、今の位置の数valよりも大きい数は何個あるか。
# #     ans += i - bit.sum(val) 
# #     bit.add(val, 1)

# # print(bit.tree[1:])
# # print(ans)




# def solve(N: int, Q: int, c: "List[int]", l: "List[int]", r: "List[int]"):
#     bt = BIT(N)
#     query = []
#     for i in range(Q):
#         query.append((r[i], l[i], i))
#     query.sort()
#     print(query)
    
#     for i in range(N):
#         bt.add()
        

#     return


# # Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
# def main():
#     def iterate_tokens():
#         for line in sys.stdin:
#             for word in line.split():
#                 yield word
#     tokens = iterate_tokens()
#     N = int(next(tokens))  # type: int
#     Q = int(next(tokens))  # type: int
#     c = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
#     l = [int()] * (Q)  # type: "List[int]"
#     r = [int()] * (Q)  # type: "List[int]"
#     for i in range(Q):
#         l[i] = int(next(tokens))
#         r[i] = int(next(tokens))
#     solve(N, Q, c, l, r)

# if __name__ == '__main__':
#     main()

import sys
input = sys.stdin.readline

class Bit:
    def __init__(self, n):
        self.size = n
        self.tree = [0] * (n + 1)
 
    def sum(self, i):
        s = 0
        while i > 0:
            s += self.tree[i]
            i -= i & -i
        return s
 
    def add(self, i, x):
        while i <= self.size:
            self.tree[i] += x
            i += i & -i

# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    N,Q = map(int,input().split())
    c = list(map(int,input().split()))
    regions = []
    lp = [-1] * (N+1)

    bit = Bit(N+1)

    for i in range(len(c)):
        cc = c[i]
        if lp[cc] == -1:
            lp[cc] = i
        else:
            s = lp[cc]
            t = i
            regions.append((s,t,-1))
            lp[cc] = t
    qps = []
    for i in range(Q):
        l,r = map(int,input().split())
        qps.append((l-1,r-1,i))
    qps.sort(key=lambda x: x[0])
    regions.sort(key=lambda x: x[0])
    query_result = [0] * Q
    # print("points",regions)
    qp = len(qps)-1
    pp = len(regions) -1
    while qp>=0:
        s = 0
        t = 0
        k = 0
        is_query = False
        if pp >= 0:
            if regions[pp][0] >= qps[qp][0]:
                s,t,k = regions[pp]
                pp -= 1
            else:
                s,t,k = qps[qp]
                qp -= 1
                is_query = True
        else:
            s,t,k = qps[qp]
            qp -= 1
            is_query = True
        if not is_query:
            # この時は点を追加するべき
            # print("p",np)
            # points.append(np[1])
            bit.add(t,1)
        else:
            result = t - s + 1 
            cnt = bit.sum(t)
            # print("cr",points,cnt)
            query_result[k] = result - cnt
    print(*query_result,sep="\n")

if __name__ == '__main__':
    main()
