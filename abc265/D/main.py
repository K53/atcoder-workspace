#!/usr/bin/env python3
from itertools import accumulate
import sys

YES = "Yes"  # type: str
NO = "No"  # type: str




def solve(N: int, P: int, Q: int, R: int, A: "List[int]"):
    acc = A#list(accumulate(A))
    def twop(lr: int, border: int):
        sum = 0
        r = lr
        l = lr
        for _ in range(N):
            # 行けるだけrを進める。sumが条件を満たさなくなったところで抜ける。※抜ける時、条件を満たさなくなったrの次を指している。
            while r < N and sum < border:
                # print("#", l, r, sum)
                sum += acc[r]
                # print(l, r)
                r += 1
                # print(l, r, sum)
            if sum == border:
                # OK
                # print(l, r)
                return (l, r)
            # → 条件を満たしていない状態をlを進めることで修正する。
            # ifの前でansに対する更新を試みてはいけない理由→この時点では条件を満たしていないから。
            # ifを構えるのはwhileを抜ける理由がrの上限だった場合。lを縮める必要がないから。
            if l == r:
                l += 1
                r += 1
                continue
            if sum > border:
                # print(">", l, r, sum) # rを含まないのでr=N+1までは来る。
                sum -= acc[l]
                l += 1
        return (-1, -1)
    
    nextr = 0
    for i in [P, Q, R]:
        # print("-", nextr, i)
        l, r = twop(nextr, i)
        if l == r == -1:
            print(NO)
            return
        nextr = r# + 1
    print(YES)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    P = int(next(tokens))  # type: int
    Q = int(next(tokens))  # type: int
    R = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, P, Q, R, A)

if __name__ == '__main__':
    main()
