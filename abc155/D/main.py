#!/usr/bin/env python3
import sys
import bisect

def solve(N: int, K: int, A: "List[int]"):
    A.sort()
    pos, neg = [], []
    negative_end = bisect.bisect_left(A, 0)
    positive_start = bisect.bisect_right(A, 0)
    neg = A[:negative_end]
    pos = A[positive_start:]
    count_negative = len(neg)
    count_positive = len(pos)
    count_zero = N - count_negative - count_positive
    # print(count_negative, count_positive, count_zero)
    # print(neg)
    # print(pos)

    # 答えが負
    if K <= count_negative * count_positive:
        pass
    # 答えが0
    elif K <= count_negative * count_positive + count_zero:
        print(0)
        return
    # 答えが正
    else:
        def is_ok(k: int):
            count = 0
            for pp in pos:
                # bisect_leftでは一致した時(b = k // aa)にカウントし落とす。
                # k / a <- 小数にはしない。浮動小数点の問題で前後が正確に測れない。
                count += bisect.bisect_right(pos, k // pp)
                if pp ** 2 <= k:
                    count -= 1
            return count < K

        def binSearch(ok: int, ng: int):
            # print(ok, ng)              # はじめの2値の状態
            while abs(ok - ng) > 1:     # 終了条件（差が1となり境界を見つけた時)
                mid = (ok + ng) // 2
                # print("target > ", mid)
                result = is_ok(mid)
                # print(result)
                if result:
                    ok = mid            # midが条件を満たすならmidまではokなのでokの方を真ん中まで持っていく
                else:
                    ng = mid            # midが条件を満たさないならmidまではngなのでngの方を真ん中まで持っていく
                # print(ok, ng)          # 半分に切り分ける毎の2値の状態
            return ng    
        print(binSearch(-(10 ** 18) - 1, 10 ** 18 + 1))       

    return

# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, K, A)

if __name__ == '__main__':
    main()
