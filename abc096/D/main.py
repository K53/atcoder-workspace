#!/usr/bin/env python3
import sys
from itertools import combinations
class Eratosthenes():
    """ 素数列挙
    計算量 : O(NloglogN)
    """
    def __init__(self, N: int) -> None:
        self.primeTable = [True] * (N + 1) # 数iが素数かどうかのフラグ
        self.primeTable[0] = False
        self.primeTable[1] = False
        self.minfactor = [0] * (N + 1) # 数iの最小の素因数
        self.minfactor[1] = 1
        self.primes = []    # 数Nまでの素数のリスト
        for p in range(2, N + 1):  # p : 判定対象の数
            if not self.primeTable[p]:
                continue
            self.minfactor[p] = p
            self.primes.append(p)
            # pが素数のためそれ以降に出現するpの倍数を除外する。
            # なお、ループはp始まりでも良いが、p * _ のかける側はすでに同じ処理で弾かれているはずのため無駄。
            for i in range(p * p, N + 1, p):
                if self.minfactor[i] == 0:
                    self.minfactor[i] = p
                self.primeTable[i] = False
        return
    
    """ 素数判定
    計算量 : 0(1)
    """
    def isPrime(self, n: int) -> bool:
        return self.primeTable[n]

def solve(N: int):
    a = []
    er = Eratosthenes(55555 + 1)
    for i in  er.primes:
        if i % 5 == 1:
            a.append(i)
            if len(a) == N:
                print(*a, sep=" ")
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    solve(N)

if __name__ == '__main__':
    main()
