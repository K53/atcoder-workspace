#!/usr/bin/env python3
import sys


def solve(N: int, u: "List[int]", v: "List[int]", w: "List[int]"):
    from collections import deque
    def bfs(edges: "(List[to], cost)", start_node: int) -> list:
        INF = 10 ** 16
        q = deque()
        dist = [INF] * len(edges)
        q.append(start_node)
        dist[start_node] = 0
        while q:
            now = q.popleft()
            for next in edges[now]:
                if dist[next[0]] != INF:
                    continue
                q.append(next[0])
                dist[next[0]] = dist[now] + next[1]
        return dist
    tree = [[] for _ in range(N)]
    for i in range(N - 1):
        tree[u[i] - 1].append((v[i] - 1, w[i]))
        tree[v[i] - 1].append((u[i] - 1, w[i]))
    d = bfs(tree, 0)
    for i in d:
        if i % 2 == 0:
            print(0)
        else:
            print(1)
    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    u = [int()] * (N - 1)  # type: "List[int]"
    v = [int()] * (N - 1)  # type: "List[int]"
    w = [int()] * (N - 1)  # type: "List[int]"
    for i in range(N - 1):
        u[i] = int(next(tokens))
        v[i] = int(next(tokens))
        w[i] = int(next(tokens))
    solve(N, u, v, w)

if __name__ == '__main__':
    main()
