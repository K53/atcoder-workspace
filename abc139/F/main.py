#!/usr/bin/env python3
import sys
from itertools import accumulate
from functools import cmp_to_key
def sortedByDegree(points: "list[tuple(int, int)]"):
    """
    input : [(x_0, y_0), (x_1, y_1), ...]
    (0, 0)を含まないこと。
    """
    # print("contaminated by (0, 0)?")
    def _getQuadrant(x, y):
        if y >= 0:
            if x >= 0: return 1
            else: return 2
        else:
            if x <= 0: return 3
            else: return 4
 
    def _comparePointsFunc(p, q):
        p_quadrant = _getQuadrant(*p)
        q_quadrant = _getQuadrant(*q)
        if p_quadrant == q_quadrant:
            px, py = p
            qx, qy = q
            op = px * qy - py * qx # 外積
            if op > 0:
                return -1 
            if op < 0:
                return 1
            else:
                return 0
        else:
            return -1 if p_quadrant < q_quadrant else 1
             
    return sorted(points, key = cmp_to_key(_comparePointsFunc))

def solve(N: int, x: "List[int]", y: "List[int]"):
    xy = sortedByDegree([(xx, yy) for xx, yy in zip(x, y) if not xx == yy == 0]) * 2
    N = len(xy) // 2
    ans = 0

    ## greedy
    for s in range(N):
        sxx, syy = 0, 0
        for d in range(N):
            dx, dy = xy[s + d]
            sxx += dx
            syy += dy
            # print(ans)
            ans = max(ans, (sxx ** 2 + syy ** 2) ** 0.5)

    print(ans)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    x = [int()] * (N)  # type: "List[int]"
    y = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        x[i] = int(next(tokens))
        y[i] = int(next(tokens))
    solve(N, x, y)

if __name__ == '__main__':
    main()
