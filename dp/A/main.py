#!/usr/bin/env python3
import sys
INF = 10 ** 12

def solve(N: int, h: "List[int]"):
    costs = [INF] * N
    costs[0], costs[1] = 0, abs(h[0] - h[1])
    for i in range(2, N):
        costs[i] = min((costs[i - 1] + abs(h[i - 1] - h[i])), (costs[i - 2] + abs(h[i - 2] - h[i])))
    print(costs[N - 1])
    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    h = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, h)

if __name__ == '__main__':
    main()
