#!/usr/bin/env python3
import sys
INF = 10 ** 12


def solve(N: int, a: "List[int]", b: "List[int]", c: "List[int]"):
    dp = []
    dp.append([a[0], b[0], c[0]])
    for _ in range(N - 1):
        dp.append([-INF] * 3)
    
    # dp
    for i in range(1, N):
        dp[i][0] = max(dp[i][0], dp[i - 1][1] + a[i])
        dp[i][0] = max(dp[i][0], dp[i - 1][2] + a[i])

        dp[i][1] = max(dp[i][1], dp[i - 1][0] + b[i])
        dp[i][1] = max(dp[i][1], dp[i - 1][2] + b[i])

        dp[i][2] = max(dp[i][2], dp[i - 1][0] + c[i])
        dp[i][2] = max(dp[i][2], dp[i - 1][1] + c[i])

    print(max(dp[N - 1]))
    return

# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    a = [int()] * (N)  # type: "List[int]"
    b = [int()] * (N)  # type: "List[int]"
    c = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        a[i] = int(next(tokens))
        b[i] = int(next(tokens))
        c[i] = int(next(tokens))
    solve(N, a, b, c)

if __name__ == '__main__':
    main()
