#!/usr/bin/env python3
import sys


# 
# dp[{i個目まで選択可能な時}][{重さwまで選択可能な時}] = {最大価値}
# 品物、重さ共に0-Indexedで用意するため大きさはdp[N+1][W+1]
# ただし、0-Indexedでやると品物の番号ととずれるので注意。
#   = i個目の品物の取る取らないを判別した結果はdp[i+1]の列に書き込むことになる。
#
def solve(N: int, W: int, w: "List[int]", v: "List[int]"):
    dp = []
    for _ in range(N + 1):
        dp.append([0] * (W + 1))

    for i in range(N):
        for j in range(W + 1):
            if j - w[i] < 0:
                dp[i + 1][j] = dp[i][j]
            else:
                dp[i + 1][j] = max(dp[i][j], dp[i][j - w[i]] + v[i])

    print(dp[-1][-1])
    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    W = int(next(tokens))  # type: int
    w = [int()] * (N)  # type: "List[int]"
    v = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        w[i] = int(next(tokens))
        v[i] = int(next(tokens))
    solve(N, W, w, v)

if __name__ == '__main__':
    main()
