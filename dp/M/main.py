#!/usr/bin/env python3
import sys

MOD = 1000000007  # type: int


def solve(N: int, K: int, a: "List[int]"):
    if sum(a) < K:
        print(0)
        return
    dp = [[1] * (N + 1)] + [[0] * (N + 1) for _ in range(K)]
    for i in range(1, K + 1):
        for j in range(1, N + 1):
            for k in range(a[j - 1]):
                if i - k < 0:
                    continue
                dp[i][j] = (dp[i][j] + dp[i - k][j]) % MOD
    print(dp[K][N])
    # for i in range(K + 1):
    #     print(dp[i])
            
    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    a = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, K, a)

if __name__ == '__main__':
    main()
