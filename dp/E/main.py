#!/usr/bin/env python3
import sys
INF = 10 ** 12

# 
# dp[{i個目まで選択可能な時}][{価値vになる時}] = {最小の重さ}
# 品物、重さ共に0-Indexedで用意するため大きさはdp[N+1][{品物の中で最大の価値}*N+1]
# ただし、0-Indexedでやると品物の番号ととずれるので注意。
#   = i個目の品物の取る取らないを判別した結果はdp[i+1]の列に書き込むことになる。
#
def solve(N: int, W: int, w: "List[int]", v: "List[int]"):
    dp = []
    v_max = max(v)
    for _ in range(N + 1):
        dp.append([INF] * (v_max * N + 1))
    dp[0][0] = 0

    for i in range(N):
        for j in range(v_max * N + 1):
            dp[i + 1][j] = dp[i][j] if j - v[i] < 0 else min(dp[i][j], dp[i][j - v[i]] + w[i])

    for i in reversed(range(len(dp[N]))):
        if dp[N][i] <= W:
            print(i)
            return
    
    return



# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    W = int(next(tokens))  # type: int
    w = [int()] * (N)  # type: "List[int]"
    v = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        w[i] = int(next(tokens))
        v[i] = int(next(tokens))
    solve(N, W, w, v)

if __name__ == '__main__':
    main()
