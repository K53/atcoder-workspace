#!/usr/bin/env python3
import sys

def solve(N: int, W: int, w: "List[int]", v: "List[int]"):
    INF = 10 ** 14
    dp = [[INF] * (10 ** 5 + 1) for _ in range(N + 1)]
    dp[0][0] = 0
    for i in range(1, N + 1):
        for j in range(10 ** 5 + 1):
            ww, vv = w[i - 1], v[i - 1]
            dp[i][j] = min(dp[i - 1][j], dp[i][j])
            if j + vv < 10 ** 5 + 1:
                dp[i][j + vv] = min(dp[i - 1][j] + ww, dp[i][j + vv])
    ans = 0
    for i, val in enumerate(dp[-1]):
        if val <= W:
            ans = i
    print(ans)
    return

# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    W = int(next(tokens))  # type: int
    w = [int()] * (N)  # type: "List[int]"
    v = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        w[i] = int(next(tokens))
        v[i] = int(next(tokens))
    solve(N, W, w, v)

if __name__ == '__main__':
    main()
