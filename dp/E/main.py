#!/usr/bin/env python3
import sys
INF = 10 ** 12


def solve(N: int, W: int, w: "List[int]", v: "List[int]"):
    INF = 10 ** 14
    dp = [[INF] * (10 ** 5 + 1) for _ in range(N + 1)]
    dp[0][0] = 0
    for i in range(N):
        for j in range(10 ** 5 + 1):
            if dp[i][j] == INF:
                continue
            # i番目を選ばない
            dp[i + 1][j] = min(dp[i][j], dp[i + 1][j])
            # i番目を選ぶ
            if j + v[i] < 10 ** 5 + 1:
                dp[i + 1][j + v[i]] = dp[i][j] + w[i]

    for i in reversed(range(10 ** 5 + 1)):
        if dp[N][i] <= W:
            print(i)
            return
    return

# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    W = int(next(tokens))  # type: int
    w = [int()] * (N)  # type: "List[int]"
    v = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        w[i] = int(next(tokens))
        v[i] = int(next(tokens))
    solve(N, W, w, v)

if __name__ == '__main__':
    main()
