#!/usr/bin/env python3
import sys


def solve(H: int, W: int, A: "List[List[int]]"):
    ans = 0
    has = set()
    def dfs(cur_x, cur_y):
        # print(cur_x, cur_y)
        nonlocal ans
        if A[cur_y][cur_x] in has:
            return

        if cur_x == W - 1 and cur_y == H - 1:
            ans += 1
            # print("##")
        
        has.add(A[cur_y][cur_x])
        if cur_y + 1 < H:
            dfs(cur_x, cur_y + 1)
        if cur_x + 1 < W:
            dfs(cur_x + 1, cur_y)
        has.remove(A[cur_y][cur_x])
        return
    
    dfs(0, 0)
    print(ans)
    return
        
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    H = int(next(tokens))  # type: int
    W = int(next(tokens))  # type: int
    A = [[int(next(tokens)) for _ in range(W)] for _ in range(H)]  # type: "List[List[int]]"
    solve(H, W, A)

if __name__ == '__main__':
    main()
