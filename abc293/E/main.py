#!/usr/bin/env python3
import sys
import math
# 拡張ユークリッドの互除法
# ax + by = gcd(a, b) を満たす整数(a,b)の組を求める。
def ext_gcd(a: int, b: int):
    if a == 0: return (0, 1, b)
    else:
        (X, Y, g) = ext_gcd(b % a, a)
        return (Y - (b // a) * X, X, g)

def getInverse(A: int, mod: int):
    x, _, g = ext_gcd(A, mod)
    if g != 1: return -1 # no inverse exists
    return x % mod

def solve(A: int, X: int, M: int):
    ol = M
    aa = A - 1
    bb = pow(A, X, M) - 1
    g = math.gcd(math.gcd(aa, bb), M)
    aa, bb, M = aa//g, bb//g, M//g
    inv = getInverse(aa, M)
    if g != 1:
        M = ol
    ans = (bb * inv) % M
    print(ans)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    A = int(next(tokens))  # type: int
    X = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    solve(A, X, M)

if __name__ == '__main__':
    main()
