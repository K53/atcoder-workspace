#!/usr/bin/env python3
import sys
INF = 10 ** 16

def solve(N: int, M: int, K: int, A: "List[int]", B: "List[int]", C: "List[int]", E: "List[int]"):
    G = [[] for _ in range(N)]
    pathes = []
    for i in range(M):
        G[A[i] - 1].append((B[i] - 1, C[i]))
        pathes.append((A[i] - 1, B[i] - 1, C[i]))
    d = [INF for _ in range(N)]
    d[0] = 0

    for i in range(K):
        src, dest, cost = pathes[E[i] - 1]
        if d[src] == INF:
            continue
        d[dest] = min(d[src] + cost, d[dest])
    print(-1 if d[-1] == INF else d[-1])



    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    A = [int()] * (M)  # type: "List[int]"
    B = [int()] * (M)  # type: "List[int]"
    C = [int()] * (M)  # type: "List[int]"
    for i in range(M):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
        C[i] = int(next(tokens))
    E = [int(next(tokens)) for _ in range(K)]  # type: "List[int]"
    solve(N, M, K, A, B, C, E)

if __name__ == '__main__':
    main()
