#!/usr/bin/env python3
import sys

def solve(A: int, B: int, K: int):
    def cmb(n, r):
        if n - r < r: r = n - r
        if r == 0: return 1
        if r == 1: return n
    
        numerator = [n - r + k + 1 for k in range(r)]
        denominator = [k + 1 for k in range(r)]
        for p in range(2,r + 1):                    # p番目について、
            pivot = denominator[p - 1]              # pivotで約分を試みる。
            if pivot > 1:                           # ただし、pivotが1、すなわちすでに割り尽くされているならp番目は飛ばす。
                offset = (n - r) % p
                for k in range(p-1,r,p):            # p番目を約分できるということはp番目からpの倍数番目も約分可能なので実施する。
                    numerator[k - offset] //= pivot
                    denominator[k] //= pivot
    
        result = 1
        for k in range(r):
            if numerator[k] > 1:
                result *= int(numerator[k])
        return result

    ans = []
    while True:
        if A == 0:  # 残り全てB
            ans.extend(["b"] * B)
            break
        if B == 0:  # 残り全てA
            ans.extend(["a"] * A)
            break
        numAx = cmb(A - 1 + B, A - 1)
        if K > numAx:   # Bxx
            K -= numAx
            B -= 1
            ans.append("b")
        else:           # Axx
            A -= 1
            ans.append("a")
    print(*ans, sep="")
    return


# Generated by 2.3.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    A = int(next(tokens))  # type: int
    B = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    solve(A, B, K)

if __name__ == '__main__':
    main()
