#!/usr/bin/env python3
from collections import defaultdict
class UnionFind():
    def __init__(self, n):
        self.n = n
        self.group_num = n
        self.parents = [-1] * n # サイズ

    """ 要素xの親を取得。"""
    def find(self, x):
        if self.parents[x] < 0:
            return x
        else:
            self.parents[x] = self.find(self.parents[x]) # 経路圧縮
            return self.parents[x]

    """ 2つの要素の併合。"""
    def union(self, x, y):
        x = self.find(x)
        y = self.find(y)

        if x == y:
            return False

        if self.parents[x] > self.parents[y]:
            x, y = y, x

        self.parents[x] += self.parents[y]
        self.parents[y] = x
        self.group_num -= 1
        return True

    """ 要素xの属する集合の要素数を取得。"""
    def size(self, x):
        return -self.parents[self.find(x)]

    """ 2つの要素が同一の集合に属するか。"""
    def same(self, x, y):
        return self.find(x) == self.find(y)

    """ 要素xと同一の集合の要素を全取得。
    計算量 : O(N)
    """
    def members(self, x):
        root = self.find(x)
        return [i for i in range(self.n) if self.find(i) == root]

    """ 各集合の根を全取得。
    計算量 : O(N)
    """
    def roots(self):
        return [i for i, x in enumerate(self.parents) if x < 0]

    """ 集合の個数を取得。 v2
    計算量 : O(1)
    """
    def group_count_v2(self):
        return self.group_num

    """ 集合の個数を取得。 v1
    計算量 : O(N)
    """
    def group_count_v1(self):
        return len(self.roots())

    """ 全集合の要素一覧を取得。
    計算量 : O(N)
    """
    def all_group_members(self):
        group_members = defaultdict(list)
        for member in range(self.n):
            group_members[self.find(member)].append(member)
        return group_members

    def __str__(self):
        return '\n'.join(f'{r}: {m}' for r, m in self.all_group_members().items())
    

# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    N, Q = map(int, input().split())
    C = list(map(int, input().split()))
    nums = defaultdict(lambda : defaultdict(int))
    merged = [0] * N
    uf = UnionFind(N)
    for _ in range(Q):
        t, a, b = map(int, input().split())
        if t == 1:
            if uf.same(a - 1, b - 1):
                continue
            else:
                org_a = uf.find(a - 1)
                org_b = uf.find(b - 1)
                uf.union(a - 1, b - 1)
                r = uf.find(a - 1)
                if r == org_a:
                    for k, v in nums[org_b].items():
                        nums[r][k] += v
                else:
                    for k, v in nums[org_a].items():
                        nums[r][k] += v
                if not merged[a - 1]:
                    nums[r][C[a - 1]] += 1
                    merged[a - 1] = 1
                if not merged[b - 1]:
                    nums[r][C[b - 1]] += 1
                    merged[b - 1] = 1
        else:
            r = uf.find(a - 1)
            print(nums[r][b])
    return

if __name__ == '__main__':
    main()
