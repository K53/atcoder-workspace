#!/usr/bin/env python3
import sys

MOD = 1000000007  # type: int
INF = 10 ** 16

def solve(N: int, M: int, a: "List[int]", b: "List[int]"):
    nodes = [[] for _ in range(N)]
    for i in range(M):
        nodes[a[i] - 1].append(b[i] - 1)
        nodes[b[i] - 1].append(a[i] - 1)

    from collections import deque
    def bfs(edges: "List[to]", start_node: int) -> list:
        q = deque()
        dist = [INF] * len(edges)
        q.append(start_node)
        dist[start_node] = 0
        while q:
            now = q.popleft()
            for next in edges[now]:
                if dist[next] != INF:
                    continue
                q.append(next)
                dist[next] = dist[now] + 1
        return dist

    d = bfs(nodes, 0)
    print(0 if d[-1] == INF else d[-1] % MOD)

    return


# Generated by 2.5.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    A = [int()] * (M)  # type: "List[int]"
    B = [int()] * (M)  # type: "List[int]"
    for i in range(M):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    solve(N, M, A, B)

if __name__ == '__main__':
    main()
