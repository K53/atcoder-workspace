#!/usr/bin/env python3
import sys

MOD = 1000000007  # type: int
INF = 10 ** 16

def solve(N: int, M: int, a: "List[int]", b: "List[int]"):
    G = [[] for _ in range(N)]
    dist = [[0, INF] for _ in range(N)]
    dist[0] = [1, 0]
    for i in range(M):
        G[a[i] - 1].append(b[i] - 1)
        G[b[i] - 1].append(a[i] - 1)
    
    from collections import deque
    q = deque()
    q.append(0)
    while q:
        now = q.popleft()
        for next in G[now]:
            if dist[next][1] < dist[now][1] + 1:
                continue
            if dist[next][1] == INF:
                q.append(next)
            dist[next][1] = dist[now][1] + 1
            dist[next][0] += dist[now][0]
            dist[next][0] %= MOD
    print(dist[-1][0] % MOD)
    return


# Generated by 2.5.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    A = [int()] * (M)  # type: "List[int]"
    B = [int()] * (M)  # type: "List[int]"
    for i in range(M):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    solve(N, M, A, B)

if __name__ == '__main__':
    main()
