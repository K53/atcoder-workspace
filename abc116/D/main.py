#!/usr/bin/env python3
import sys
from collections import defaultdict
import heapq

def solve(N: int, K: int, t: "List[int]", d: "List[int]"):
    l = [(dd, tt - 1) for tt, dd in zip(t, d)]
    l.sort(reverse=True)
    x = 0
    selected = defaultdict(list)
    cur = 0
    candidates = []
    for dd, tt in l[:K]:
        if len(selected[tt]) == 0:
            x += 1
        heapq.heappush(selected[tt], dd)
        cur += dd
    cur += x ** 2
    for dd, tt in l[K:]:
        if len(selected[tt]) == 0:
            heapq.heappush(candidates, (-dd, tt))

    ans = cur
    # print(candidates)
    # print(ans)
    for tt in range(N):
        for _ in range(len(selected[tt]) - 1):
            dd = heapq.heappop(selected[tt])
            while True:
                if len(candidates) == 0:
                    print(ans)
                    return
                new_dd, new_tt = heapq.heappop(candidates)
                # print(new_dd, new_tt)
                if len(selected[new_tt]) == 0:
                    break
            cur -= dd
            cur += -new_dd
            if len(selected[new_tt]) == 0:
                cur += (x + 1) ** 2 - x ** 2
                x += 1
            ans = max(ans, cur)
            heapq.heappush(selected[new_tt], -new_dd)
            # print(cur, selected)
    print(ans)
    return


# Generated by 2.11.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    t = [int()] * (N)  # type: "List[int]"
    d = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        t[i] = int(next(tokens))
        d[i] = int(next(tokens))
    solve(N, K, t, d)

if __name__ == '__main__':
    main()
