#!/usr/bin/env python3
import sys

def solve(H: int, W: int, S: "List[str]"):
    l = [[0] * W for _ in range(H)]
    r = [[0] * W for _ in range(H)]
    u = [[0] * W for _ in range(H)]
    d = [[0] * W for _ in range(H)]
    for hh in range(H):
        for ww in range(W):
            if S[hh][ww] == ".":
                if ww == 0:
                    l[hh][ww] = 1
                else:
                    l[hh][ww] = l[hh][ww - 1] + 1
            else:
                l[hh][ww] = 0
    for hh in range(H):
        for ww in reversed(range(W)):
            if S[hh][ww] == ".":
                if ww == W - 1:
                    r[hh][ww] = 1
                else:
                    r[hh][ww] = r[hh][ww + 1] + 1
            else:
                r[hh][ww] = 0
    for ww in range(W):
        for hh in range(H):
            if S[hh][ww] == ".":
                if hh == 0:
                    u[hh][ww] = 1
                else:
                    u[hh][ww] = u[hh - 1][ww] + 1
            else:
                u[hh][ww] = 0
    for ww in range(W):
        for hh in reversed(range(H)):
            if S[hh][ww] == ".":
                if hh == H - 1:
                    d[hh][ww] = 1
                else:
                    d[hh][ww] = d[hh + 1][ww] + 1
            else:
                d[hh][ww] = 0

    ans = 0
    for hh in range(H):
        for ww in range(W):
            ans = max(ans, l[hh][ww] + r[hh][ww] + u[hh][ww] + d[hh][ww] - 3)
    print(ans)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    H = int(next(tokens))  # type: int
    W = int(next(tokens))  # type: int
    S = [next(tokens) for _ in range(H)]  # type: "List[str]"
    solve(H, W, S)

if __name__ == '__main__':
    main()
