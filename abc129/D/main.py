#!/usr/bin/env python3
import sys
from itertools import groupby

def runLengthEncode(S: str) -> "List[tuple(str, int)]":
    grouped = groupby(S)
    res = []
    for k, v in grouped:
        res.append((k, int(len(list(v)))))
    return res

def solve(H: int, W: int, S: "List[str]"):
    rotS = []
    for ww in range(W):
        rot = []
        for hh in range(H):
            rot.extend(S[hh][ww])
        rotS.append(rot)
    fieldx = []
    fieldy = []
    for ss in S:
        f = []
        for m, n in runLengthEncode(ss):
            f.extend([0 if m == "#" else n] * n)
        fieldx.append(f)    
    for rs in rotS:
        f = []
        for m, n in runLengthEncode(rs):
            f.extend([0 if m == "#" else n] * n)
        fieldy.append(f)
    ans = 0 
    for ww in range(W):
        for hh in range(H):
            ans = max(ans, fieldx[hh][ww] + fieldy[ww][hh] - 1)
    print(ans)
    return

# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    H = int(next(tokens))  # type: int
    W = int(next(tokens))  # type: int
    S = [next(tokens) for _ in range(H)]  # type: "List[str]"
    solve(H, W, S)

if __name__ == '__main__':
    main()
