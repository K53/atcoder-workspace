#!/usr/bin/env python3
import sys

MOD = 1000000007  # type: int


def solve(N: int, M: int, a: "List[int]"):
    dp = [1] + [0] * N
    br = [0] * (N + 1)
    for i in a:
        br[i] = 1
    for i in range(N):
        for j in [1, 2]:
            if i + j >= N + 1 or br[i + j]:
                continue
            dp[i + j] += dp[i]
    # print(dp)
    print(dp[N] % MOD)
    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    a = [int(next(tokens)) for _ in range(M)]  # type: "List[int]"
    solve(N, M, a)

if __name__ == '__main__':
    main()
