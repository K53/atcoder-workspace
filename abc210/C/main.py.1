#!/usr/bin/env python3
import sys

def solve(N: int, K: int, c: "List[int]"):
    from collections import defaultdict
    d = defaultdict(int)
    kind = 0
    for i in range(K):
        d[c[i]] += 1
        if d[c[i]] == 1:
            kind += 1
    mk = kind
    for i in range(N - K):
        if d[c[i]] > 1:
            d[c[i]] -= 1
            d[c[i + K]] += 1
            if d[c[i + K]] == 1:
                kind += 1
        else:
            d[c[i]] -= 1
            kind -= 1
            d[c[i + K]] += 1
            if d[c[i + K]] == 1:
                kind += 1
        mk = max(mk, kind)
    print(mk)
    return


# Generated by 2.5.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    c = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, K, c)

if __name__ == '__main__':
    main()
