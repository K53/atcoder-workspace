#!/usr/bin/env python3
import sys
import copy
INF = 10 ** 16

def solve(H: int, W: int, C: int, A: "List[List[int]]"):

    def f(A):
        dp = [[INF] * W for _ in range(H)]
        dp[0][0] = A[0][0]
        for hh in range(H):
            for ww in range(W):
                if hh == ww == 0:
                    continue
                dp[hh][ww] = min(
                    A[hh][ww] - C * (hh + ww),
                    dp[hh - 1][ww] if hh - 1 >= 0 else INF,
                    dp[hh][ww - 1] if ww - 1 >= 0 else INF
                )
        ans = INF
        # 終点の全探索
        for hh in range(H):
            for ww in range(W):
                ans = min(
                    ans, 
                    A[hh][ww] + C * (hh + ww) + dp[hh - 1][ww] if hh - 1 >= 0 else INF,
                    A[hh][ww] + C * (hh + ww) + dp[hh][ww - 1] if ww - 1 >= 0 else INF
                )
        return ans
    print(min(f(A), f([o[::-1] for o in A])))
    return

    # -- 公式解放
    ans = INF
    dp = copy.deepcopy(A)
    # ---- 
    for hh in range(H):
        for ww in range(W):
            dp[hh][ww] = min(
                dp[hh][ww],
                dp[hh - 1][ww] + C if hh - 1 >= 0 else INF,
                dp[hh][ww - 1] + C if ww - 1 >= 0 else INF
            )
    X = [[INF] * W for _ in range(H)]
    for hh in range(H):
        for ww in range(W):
            X[hh][ww] = min(
                dp[hh - 1][ww] if hh - 1 >= 0 else INF,
                dp[hh][ww - 1] if ww - 1 >= 0 else INF
            ) + C + A[hh][ww]
    for hh in range(H):
        ans = min(ans, min(X[hh]))

    # ---- 
    revA = []
    for hh in range(H):
        revA.append(A[hh][::-1])
    dp = copy.deepcopy(revA)
    for hh in range(H):
        for ww in range(W):
            dp[hh][ww] = min(
                dp[hh][ww],
                dp[hh - 1][ww] + C if hh - 1 >= 0 else INF,
                dp[hh][ww - 1] + C if ww - 1 >= 0 else INF
            )
    X = [[INF] * W for _ in range(H)]
    for hh in range(H):
        for ww in range(W):
            X[hh][ww] = min(
                dp[hh - 1][ww] if hh - 1 >= 0 else INF,
                dp[hh][ww - 1] if ww - 1 >= 0 else INF
            ) + C + revA[hh][ww]
    for hh in range(H):
        ans = min(ans, min(X[hh]))
    print(ans)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    H = int(next(tokens))  # type: int
    W = int(next(tokens))  # type: int
    C = int(next(tokens))  # type: int
    A = [[int(next(tokens)) for _ in range(W)] for _ in range(H)]  # type: "List[List[int]]"
    solve(H, W, C, A)

if __name__ == '__main__':
    main()
