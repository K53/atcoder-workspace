#!/usr/bin/env python3
import sys
from collections import defaultdict
from itertools import accumulate

def solve(N: int, Q: int, x: "List[int]"):
    d = defaultdict(list)
    isContain = [0] * (10 ** 5 * 2 + 1)
    sum = [0]
    for i in range(Q):
        d[x[i]].append(i)
        if isContain[x[i]] == 0:
            isContain[x[i]] = 1
            sum.append(sum[-1] + 1) 
        else:
            isContain[x[i]] = 0
            sum.append(sum[-1] - 1) 
    # acc = [0] + list(accumulate(sum))
    acc = list(accumulate(sum))
    # print(d)
    # print(sum)
    # print(acc)
    for i in range(1, N + 1):
        if len(d[i]) == 0:
            continue
        if len(d[i]) % 2 == 1:
            d[i].append(Q)
    
    # print(d)
    ans = []
    for i in range(1, N + 1):
        if len(d[i]) == 0:
            ans.append(0)
        tmp = 0
        for k in range(len(d[i]) // 2):
            l = d[i][2 * k]
            r = d[i][2 * k + 1]
            tmp += (acc[r] - acc[l])
            # print(tmp, i, r, l, acc[r], acc[l])
        ans.append(tmp)
    print(*ans)
        



    return


# Generated by 2.13.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    Q = int(next(tokens))  # type: int
    x = [int(next(tokens)) for _ in range(Q)]  # type: "List[int]"
    solve(N, Q, x)

if __name__ == '__main__':
    main()
