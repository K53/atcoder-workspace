#!/usr/bin/env python3
import sys

# 4 2
# 111100

def solve(a: int, b: int, C: int):
    k = 0
    if a < b:
        a, b = b, a
        k = 1
    cc = bin(C)[2:].zfill(60)
    num1 = cc.count("1")
    num0 = cc.count("0")
    # need0 = min(a, b) # 端から1を共に積める -> 0を消費する数
    

    if num1 % 2 != abs(a - b) % 2: # 1の個数が合わない -> 無理
        print(-1)
        return
    else: # 先に1を消費
        large = (num1 + abs(a - b)) // 2 # aの片方だけ1を配るビット数
        small = large - abs(a - b) # bの片方だけ1を配るビット数
        print(large, small, "$")
        rest1 = a - large # ともに1を配るビット数
        if rest1 > num0:
            print(-1)
            return
        else:
            print(rest1, "$$")
            ansA = []
            ansB = []
            for b in cc:
                if b == "0":
                    if rest1 > 0:
                        ansA.append("1")
                        ansB.append("1")
                        rest1 -= 1
                    else:
                        ansA.append("0")
                        ansB.append("0")
                else:
                    if large > 0:
                        ansA.append("1")
                        ansB.append("0")
                        large -= 1
                    else:
                        ansA.append("0")
                        ansB.append("1")
            aa = int("".join(ansA), 2)
            bb = int("".join(ansB), 2)
            # print(ansA.count("1"))
            # print(ansB.count("1"))
            # print(aa ^ bb)
        if k == 1:
            print(ansB.count("1"))
            print(ansA.count("1"))
            print(aa ^ bb)
            # print(bb, aa)
        else:
            print(ansA.count("1"))
            print(ansB.count("1"))
            print(aa ^ bb)
            # print(aa, bb)





    # if num0 >= need0: # 十分ある時 全て1にする


    # else:
    #     pass

    # if num1 % 2 != (a - b) % 2:
    #     print(-1)
    #     return
    # else:
    #     pass


    # if num0 < need0:
    #     print(-1)
    #     return
    # a 7
    # b 8
    # 01111111 // 7個
    return





# Generated by 2.13.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    a = int(next(tokens))  # type: int
    b = int(next(tokens))  # type: int
    C = int(next(tokens))  # type: int
    solve(a, b, C)

if __name__ == '__main__':
    main()
