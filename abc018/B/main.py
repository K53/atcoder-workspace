#!/usr/bin/env python3
import sys


def solve(S: str, N: int, l: "List[int]", r: "List[int]"):
    S = list(S)
    for ll, rr in zip(l, r):
        ll -= 1
        rr -= 1
        S = S[:ll] + S[ll:(rr + 1)][::-1] + S[(rr + 1):]
    print(*S, sep="")
    return


# Generated by 2.9.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    S = next(tokens)  # type: str
    N = int(next(tokens))  # type: int
    l = [int()] * (N)  # type: "List[int]"
    r = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        l[i] = int(next(tokens))
        r[i] = int(next(tokens))
    solve(S, N, l, r)

if __name__ == '__main__':
    main()
