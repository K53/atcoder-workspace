#!/usr/bin/env python3
import sys

def solve(S: str):
    class Doubling:
        def __init__(self, stateKind: int, maxDoublingTimes: int):
            self.dv = []                                # dv[k][s] := 状態sを2^k回実行したらあとの状態
            self.stateKind = stateKind                  # 状態の種類数s
            self.maxDoublingTimes = maxDoublingTimes    # 実行回数kの範囲の定義(2^0 ≦ k ≦ 2^maxDoublingTimes)
            self.initTable()
            self.createTable()
        
        def initTable(self):
            self.dv.append([i + 1 if S[i] == "R" else i - 1 for i in range(self.stateKind)]) 
        
        def createTable(self):
            for i in range(1, self.maxDoublingTimes):
                l = []
                for j in range(self.stateKind):
                    l.append(self.dv[i - 1][self.dv[i - 1][j]])
                self.dv.append(l)
            
        def getState(self, doubingTimes: int, startState: int):
            a = []
            for i in range(self.maxDoublingTimes):
                if doubingTimes >> i & 1:
                    a.append(i)
            now = startState
            for i in a:
                now = self.dv[i][now]
            return now
        def getAllStates(self, doubingTimes: int):
            return self.dv[doubingTimes]


    import math
    d = Doubling(len(S), int(math.log2(10 ** 100)) + 1)
    ans = [0] * len(S)
    for i in d.getAllStates(int(math.log2(10 ** 100))):
        ans[i] += 1
    print(*ans, sep=" ")

# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    S = next(tokens)  # type: str
    solve(S)

if __name__ == '__main__':
    main()
