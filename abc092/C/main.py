#!/usr/bin/env python3
import sys


def solve(N: int, A: "List[int]"):
    dist = [0] + A + [0]
    ans = 0
    for i in range(N + 1):
        ans += abs(dist[i + 1] - dist[i])
    # print(ans)
    for i in range(N):
        if dist[i] <= dist[i + 1] <= dist[i + 2] or dist[i] >= dist[i + 1] >= dist[i + 2]:
            print(ans)
        else:
            print(ans - min(abs(dist[i] - dist[i + 1]), abs(dist[i + 1] - dist[i + 2])) * 2)
    return


# Generated by 2.11.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, A)

if __name__ == '__main__':
    main()
