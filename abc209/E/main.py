#!/usr/bin/env python3
import sys
sys.setrecursionlimit(10 ** 9)

def conv(s: str):
    d = 0
    res = 0
    for t in s[::-1]:
        n = ord(t)
        if n <= 90:
            res += (n - 65 + 1) * (52 ** d)
        else:
            res += (n - 71 + 1) * (52 ** d)
        d += 1
    return res

def solve(N: int, s: "List[str]"):
    # print(conv("aaa"))
    # print(conv("baa"))
    # print(conv("caa"))
    # print(conv("daa"))
    # print(conv("eaa"))
    nodes = [[] for _ in range(52 ** 3 + 1)]
    for i in s:
        nodes[conv(i[:3])].append(conv(i[-3:]))
    # print(nodes[conv("aaa")])
    # print(nodes[conv("baa")])
    # print(nodes[conv("caa")])
    # print(nodes[conv("daa")])
    # print(nodes[conv("eaa")])
    print(nodes[conv("abc")])
    print(nodes[conv("bcd")])
    print(nodes[conv("cda")])
    print(nodes[conv("ada")])
    INF = 10 ** 9
    dist = [INF] * (52 ** 3 + 1)
    visit = [-1] * (52 ** 3 + 1)
    def dfs(start_node: int, m) -> list:
        tt = dist[start_node]
        v = visit[start_node]
        if v == -1:
            visit[start_node] = m
        elif v == m:
            dist[start_node] = -INF
            return -INF
        if tt == INF:
            dist[start_node] = 0
        else:
            return dist[start_node]
        ans = 0
        for i in nodes[start_node]:
            ans = max(ans, dfs(i, m) + 1)
        dist[start_node] = ans
        return 0

    for i in range(52 ** 3 + 1):
        dfs(i, i)
    for i in s:
        print(dist[conv(i[-3:])])
    

        
    

        

    return


# Generated by 2.5.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    s = [next(tokens) for _ in range(N)]  # type: "List[str]"
    solve(N, s)

if __name__ == '__main__':
    main()
