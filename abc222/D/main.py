#!/usr/bin/env python3
import sys
from itertools import accumulate

MOD = 998244353  # type: int


# dp[桁][直前の数]
def solve(N: int, a: "List[int]", b: "List[int]"):
    mxnum = 3000
    dp = [[0] * (mxnum + 1) for _ in range(N)]
    for i in range(a[0], b[0] + 1):
        dp[0][i] = 1
    sdp = list(accumulate(dp[0]))
    # print(dp)
    # print(sdp)
    for i in range(1, N):
        for num in range(a[i], b[i] + 1):
            dp[i][num] += sdp[num]
            dp[i][num] %= MOD
        sdp = list(accumulate(dp[i]))
    # print(dp)
    # print(sdp)
    print(sum(dp[-1]) % MOD)
    return


# Generated by 2.9.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    a = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    b = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, a, b)

if __name__ == '__main__':
    main()
