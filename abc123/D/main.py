#!/usr/bin/env python3
import sys
import heapq

def solve(X: int, Y: int, Z: int, K: int, A: "List[int]", B: "List[int]", C: "List[int]"):
    A.sort(reverse=True)
    B.sort(reverse=True)
    C.sort(reverse=True)
    q = []
    ans = []
    selected = set()
    heapq.heappush(q, (-(A[0] + B[0] + C[0]), 0, 0, 0))
    for i in range(K):
        e, aa, bb, cc = heapq.heappop(q)
        ans.append(-e)
        for ia, ib, ic in [(1, 0, 0), (0, 1, 0), (0, 0, 1)]:
            if aa + ia < X and bb + ib < Y and cc + ic < Z and not (aa + ia, bb + ib, cc + ic) in selected:
                heapq.heappush(q, (-(A[aa + ia] + B[bb + ib] + C[cc + ic]), aa + ia, bb + ib, cc + ic))
                selected.add((aa + ia, bb + ib, cc + ic))
    print(*ans, sep="\n")
    return


# Generated by 2.9.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    X = int(next(tokens))  # type: int
    Y = int(next(tokens))  # type: int
    Z = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(X)]  # type: "List[int]"
    B = [int(next(tokens)) for _ in range(Y)]  # type: "List[int]"
    C = [int(next(tokens)) for _ in range(Z)]  # type: "List[int]"
    solve(X, Y, Z, K, A, B, C)

if __name__ == '__main__':
    main()
