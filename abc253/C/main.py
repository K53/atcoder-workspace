#!/usr/bin/env python3


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
import heapq
from collections import defaultdict
class HeapDict:
    def __init__(self):
        self.q=[]
        self.d=defaultdict(int)

    def insert(self, x):
        """要素xの挿入"""
        heapq.heappush(self.q, x)
        self.d[x] += 1

    def erase(self, x, c):
        """要素xの削除"""
        if self.d[x] == 0:
            # print(x, "is not in HeapDict")
            return
        else:
            self.d[x] -= min(self.d[x], c)

        while len(self.q) != 0:
            if self.d[self.q[0]] == 0:
                heapq.heappop(self.q)
            else:
                break
    
    def isEmpty(self):
        """O(1)。キューが空かどうか。"""
        return len(self.q) != 0
    
    def size(self):
        """O(過去に出現した要素の種類n) : キューが空かどうかのみ知りたい場合はisEmpty()使用推奨"""
        return sum(self.d.values())

    def exist(self, x):
        """O(1)。要素の存在確認"""
        return self.d[x] != 0
    
    def getExistList(self):
        """キュー内の実際に存在する要素のみを返す(遅延削除のため、self.qだと削除済みでも残っている要素が表示される)"""
        return [i for i in self.q if self.exist(i)]

    def dryPop(self):
        """O(1)。先頭要素(通常は最小値)を返す。キューが空ならNoneを返す"""
        return self.q[0] if self.isEmpty() else None

    def __str__(self):
        """先頭要素取得に影響しない要素は遅延削除のため、キュー内に存在しているが事実上削除済みのものは括弧()書きしている"""
        return "[" + ", ".join([str(i) if self.exist(i) else "({})".format(i) for i in self.q]) + "]"

class HeapDictMax:
    def __init__(self):
        self.q=[]
        self.d=defaultdict(int)

    def insert(self, x):
        """要素xの挿入"""
        heapq.heappush(self.q, -x)
        self.d[-x] += 1

    def erase(self, x, c):
        """要素xの削除"""
        if self.d[-x] == 0:
            # print(x, "is not in HeapDict")
            return
        else:
            self.d[-x] -= min(self.d[-x], c)

        while len(self.q) != 0:
            if self.d[self.q[0]] == 0:
                heapq.heappop(self.q)
            else:
                break
    
    def isEmpty(self):
        """O(1)。キューが空かどうか。"""
        return len(self.q) != 0
    
    def size(self):
        """O(過去に出現した要素の種類n) : キューが空かどうかのみ知りたい場合はisEmpty()使用推奨"""
        return sum(self.d.values())

    def exist(self, x):
        """O(1)。要素の存在確認"""
        return self.d[-x] != 0
    
    def getExistList(self):
        """キュー内の実際に存在する要素のみを返す(遅延削除のため、self.qだと削除済みでも残っている要素が表示される)"""
        return [i for i in self.q if self.exist(i)]

    def dryPop(self):
        """O(1)。先頭要素(通常は最小値)を返す。キューが空ならNoneを返す"""
        return self.q[0] if self.isEmpty() else None

    def __str__(self):
        """先頭要素取得に影響しない要素は遅延削除のため、キュー内に存在しているが事実上削除済みのものは括弧()書きしている"""
        return "[" + ", ".join([str(i) if self.exist(i) else "({})".format(i) for i in self.q]) + "]"

def main():
    Q = int(input())
    hq = HeapDict()
    hqmax = HeapDictMax()
    for _ in range(Q):
        query = list(map(int, input().split()))
        if query[0] == 1:
            x = query[1]
            hq.insert(x)
            hqmax.insert(x)
        elif query[0] == 2:
            x, c = query[1], query[2]
            hq.erase(x, c)
            hqmax.erase(x, c)
        else:
            # print(hq.dryPop())
            # print(hqmax.dryPop())
            print(-hqmax.dryPop() - hq.dryPop())
    return



if __name__ == '__main__':
    main()
