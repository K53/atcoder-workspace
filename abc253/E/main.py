#!/usr/bin/env python3
import sys
from itertools import accumulate

MOD = 998244353  # type: int

def solve(N: int, M: int, K: int):
    if K == 0:
        print((M ** N) % MOD)
        return
    dp = [[0] + [1] * (M)] + [[0] * (M + 1) for _ in range(N)]
    sdp = [0] * (M + 1)
    sdp = list(accumulate(dp[0]))
    # print(sdp)
    for i in range(1, N):
        for num in range(1, M + 1):
            dp[i][num] = ((sdp[-1] - sdp[num + K - 1]) if num + K - 1 < len(sdp) else sdp[0]) + ((sdp[num - K] - sdp[0]) if num - K >= 0 else sdp[0])
            # print(i, num, (num + K - 1) < len(sdp), (num - K - 1) >= 0)
            # print(i, num, (sdp[-1], sdp[num + K - 1]) if num + K - 1 < len(sdp) else 0, (sdp[num - K], sdp[0]) if num - K >= 0 else sdp[0])
            # print(i, num, (sdp[-1] - sdp[num + K - 1]) if num + K - 1 < len(sdp) else 0), ((sdp[num - K] - sdp[0]) if num - K >= 0 else sdp[0])
            dp[i][num] %= MOD
        sdp = list(accumulate(dp[i]))
        # print(i, sdp)
        # print(i, dp)
    print(sdp[-1] % MOD)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    solve(N, M, K)

if __name__ == '__main__':
    main()
