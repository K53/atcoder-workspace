#!/usr/bin/env python3
import sys
from itertools import accumulate
MOD = 998244353  # type: int


def solve(N: int, M: int, K: int):
    if K == 0:
        print(pow(M, N, MOD))
        return
    dp = [1] * M
    sdp = [0] + list(accumulate(dp))
    for _ in range(N - 1):
        tmp = []
        for j in range(1, M + 1):
            tmp.append((sdp[M] - sdp[min(M, j + K - 1)] + sdp[max(0, j - K)]) % MOD)
        dp = tmp
        sdp = [0]
        for num in dp:
            sdp.append((sdp[-1] + num) % MOD)

    print(sdp[-1] % MOD)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    solve(N, M, K)

if __name__ == '__main__':
    main()
