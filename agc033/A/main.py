#!/usr/bin/env python3
import sys


def solve(H: int, W: int, A: "List[str]"):
    def multiStartBfs(H, W, startPoints: "List[set(startY, startX)]") -> list:
        from collections import deque
        INF = 10 ** 16
        q = deque()
        dist = [[INF] * W for _ in range(H)]
        for startY, startX in startPoints:
            q.append((startY, startX))
            dist[startY][startX] = 0
        while q:
            nowy, nowx = q.popleft()
            for dx, dy in [(0, 1), (1, 0), (-1, 0), (0, -1)]:
                nexty = nowy + dy
                nextx = nowx + dx
                if nexty < 0 or nextx < 0 or nexty >= H or nextx >= W or dist[nexty][nextx] != INF:
                    continue
                q.append((nexty, nextx))
                dist[nexty][nextx] = dist[nowy][nowx] + 1
        return dist
    l = []
    for i in range(H):
        for j in range(W):
            if A[i][j] == "#":
                l.append((i, j))
    d = multiStartBfs(H, W, l)
    ans = 0
    for dd in d:
        ans = max(ans, max(dd))
    print(ans)
    return


# Generated by 2.6.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    H = int(next(tokens))  # type: int
    W = int(next(tokens))  # type: int
    A = [next(tokens) for _ in range(H)]  # type: "List[str]"
    solve(H, W, A)

if __name__ == '__main__':
    main()
