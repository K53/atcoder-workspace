#!/usr/bin/env python3
import sys
import bisect

def solve(N: int, K: int, A: "List[int]", B: "List[int]"):
    f = []
    for i in range(N):
        f.append((A[i], B[i]))
    f.sort()
    now = 0
    coin = K
    for next, bb in f:
        if coin < next - now:
            print(now + coin)
            return
        coin -= next - now
        now += next - now
        coin += bb
    print(now + coin)
    return


# Generated by 2.3.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    A = [int()] * (N)  # type: "List[int]"
    B = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    solve(N, K, A, B)

if __name__ == '__main__':
    main()
