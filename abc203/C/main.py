#!/usr/bin/env python3
import sys
import bisect

def solve(N: int, K: int, A: "List[int]", B: "List[int]"):
    friends = []
    for aa, bb in zip(A, B):
        friends.append((aa, bb))
    friends.sort()
    As = []
    s = 0
    Bs = []
    for aa, bb in friends:
        As.append(aa)
        s += bb
        Bs.append(s)
    # print(As)
    # print(Bs)
    # print(bisect.bisect_right(As, 3) - 1)
    now = 0
    coin = K
    preS = 0
    while coin > 0:
        now += coin
        bb = bisect.bisect_right(As, now)
        if bb == 0:
            break
        ss = Bs[bb - 1]
        coin = ss - preS
        preS = ss
    print(now)
    return


# Generated by 2.3.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    A = [int()] * (N)  # type: "List[int]"
    B = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    solve(N, K, A, B)

if __name__ == '__main__':
    main()
