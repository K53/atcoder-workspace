#!/usr/bin/env python3
import sys
import numpy as np


def median_filter(src, ksize):
    # 畳み込み演算をしない領域の幅
    # width of skip
    d = int((ksize-1)/2)
    h, w = src.shape[0], src.shape[1]

    # ndarray of destination
    # 出力画像用の配列（要素は入力画像と同じ）
    dst = src.copy()

    for y in range(d, h - d):
        for x in range(d, w - d):
            # 近傍にある画素値の中央値を出力画像の画素値に設定
            dst[y][x] = np.median(src[y-d:y+d+1, x-d:x+d+1])

    return dst

def solve(N: int, K: int, A: "List[List[int]]"):
    # ll = (K ** 2) // 2
    # ans = 10 ** 10
    # for h in range(N - K + 1):
    #     for w in range(N - K + 1):
    #         l = []
    #         for i in range(K):
    #             for j in range(K):
    #                 l.append(A[h+i][w+j])
    #         l.sort(reverse=True)
    #         # print(l)
    #         # print(l[ll])
    #         ans = min(ans, l[ll])

    print(median_filter(A, K)) 


    return


# Generated by 2.3.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    A = [[int(next(tokens)) for _ in range(N)] for _ in range(N)]  # type: "List[List[int]]"
    solve(N, K, A)

if __name__ == '__main__':
    main()
