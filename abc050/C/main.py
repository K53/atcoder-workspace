#!/usr/bin/env python3
import sys

MOD = 1000000007  # type: int

def modpow(n: int, a: int, mod: int = MOD) -> int:
    res = 1
    while a > 0:
        if a & 1:
            res = res * n % mod
        n = n * n % mod
        a >>= 1
    return res

def solve(N: int, A: "List[int]"):
    if N % 2 == 0:
        if not sorted([i for i in range(N - 1, 0, -2)] * 2) == sorted(A):
            print(0)
        else:
            print(modpow(2, len(range(N - 1, 0, -2))))
    else:
        if not sorted([i for i in range(N - 1, 1, -2)] * 2 + [0])  == sorted(A):
            print(0)
        else:
            print(modpow(2, len(range(N - 1, 1, -2))))
    return


# Generated by 2.9.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, A)

if __name__ == '__main__':
    main()
