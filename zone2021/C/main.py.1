#!/usr/bin/env python3
import sys
import itertools


def solve(N: int, A: "List[int]", B: "List[int]", C: "List[int]", D: "List[int]", E: "List[int]"):
    def is_ok(minv):
        ss = set()
        for i in range(N):
            P = [A[i], B[i], C[i], D[i], E[i]]
            score = 0
            for i in range(5):
                if P[i] >= minv:
                    score += 1 << i
            ss.add(score)
        # print(ss)
        for x in ss:
            for y in ss:
                for z in ss:
                    if x | y | z == int("11111", 2):
                        return True 
        return False

    def binSearch(ok, ng):
        while abs(ok - ng) > 1:
            mid = (ok + ng) // 2
            if is_ok(mid):
                ok = mid
            else:
                ng = mid
            # print(ng, ok)
        return ok

    print(binSearch(0, 10 ** 9 + 1))
    return


# Generated by 2.2.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int()] * (N)  # type: "List[int]"
    B = [int()] * (N)  # type: "List[int]"
    C = [int()] * (N)  # type: "List[int]"
    D = [int()] * (N)  # type: "List[int]"
    E = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
        C[i] = int(next(tokens))
        D[i] = int(next(tokens))
        E[i] = int(next(tokens))
    solve(N, A, B, C, D, E)

if __name__ == '__main__':
    main()
