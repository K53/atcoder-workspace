#!/usr/bin/env python3
import sys
from itertools import accumulate

def solve(N: int, A: "List[int]", B: "List[int]"):
    end = []
    for aa, bb in zip(A, B):
        end.append(aa + bb)# - 1)
    compressed = {}
    compressed_to_row = []
    for index, val in enumerate(sorted(list(set(A + end)))):
        compressed[val] = index
        compressed_to_row.append(val)
    # print(compressed)
    # print(compressed_to_row)
    l = [0] * len(compressed_to_row)
    for aa, ee in zip(A, end):
        l[compressed[aa]] += 1
        l[compressed[ee]] -= 1
    acc = list(accumulate(l))
    # print(acc)
    ans = [0] * (N + 1)
    for i in range(len(acc) - 1):
        ans[acc[i]] += (compressed_to_row[i + 1] - compressed_to_row[i])
    print(*ans[1:], sep=" ")


    return


# Generated by 2.9.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int()] * (N)  # type: "List[int]"
    B = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    solve(N, A, B)

if __name__ == '__main__':
    main()
