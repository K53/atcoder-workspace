#!/usr/bin/env python3
import sys
from itertools import accumulate

def solve(N: int, A: "List[int]", B: "List[int]"):
    end = []
    for aa, bb in zip(A, B):
        end.append(aa + bb)# - 1)
    # print(end)
    d = {}
    rd = []
    for index, val in enumerate(sorted(list(set(A + end)))):
        d[val] = index
        rd.append(val)
    # print(d)
    # print(rd)
    nums = [0] * (len(list(d)) + 1)
    for aa, ee in zip(A, end):
        nums[d[aa]] += 1
        nums[d[ee]] -= 1 # + 1
    ans = 0
    l = list(accumulate(nums))
    # print(l)
    ans = [0] * (N + 2)
    for i in range(len(l) - 1 - 1):
        # print(rd[i + 1] - rd[i])
        ans[l[i]] += (rd[i + 1] - rd[i])
    ans[l[-2]] += 1
    print(*ans[1:-1], sep=" ")


    return


# Generated by 2.9.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int()] * (N)  # type: "List[int]"
    B = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    solve(N, A, B)

if __name__ == '__main__':
    main()
