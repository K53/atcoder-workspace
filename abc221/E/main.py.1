#!/usr/bin/env python3
import sys

MOD = 998244353  # type: int

class BIT:
    def __init__(self, N):
        self.N = N
        self.tree = [0] * (self.N + 1) # 1-indexedのため
        
    def add(self, pos, val):
        '''Add : A[pos] = val '''
        i = pos + 1 # convert from 0-index to 1-index
        while i <= self.N:
            self.tree[i] += val
            i += i & -i

    def sum(self, pos):
        ''' Return Sum(A[1], ... , A[pos])'''
        res = 0
        i = pos + 1 # convert from 0-index to 1-index
        while i > 0:
            res += self.tree[i]
            res %= MOD
            i -= i & -i    
        return res

def solve(N: int, A: "List[int]"):
    ans = 0

    compressed = {val : index for index, val in enumerate(sorted(list(set(A))))}
    a = [compressed[aa] for aa in A]
    bit =  BIT(len(compressed))

    inv2 = pow(2, MOD - 2, MOD)
    for i in range(N):
        val = a[i]
        ans += pow(2, i, MOD) * bit.sum(val) % MOD
        ans %= MOD
        bit.add(val, pow(inv2, i + 1, MOD))
    print(ans)
    return


# Generated by 2.9.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, A)

if __name__ == '__main__':
    main()
