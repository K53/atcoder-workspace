#!/usr/bin/env python3
import sys


def solve(H: int, W: int, N: int, A: "List[int]", B: "List[int]"):

    raw_to_compressed_A = {}
    compressed_to_raw_A = []
    for index, val in enumerate(sorted(list(set(A)))):
        raw_to_compressed_A[val] = index
        compressed_to_raw_A.append(val)

    raw_to_compressed_B = {}
    compressed_to_raw_B = []
    for index, val in enumerate(sorted(list(set(B)))):
        raw_to_compressed_B[val] = index
        compressed_to_raw_B.append(val)
    
    for i in range(N):
        print(raw_to_compressed_A[A[i]] + 1, raw_to_compressed_B[B[i]] + 1)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    H = int(next(tokens))  # type: int
    W = int(next(tokens))  # type: int
    N = int(next(tokens))  # type: int
    A = [int()] * (N)  # type: "List[int]"
    B = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    solve(H, W, N, A, B)

if __name__ == '__main__':
    main()
