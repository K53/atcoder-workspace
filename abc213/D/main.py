#!/usr/bin/env python3
import sys
sys.setrecursionlimit(10 ** 9)

def solve(N: int, A: "List[int]", B: "List[int]"):
    G = [[] for _ in range(N)]
    for aa, bb in zip(A, B):
        G[aa - 1].append(bb - 1)
        G[bb - 1].append(aa - 1)
    for i in range(N):
        G[i].sort()
    eularTourNodes_pattarnA = []
    def getEularTourNodes(now: int, pre: int = -1):
        eularTourNodes_pattarnA.append(now + 1) 
        for next in G[now]:
            if next == pre:
                continue
            getEularTourNodes(next, now) 
            eularTourNodes_pattarnA.append(now + 1)
        return
    getEularTourNodes(0)
    print(*eularTourNodes_pattarnA)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int()] * (N - 1)  # type: "List[int]"
    B = [int()] * (N - 1)  # type: "List[int]"
    for i in range(N - 1):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    solve(N, A, B)

if __name__ == '__main__':
    main()
