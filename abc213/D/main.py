#!/usr/bin/env python3
import sys


def solve(N: int, A: "List[int]", B: "List[int]"):
    nodes = [[] for _ in range(N)]
    for i in range(N - 1):
        nodes[A[i] - 1].append(B[i] - 1)
        nodes[B[i] - 1].append(A[i] - 1)
    for i in range(N):
        nodes[i].sort()
    print(nodes)
    eularTourNodes = []
    sys.setrecursionlimit(10 ** 9)
    def getEularTourNodes(now: int, pre: int = -1):
        print(now, pre)
        eularTourNodes.append(now) # 到達時
        for next in nodes[now]:
            if next == pre:
                continue
            getEularTourNodes(next, now)
        eularTourNodes.append(now) # 帰着時
        return
    getEularTourNodes(0)
    
    print(*[i + 1 for i in eularTourNodes], sep= " ")
    return


# Generated by 2.6.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int()] * (N - 1)  # type: "List[int]"
    B = [int()] * (N - 1)  # type: "List[int]"
    for i in range(N - 1):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    solve(N, A, B)

if __name__ == '__main__':
    main()
