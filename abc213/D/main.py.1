#!/usr/bin/env python3
import sys
import sys
sys.setrecursionlimit(10 ** 9)


def solve(N: int, A: "List[int]", B: "List[int]"):
    G = [[] for _ in range(N)]
    for i in range(N - 1):
        G[A[i] - 1].append(B[i] - 1)
        G[B[i] - 1].append(A[i] - 1)
    for i in range(N):
        G[i].sort()

    ans = []
    def dfs(pre: int, now: int):
        # print(pre, now)
        # ans.append(now)
        # [2]
        # この領域は新たなノードnow(移動前で言うところのnext)に到着した時のみ通過するエリア @node
        #
        # --- 子ノードを探索 -----------------------
        for next in G[now]: 
            ans.append(now)
            if next == pre: 
                continue
            # [1]
            # この領域は新たなノードnextに移動する辺を通過する時のコード @edge
            #
            dfs(now, next)
            # [4]
            ans.append(now)

        # [3] この領域は親ノードpreに帰るために現在のノードnowを出発する時にのみ通過するエリア @node
        return
    dfs(-1, 0)
    print(*[i + 1 for i in ans], sep=" ")

# -> forブロックの外側(前後)にnowの記録を置くと、開始頂点での記録がされる。
# -> forブロックの内側にnowの記録を置くと、開始頂点での記録がされない。

# 今回の問題では開始終了の頂点が必要 -> forの外側にnowを書く



# イメージ
#             ◯   <-- pre
#             |
#             ◯   <-- now
#           / | \
#      [1]↓/  |  \
#         /   |   \
#        /    |    \
#       /↑[4] |     \
#   ↓  /      |      \
#  [2]◯[3]    ◯       ◯ <-- next
#



# Generated by 2.6.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int()] * (N - 1)  # type: "List[int]"
    B = [int()] * (N - 1)  # type: "List[int]"
    for i in range(N - 1):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    solve(N, A, B)

if __name__ == '__main__':
    main()
