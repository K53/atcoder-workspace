#!/usr/bin/env python3
import sys


def solve(N: int, F: "List[int]", S: "List[int]"):
    l = []
    for i in range(N):
        l.append((S[i], F[i]))
    l.sort(reverse=True)
    
    one = l[0]
    ans = 0
    for i in range(1, N):
        if l[i][1] == one[1]:
            ans = max(ans, one[0] + l[i][0] // 2)
        else:
            ans = max(ans, one[0] + l[i][0])
            print(ans)
            return
    print(ans)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    F = [int()] * (N)  # type: "List[int]"
    S = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        F[i] = int(next(tokens))
        S[i] = int(next(tokens))
    solve(N, F, S)

if __name__ == '__main__':
    main()
