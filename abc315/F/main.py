#!/usr/bin/env python3
import sys

# https://atcoder.jp/contests/abc315/submissions/44858747
def distance(i, j):
    return pow((X[i] - X[j]) ** 2 + (Y[i] - Y[j]) ** 2, 1/2)

N = int(input())
XY = [[0, 0]] + [list(map(int, input().split())) for _ in range(N)]
X, Y = zip(*XY)

dist_max = 0
for i in range(1, N):
    dist_max += distance(i, i + 1)
# print("dist_max :", dist_max)

penalty = [0]
for i in range(1, N + 1):
    if 2 ** (i - 1) > dist_max:
        break
    penalty.append(2 ** (i - 1))
shortcut_max = len(penalty) - 1
# print("penalty :", penalty)
# print("shortcut_max :", shortcut_max)

# dp[i][j] : j個のチェックポイントを無視して、チェックポイントiまで行くのにかかる最短の移動距離
dp = [[1 << 60 for j in range(len(penalty))] for i in range(N + 1)]
dp[1][0] = 0
for i in range(1, N):  # 現在のチェックポイント
    for j in range(i):  # 現在のショートカット数
        for k in range(shortcut_max - j + 1):  # 何個ショートカットするか
            if i + k + 1 > N:
                continue
            # print("i, j, k :", i, j, k)
            # print("penalty :", penalty[j + k])
            # print("distance :", distance(i, i + k + 1))
            dp[i + k + 1][j + k] = min(dp[i + k + 1][j + k], dp[i][j] + distance(i, i + k + 1) + penalty[j + k] - penalty[j])

print(dp)
print(min(dp[N]))

# def solve(N: int, X: "List[int]", Y: "List[int]"):
#     INF = 10.0 ** 10
#     dp = [[INF] * 32 for _ in range(N)]
#     dp[0][0] = 0.0
#     for cur in range(N - 1):
#         for skip in range(32 - 1):
#             if dp[cur][skip] == INF:
#                 continue
#             # skip
#             dp[cur][skip + 1] = min(dp[cur][skip + 1], dp[cur][skip])
#             # not skip
#             dp[cur + 1][skip] = min(dp[cur + 1][skip], dp[cur][skip] + ((X[cur] - X[cur + 1]) ** 2 + (Y[cur] - Y[cur + 1]) ** 2) ** 0.5)
#     ans = INF
#     print(dp)
#     for i in range(30):
#         if dp[-1][i] == INF:
#             continue
#         if i == 0:
#             ans = min(ans, dp[-1][i])
#         else:
#             ans = min(ans, dp[-1][i] + 2 ** (i - 1))
#     print(ans)
#     return


# # Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
# def main():
#     def iterate_tokens():
#         for line in sys.stdin:
#             for word in line.split():
#                 yield word
#     tokens = iterate_tokens()
#     N = int(next(tokens))  # type: int
#     X = [int()] * (N)  # type: "List[int]"
#     Y = [int()] * (N)  # type: "List[int]"
#     for i in range(N):
#         X[i] = int(next(tokens))
#         Y[i] = int(next(tokens))
#     solve(N, X, Y)

# if __name__ == '__main__':
#     main()
