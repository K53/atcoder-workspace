#!/usr/bin/env python3
import sys
from itertools import combinations_with_replacement, permutations

def solve(N: int, K: int, T: "List[List[int]]"):
    for case in combinations_with_replacement(range(K), N):
        for per in permutations(case):
            ans = 0
            for i in range(N):
                ans ^= T[i][per[i]]
            if ans == 0:
                print("Found")
                return
    print("Nothing")
    return


# Generated by 2.9.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    T = [[int(next(tokens)) for _ in range(K)] for _ in range(N)]  # type: "List[List[int]]"
    solve(N, K, T)

if __name__ == '__main__':
    main()
