#!/usr/bin/env python3
import sys

def solve(N: int, M: int, K: int, a: "List[int]", b: "List[int]", p: "List[int]", h: "List[int]"):
    G = [[] for _ in range(N)]
    pol = [0] * N
    for i in range(M):
        G[a[i] - 1].append(b[i] - 1)
        G[b[i] - 1].append(a[i] - 1)
    for i in range(K):
        pol[p[i] - 1] = h[i]

    from collections import deque
    INF = 10 ** 16
    dist = [INF] * len(G)
    def bfs(start_node: int) -> list:
        q = deque()
        cur_ok = pol[start_node]
        q.append((start_node, cur_ok))
        dist[start_node] = 1
        while q:
            now, cur_ok = q.popleft()
            # print(now + 1, cur_ok)
            # cur_ok = max(cur_ok, pol[now])
            for next in G[now]:
                if dist[next] != INF:
                    continue
                if cur_ok > 0:
                    q.append((next, cur_ok - 1))
                    dist[next] = 1
        return dist

    ll = [(hh, pp - 1) for pp, hh in zip(p, h)]
    ll.sort(reverse=True)
    for hh, pp in ll:
        if dist[i] == INF:
            bfs(pp)
    ans = []
    for i in range(N):
        if dist[i] == 1:
            ans.append(i + 1)
    print(len(ans))
    print(*ans)
    
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    a = [int()] * (M)  # type: "List[int]"
    b = [int()] * (M)  # type: "List[int]"
    for i in range(M):
        a[i] = int(next(tokens))
        b[i] = int(next(tokens))
    p = [int()] * (K)  # type: "List[int]"
    h = [int()] * (K)  # type: "List[int]"
    for i in range(K):
        p[i] = int(next(tokens))
        h[i] = int(next(tokens))
    solve(N, M, K, a, b, p, h)

if __name__ == '__main__':
    main()
