#!/usr/bin/env python3
import sys

YES = "Yes"  # type: str
NO = "No"  # type: str


def solve(N: int, x: int, y: int, A: "List[int]"):
    dpx = [[0] * 2 for _ in range(N)]
    dpy = [[0] * 2 for _ in range(N)]
    dpx[0] = A[0]
    xx = []
    yy = []
    for i in range(1, N):
        if i % 2 == 0:
            yy.append(A[i])
        else:
            xx.append(A[i])

    print(xx)
    print(yy)
    for i in range(len(xx)):
        dpx[i + 1] = dpx[i] + xx[i], dpx[i] - xx[i]



    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    x = int(next(tokens))  # type: int
    y = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, x, y, A)

if __name__ == '__main__':
    main()
