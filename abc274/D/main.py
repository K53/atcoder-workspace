#!/usr/bin/env python3
import sys

YES = "Yes"  # type: str
NO = "No"  # type: str


def solve(N: int, x: int, y: int, A: "List[int]"):
    mx = 10 ** 4
    offset = mx
    L = 2 * mx + 1
    cur_xdp = [0] * L
    next_xdp = [0] * L
    cur_ydp = [0] * L
    next_ydp = [0] * L
    cur_xdp[offset] = 1
    cur_ydp[offset] = 1
    for i in range(N):
        if i % 2 == 1:
            for point in range(L):
                if cur_ydp[point] == 1:
                    next_ydp[point - A[i]] = 1
                    next_ydp[point + A[i]] = 1
            cur_ydp = next_ydp
            next_ydp = [0] * L
            
        else:
            for point in range(L):
                if cur_xdp[point] == 1:
                    if i != 0:
                        next_xdp[point - A[i]] = 1
                    next_xdp[point + A[i]] = 1
            cur_xdp = next_xdp
            next_xdp = [0] * L

    print(YES if cur_ydp[y + offset] and cur_xdp[x + offset] else NO)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    x = int(next(tokens))  # type: int
    y = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, x, y, A)

if __name__ == '__main__':
    main()
