#!/usr/bin/env python3
import sys


def solve(N: int, X: int, A: "List[int]"):
    counts = []
    rest = X
    for aa in A[::-1]:
        p, rest = divmod(rest, aa)
        counts.append(p)
    counts = counts[::-1]
    # print(counts)
    # ans = [0] * N
    ans = 0
    for i in range(N - 1):
        b = A[i + 1] // A[i]
        if counts[i] > b / 2:
            # ans[i] = b - counts[i]
            # ans += b - counts[i]
            counts[i] = 0
            counts[i + 1] += 1
    # print(counts, ans)
    # print(ans + sum(counts))
    ss = -X
    for i in range(N):
        ss += counts[i] * A[i]
    # print(ss)
    for aa in A[::-1]:
        p, ss = divmod(ss, aa)
        ans += p
    # print(ans)
    # print(counts, ans)
    print(ans + sum(counts))
    return


# Generated by 2.11.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    X = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, X, A)
    # for xx in range(1, 10):
    #     print(xx, ">")
    #     solve(3, xx, [1, 3, 9])

if __name__ == '__main__':
    main()
