#!/usr/bin/env python3
import sys


def solve(N: int, A: "List[int]", B: "List[int]"):
    AB = [(aa, bb) for aa, bb in zip(A, B)]
    num = sorted(AB)
    print(num)
    ans = 0
    for i in range(N):
        l = [x for _, x in sorted(num[:(i + 1)], key=lambda x:x[1])]
        print("now", num[i][0])
        print(l)
        print(num, num[i][1])
        # print(len(l) - bisect.bisect_left(l, num[i][1]))
        print(len(l) - l.index(num[i][1]))
        # ans += len(l) - bisect.bisect_left(l, num[i][1])
        ans += len(l) - l.index(num[i][1])
    print(ans)
    return


# Generated by 2.11.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    B = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, A, B)

if __name__ == '__main__':
    main()
