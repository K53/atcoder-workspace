#!/usr/bin/env python3
import sys


def solve(N: int):
    S = str(N)
    # dp[dig][smaller][sum] := 先頭からdig桁決定した時に1の数がsum個あるものが何通りあるのか。smaller = Falseでは上限に達しているということ。
    dp = [[[0] * (len(S) + 1) for _ in range(2)] for _ in range(len(S) + 1)]
    dp[0][0][0] = 1


    for dig in range(len(S)):
        targetDigNumMax = int(S[dig])
        for smaller in range(2):
            for sum in range(len(S)):
                ceil = 9 if smaller else targetDigNumMax
                for num in range(ceil + 1):
                    next_smaller = 0
                    if smaller == 1 or num < targetDigNumMax:
                        next_smaller = 1
                    if num == 1:
                        dp[dig + 1][next_smaller][sum + 1] += dp[dig][smaller][sum] 
                    else:
                        dp[dig + 1][next_smaller][sum] += dp[dig][smaller][sum] 

    ans = 0
    for i in range(len(S) + 1):
        for smaller in range(2):
            ans += dp[len(S)][smaller][i] * i
    print(ans)

    # for dig in range(len(S)):
    #     for sum in range(len(S) + 1):
    #         # dig桁目はNの上限でなく、dig+1桁目はなんでも良い時。
    #         dp[dig + 1][1][sum + 1] += dp[dig][1][sum]
    #         dp[dig + 1][1][sum] += dp[dig][1][sum] * 9
    #         # dig桁目はNの上限であり、dig+1桁目はNの上限より小さい時。 dig+1桁目 == 0のケースは影響ないので無視。
    #         if int(S[dig]) > 1:
    #             dp[dig + 1][1][sum + 1] += dp[dig][0][sum]  # dig+1桁目が1
    #             dp[dig + 1][1][sum] += dp[dig][0][sum] * (int(S[dig]) - 1) # dig+1桁目が1以外
    #         elif int(S[dig]) == 1:
    #             dp[dig + 1][1][sum] += dp[dig][0][sum]  # dig+1桁目が1
    #         # dig桁目はNの上限であり、dig+1桁目もNの上限である時。
    #         if int(S[dig]) == 1:
    #             dp[dig + 1][0][sum + 1] += dp[dig][0][sum]
    #         else:
    #             dp[dig + 1][0][sum] += dp[dig][0][sum]

    # ans = 0
    # for i in range(len(S) + 1):
    #     for isCeil in range(2):
    #         ans += dp[len(S)][isCeil][i] * i
    # print(ans)

    return


# Generated by 2.6.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    solve(N)

if __name__ == '__main__':
    main()
