#!/usr/bin/env python3
import sys
from collections import defaultdict
import bisect

def solve(N: int, A: "List[int]"):
    d = defaultdict(list)
    for i, aa in enumerate(A):
        d[aa].append(i)
    print(d)
    for i in range(N):
        a = A[i]
        k_idx = bisect.bisect_right(d[a], i)
        if k_idx >= len(d[a]):
            # print(i, N - 1)
            continue
        for k in d[a][k_idx:]:
            print(i, min(i, k - i - 1) + 1) 
            # print(i, N - 1 + (min(i, k - i) + 1))
# 
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, A)

if __name__ == '__main__':
    main()
