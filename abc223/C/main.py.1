#!/usr/bin/env python3
import sys
from itertools import accumulate
from bisect import bisect
from functools import reduce
import math


def solve(N: int, A: "List[int]", B: "List[int]"):
    Aacc = list(accumulate(A))
    # print("Aacc", Aacc)
    def my_lcm_base(x, y):
        return (x * y) // math.gcd(x, y)
    def my_lcm(*numbers):
        return reduce(my_lcm_base, numbers, 1)
    mm = my_lcm(*B)
    aa = []
    for i in range(N):
        aa.append(A[i] * (mm // B[i]))
    # print(aa)
    acc = list(accumulate(aa))
    # print(sum(aa))
    x = sum(aa) / 2
    # print("x", x)
    # print("acc", acc)
    point = bisect(acc, x)
    # print(point, "-1")
    # print(Aacc[point - 1])
    # print((x - acc[point - 1]))
    # print(B[point])
    # print((x - acc[point - 1]) / (mm // B[point]))
    print(Aacc[point - 1] + (x - acc[point - 1]) / (mm // B[point]))

    return


# Generated by 2.9.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int()] * (N)  # type: "List[int]"
    B = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    solve(N, A, B)

if __name__ == '__main__':
    main()
