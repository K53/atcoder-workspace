#!/usr/bin/env python3
import sys
import math

def solve(N: int, A: "List[int]"):
    def f(k: float or int) -> float:
        res = 0
        for i in range(N):
            res += abs(A[i] - (i + 1) - k)
        return res
        
    def ternarySearch(l: float, r: float, accept_range: int = 2) -> tuple:
        """
        - l : 定義域(l ≦ x ≦ r)の左端
        - r : 定義域(l ≦ x ≦ r)の右端
        - accept_range : 探索で絞った後の範囲
        三分探索を行い、最小値を取る値の範囲l ~ rを返却する。
        """
        # 範囲が accept_range 以下に絞られるまで回す。
        while r - l > accept_range:
            # オーバーフローしないための三等分点を置く
            mid1 = l + (r - l) // 3
            mid2 = r - (r - l) // 3
            if f(mid1) < f(mid2):
                r = mid2
            else:
                l = mid1
        return (l, r)

    l, r = ternarySearch(l=-(10 ** 18), r=10 ** 18)
    ans = 10 ** 18
    for i in range(math.floor(l) - 2, math.ceil(r) + 2):
        ans = min(ans, f(i))
    print(ans)
    return

# Generated by 2.9.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, A)

if __name__ == '__main__':
    main()
