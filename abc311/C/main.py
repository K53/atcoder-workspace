#!/usr/bin/env python3
import sys
from collections import deque

def solve(N: int, A: "List[int]"):
    A = [i - 1 for i in A]
    INF = 10 ** 16
    q = deque()
    route = [1]
    dist = [INF] * N
    q.append(0)
    dist[0] = 0
    while q:
        now = q.popleft()
        next = A[now]
        if dist[next] != INF:
            # route.append(next + 1)
            idx = route.index(next + 1)
            print(len(route[idx:]))
            print(*route[idx:])
            return
        q.append(next)
        dist[next] = dist[now] + 1
        route.append(next + 1)
    return 


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, A)

if __name__ == '__main__':
    main()
