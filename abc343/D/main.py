#!/usr/bin/env python3
import sys
from collections import defaultdict

def solve(N: int, T: int, A: "List[int]", B: "List[int]"):
    d = defaultdict(int)
    l = [0] * N
    d[0] = N
    for i in range(T):
        d[l[A[i] - 1]] -= 1
        if d[l[A[i] - 1]] == 0:
            del d[l[A[i] - 1]]
        l[A[i] - 1] += B[i]
        d[l[A[i] - 1]] += 1
        print(len(d))
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    T = int(next(tokens))  # type: int
    A = [int()] * (T)  # type: "List[int]"
    B = [int()] * (T)  # type: "List[int]"
    for i in range(T):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    solve(N, T, A, B)

if __name__ == '__main__':
    main()
