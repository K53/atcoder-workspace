#!/usr/bin/env python3
import sys

YES = "Yes"  # type: str
NO = "No"  # type: str

def solve(V: "List[int]"):
    ax, ay, az = 0, 0, 0
    for bx in range(-7, 8):
        x_ab = min(ax, bx) + 7 - max(ax, bx)
        for cx in range(-7, 8):
            x_bc = min(bx, cx) + 7 - max(bx, cx)
            x_ca = min(cx, ax) + 7 - max(cx, ax)
            x_abc = min(ax, bx, cx) + 7 - max(ax, bx, cx)
            for by in range(-7, 8):
                y_ab = min(ay, by) + 7 - max(ay, by)
                for cy in range(-7, 8):
                    y_bc = min(by, cy) + 7 - max(by, cy)
                    y_ca = min(cy, ay) + 7 - max(cy, ay)
                    y_abc = min(ay, by, cy) + 7 - max(ay, by, cy)
                    for bz in range(-7, 8):
                        z_ab = min(az, bz) + 7 - max(az, bz)
                        for cz in range(-7, 8):
                            z_bc = min(bz, cz) + 7 - max(bz, cz)
                            z_ca = min(cz, az) + 7 - max(cz, az)
                            z_abc = min(az, bz, cz) + 7 - max(az, bz, cz)
                            if x_abc <= 0 or y_abc <= 0 or z_abc <= 0:
                                triple = 0
                            else:
                                triple = x_abc * y_abc * z_abc

                            if triple != V[2]: continue
                            
                            if x_ab <= 0 or y_ab <= 0 or z_ab <= 0:
                                double_ab = 0
                            else:
                                double_ab = x_ab * y_ab * z_ab
                            if x_bc <= 0 or y_bc <= 0 or z_bc <= 0:
                                double_bc = 0
                            else:
                                double_bc = x_bc * y_bc * z_bc
                            if x_ca <= 0 or y_ca <= 0 or z_ca <= 0:
                                double_ca = 0
                            else:
                                double_ca = x_ca * y_ca * z_ca
                                        
                            if double_ab + double_bc + double_ca - triple * 3 != V[1]: continue
                            
                            if 343 * 3 - V[1] * 2 - V[2] * 3 != V[0]:
                                continue
                            print(YES)
                            print(ax, ay, az, bx, by, bz, cx, cy, cz)
                            exit(0)

    print(NO)
    return

# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    V = [int(next(tokens)) for _ in range(3)]  # type: "List[int]"
    solve(V)

if __name__ == '__main__':
    main()
