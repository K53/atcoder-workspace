#!/usr/bin/env python3

class SegmentTree:
    def __init__(self, initVal: int, func: "function(int, int)"):
        self.initVal = initVal
        self.func = func
        self.bottomLen = 5 * 10 ** 5 + 1
        self.offset = self.bottomLen        # セグ木の最下層の最初のインデックスに合わせるためのオフセット
        self.segLen = self.bottomLen * 2
        self.tree = [initVal] * self.segLen

    """ 一点加算
    tree[index] += val
    """
    def pointAdd(self, index: int, val: int):
        segIndex = index + self.offset
        self.tree[segIndex] += val # Add
        while True:
            segIndex //= 2
            if segIndex == 0:
                break
            self.tree[segIndex] = self.func(self.tree[segIndex * 2], self.tree[segIndex * 2 + 1])
    
    """ 一点更新
    tree[index] = val
    """
    def pointUpdate(self, index: int, val: int):
        segIndex = index + self.offset
        self.tree[segIndex] = val # Update
        while True:
            segIndex //= 2
            if segIndex == 0:
                break
            self.tree[segIndex] = self.func(self.tree[segIndex * 2], self.tree[segIndex * 2 + 1])

    """ 区間最小値 (RMQ)
    """
    def rangeQuery(self, l: int, r: int):
        l += self.offset
        r += self.offset
        res = self.initVal
        while l < r:
            if l % 2 == 1:
                res = self.func(res, self.tree[l])
                l += 1
            l //= 2
            if r % 2 == 1:
                res = self.func(res, self.tree[r - 1])
                r -= 1
            r //= 2
        return res

def myOr(x, y):
    return x | y

# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    N = int(input())
    S = list(input())
    Q = int(input())
    trs = [SegmentTree(initVal=0, func=myOr) for _ in range(26)]
    for i in range(N):
        tr = trs[ord(S[i]) - ord("a")]
        tr.pointUpdate(i, 1) 

    for _ in range(Q):
        c = list(input().split())
        if c[0] == "1":
            a = int(c[1]) - 1
            b = c[2]
            trs[ord(S[a]) - ord("a")].pointUpdate(a, 0)
            trs[ord(b) - ord("a")].pointUpdate(a, 1)
            S[a] = b
        else:
            a = int(c[1]) - 1
            b = int(c[2]) - 1
            ans = 0
            for tr in trs:
                ans += tr.rangeQuery(a, b + 1)
            print(ans)
    return

if __name__ == '__main__':
    main()
