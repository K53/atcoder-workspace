#!/usr/bin/env python3
import sys

YES = "Yes"  # type: str
NO = "No"  # type: str
from itertools import groupby
def runLengthEncode(S: str) -> "List[tuple(str, int)]":
    grouped = groupby(S)
    res = []
    for k, v in grouped:
        res.append(k)
    return res

def solve(S: str):
    S = "_" + S
    if S[1] == "1":
        print(NO)
        return
    l = [
        bool(int(S[7])),
        bool(int(S[4])),
        bool(int(S[8])) or bool(int(S[2])), 
        bool(int(S[5])) or bool(int(S[1])), 
        bool(int(S[9])) or bool(int(S[3])), 
        bool(int(S[6])), 
        bool(int(S[10]))
    ]
    ll = runLengthEncode(l)
    for i in range(len(ll)):
        if ll[i]:
            if i + 2 < len(ll) and ll[i + 1] == False and ll[i + 2] == True:
                print(YES)
                return

    print(NO)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    S = next(tokens)  # type: str
    solve(S)

if __name__ == '__main__':
    main()
