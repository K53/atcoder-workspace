#!/usr/bin/env python3
import sys
INF = 10 ** 16

def solve(N: int, M: int, A: "List[int]"):
    dp = [[-INF for _ in range(M + 1)] for _ in range(N + 1)]
    dp[0][0] = 0
    for i in range(N):
        for mm in range(M + 1):
            if mm > i:
                continue
            # とらない
            dp[i + 1][mm] = max(dp[i + 1][mm], dp[i][mm])
            # とる
            if mm + 1 < M + 1:
                dp[i + 1][mm + 1] = max(dp[i + 1][mm + 1], dp[i][mm] + (mm + 1) * A[i + 1 - 1])
    # ans = -INF
    # for i in range(N + 1):
        # print(dp[i])
        # ans = max(ans, dp[i][-1])
    # print(ans)
    print(dp[-1][-1])

        

    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, M, A)

if __name__ == '__main__':
    main()
