#!/usr/bin/env python3
from collections import deque
INF = 10 ** 16

# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    N = int(input())
    p = list(map(int, input().split()))
    G = [[] for _ in range(N)]
    revG = [[] for _ in range(N)]
    for i in range(N - 1):
        G[p[i] - 1].append(i + 1)
        revG[i + 1].append(p[i] - 1)
    # print(revG)
    m = [i for i in range(N)]
    def bfs(G: "List[to]", start_node: int) -> list:
        q = deque()
        q.append(start_node)
        seen = [0] * N
        while q:
            now = q.popleft()
            if seen[now]:
                continue
            seen[now] = 1
            for next in G[now]:
                if m[next] <= m[start_node]:
                    continue
                q.append(next)
                m[next] = start_node
        return

    Q = int(input())
    for _ in range(Q):
        t, *args = map(int, input().split())
        if t == 1:
            revG[args[1] - 1].append(args[0] - 1)
            G[args[0] - 1].append(args[1] - 1)
            bfs(revG, args[1] - 1)

            # print(m)
        else:
            print(m[args[0] - 1] + 1)

if __name__ == '__main__':
    main()
