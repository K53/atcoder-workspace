#!/usr/bin/env python3
import sys


def solve(N: int, K: int, A: "List[int]"):
    A.sort(reverse=True)
    A.append(0)
    # print(A)
    ans = 0
    double = 1
    for i in range(N):
        num = min((A[i] - A[i + 1]) * double, K)
        # print("#",num)
        p, q = divmod(num, double)
        ans += (A[i] + A[i] - p + 1) * p * double // 2 + (A[i] - p) * q
        K -= num
        double += 1
        # print(ans)
        if K <= 0:
            break
    print(ans)

        

    return


# Generated by 2.8.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, K, A)

if __name__ == '__main__':
    main()
