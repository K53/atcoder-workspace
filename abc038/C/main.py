#!/usr/bin/env python3
import sys


def solve(N: int, a: "List[int]"):
    a = a + [-100]
    N += 1
    l = 0
    r = 1
    ans = 0
    for _ in range(N):
        # 行けるだけrを進める。sumが条件を満たさなくなったところで抜ける。※抜ける時、条件を満たさなくなったrの次を指している。
        while r < N and a[r - 1] < a[r]:
            print("#", l, r, a[l:r])
            r += 1
        # → 条件を満たしていない状態をlを進めることで修正する。
        # ifの前でansに対する更新を試みてはいけない理由→この時点では条件を満たしていないから。
        # ifを構えるのはwhileを抜ける理由がrの上限だった場合。lを縮める必要がないから。
        # if l == r:
        #     l += 1
        #     r += 1
        #     continue
        if r < N and a[r - 1] >= a[r]:
            print(">", l, r, a[l:r]) # rを含まないのでr=N+1までは来る。
            num = r - 1 - l + 1
            ans += num * (num + 1) // 2
            l = r
            r += 1
    print(ans)
    return


# Generated by 2.11.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    a = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, a)

if __name__ == '__main__':
    main()
