#!/usr/bin/env python3
from collections import defaultdict
import sys
INF = 10 ** 16

def solve(N: int, K: int, c: "List[int]", p: "List[int]"):
    d = defaultdict(lambda: INF)
    for cc, pp in zip(c, p):
        d[cc] = min(d[cc], pp)
    l = sorted(d.values())
    if len(l) < K:
        print(-1)
        return
    print(sum(l[:K]))
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    c = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    p = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, K, c, p)

if __name__ == '__main__':
    main()
