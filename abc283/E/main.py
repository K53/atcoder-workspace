#!/usr/bin/env python3
import sys


from itertools import groupby
def runLengthEncode(S: str) -> "List[tuple(str, int)]":
    grouped = groupby(S)
    res = []
    for k, v in grouped:
        res.append((k, int(len(list(v)))))
    return res

def rev(s, f):
    if f == 1:
        return 1 - s
    else:
        return s

def solve(H: int, W: int, A: "List[List[int]]"):
    from collections import deque
    # pre, isPreFlip, diff, score
    q = deque([(0, -1, [0, 0, 1], 0), (0, 1, [0, 0, 1], 1)])
    ans = 10 ** 16
    while len(q) != 0:
        pre, isPreFlip, isolate, score = q.popleft()
        print(pre, isPreFlip, isolate, score)
        cur = pre + 1
        if cur == H - 1:
            if sum(isolate) == 0:
                ans = min(ans, score)
            continue
        preA = A[pre]
        curA = A[cur]
        needFlip = 0 
        # 1 : need 
        # -1 : not need
        end = 0
        for ww in range(W):
            if isolate[ww]:
                if rev(preA[ww], isPreFlip) == curA[ww] and (needFlip == 0 or needFlip == -1):
                    needFlip = -1
                elif rev(preA[ww], isPreFlip) == 1 - curA[ww] and (needFlip == 0 or needFlip == 1):
                    needFlip = 1
                else:
                    end = 1
                    break
        print(needFlip, end)
        if end:
            continue
        newIso = []
        if needFlip == 0:
            needFlip = -1
        for ww in range(W):
            ss = set()
            if ww != 0:
                ss.add(rev(curA[ww - 1], needFlip))
            if ww != W - 1:
                ss.add(rev(curA[ww + 1], needFlip))
            
            ss.add(rev(preA[ww], isPreFlip))
            if rev(curA[ww], needFlip) in ss:
                newIso.append(0)
            else:
                newIso.append(1)
        print("new->", (cur, needFlip, newIso, (score + 1) if needFlip else score))
        q.append((cur, needFlip, newIso, (score + 1) if needFlip else score))
    print(ans)








    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    H = int(next(tokens))  # type: int
    W = int(next(tokens))  # type: int
    A = [[int(next(tokens)) for _ in range(W)] for _ in range(H)]  # type: "List[List[int]]"
    solve(H, W, A)

if __name__ == '__main__':
    main()
