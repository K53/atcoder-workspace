#!/usr/bin/env python3
import sys

def solve(N: int, K: int, p: "List[int]"):
    l = 0
    r = l + K - 1
    s = []
    s.append(sum(p[l:r + 1]))
    for i in range(N - K):
        l += 1
        r += 1
        s.append(s[i] - p[l - 1] + p[r])
    print((max(s) + K) / 2)
    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    p = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, K, p)

if __name__ == '__main__':
    main()
