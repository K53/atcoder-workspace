#!/usr/bin/env python3
import sys

YES = "Yes"  # type: str
NO = "No"  # type: str


def solve(N: int, D: "List[int]", S: "List[int]", T: "List[int]"):
    sch = [[0] * 25 for _ in range(10 ** 5)]
    for dd, ss, tt in zip(D, S, T):
        sch[dd - 1][ss] += 1
        sch[dd - 1][tt] -= 1
    
    for dd in range(10 ** 5):
        now = 0
        for i in range(25):
            now += sch[dd][i]
            if now >= 2:
                print(YES)
                return
            sch[dd][i] = now
    print(NO)
    return


# Generated by 2.11.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    D = [int()] * (N)  # type: "List[int]"
    S = [int()] * (N)  # type: "List[int]"
    T = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        D[i] = int(next(tokens))
        S[i] = int(next(tokens))
        T[i] = int(next(tokens))
    solve(N, D, S, T)

if __name__ == '__main__':
    main()
