#!/usr/bin/env python3


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    H, W, K = map(int, input().split())
    sy, sx, gy, gx = map(lambda x: int(x) - 1, input().split())
    G = []
    for _ in range(H):
        G.append(input())
    INF = 10 ** 16
    from collections import deque
    def bfs(G, H, W, startY, startX) -> list:
        INF = 10 ** 16
        q = deque()
        dist = [[INF] * W for _ in range(H)]
        pre_dir = -1
        #   0
        # 3   1
        #   2
        step = 0
        orgY, orgX = -1, -1
        q.append((startY, startX, pre_dir, step, orgY, orgX))
        dist[startY][startX] = 0
        while q:
            nowy, nowx, pre_dir, step, pre_y, pre_x = q.popleft()
            for dx, dy, dir in [(0, 1, 0), (1, 0, 1), (0, -1, 2), (-1, 0, 3)]:
                nexty = nowy + dy
                nextx = nowx + dx
                if pre_y == nexty and pre_x == nextx:
                    continue
                next_dir = dir
                if nexty < 0 or nextx < 0 or nexty >= H or nextx >= W or G[nexty][nextx] == "@":
                    continue
                if pre_dir != next_dir:
                    dist[nexty][nextx] = dist[nowy][nowx] + 1
                    q.append((nexty, nextx, next_dir, 1, nowy, nowx))
                elif step == 0:
                    dist[nexty][nextx] = dist[nowy][nowx] + 1
                    q.append((nexty, nextx, next_dir, step + 1, nowy, nowx))
                elif step == K:
                    dist[nexty][nextx] = dist[nowy][nowx]
                    q.append((nexty, nextx, next_dir, 0, nowy, nowx))
                else:
                    dist[nexty][nextx] = dist[nowy][nowx]
                    q.append((nexty, nextx, next_dir, step, nowy, nowx))
        return dist
    
    d = bfs(G, H, W, sy, sx)
    print(d)


if __name__ == '__main__':
    main()
