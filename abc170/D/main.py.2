#!/usr/bin/env python3
import sys
from collections import Counter
def solve(N: int, A: "List[int]"):
    N = max(A)
    A = sorted(A)
    d = Counter(A)
    primeTable = [True] * (N + 1)
    primeTable[0] = False
    minfactor = [0] * (N + 1)
    minfactor[1] = 1
    ans = [] 
    for p in A:  # p : 判定対象の数
        if not primeTable[p]:
            continue
        minfactor[p] = p
        ans.append(p)
        for i in range(p, N + 1, p):
            if minfactor[i] == 0:
                minfactor[i] = p
            primeTable[i] = False
    c = 0
    for i in ans:
        if d[i] >= 2:
            continue
        c += 1
    print(c)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, A)

if __name__ == '__main__':
    main()
