#!/usr/bin/env python3
import sys

MOD = 998244353  # type: int


def solve(N: int, A: "List[int]", B: "List[int]"):
    dp = [[0] * 2 for _ in range(N)]
    dp[0][0] = 1
    dp[0][1] = 1
    for i in range(1, N):
        if A[i - 1] != A[i]:
            dp[i][0] += dp[i - 1][0]
        if B[i - 1] != A[i]:
            dp[i][0] += dp[i - 1][1]
        if A[i - 1] != B[i]:
            dp[i][1] += dp[i - 1][0]
        if B[i - 1] != B[i]:
            dp[i][1] += dp[i - 1][1]
        dp[i][0] %= MOD
        dp[i][1] %= MOD
    print((dp[-1][0] + dp[-1][1]) % MOD)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int()] * (N)  # type: "List[int]"
    B = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    solve(N, A, B)

if __name__ == '__main__':
    main()
