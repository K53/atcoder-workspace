#!/usr/bin/env python3
import sys


def solve(N: int, p: "List[int]"):
    from itertools import groupby
    def runLengthEncode(S: str) -> "List[tuple(str, int)]":
        grouped = groupby(S)
        res = []
        for k, v in grouped:
            res.append((k, int(len(list(v)))))
        return res
    l = []
    for i, pp in enumerate(p):
        if i + 1 == pp:
            l.append("x")
        else:
            l.append("o")
    ll = runLengthEncode(l)
    ans = 0
    for s, i in ll:
        if s == "x":
            p, q = divmod(i, 2)
            if q != 0:
                p += 1
            ans += p
    print(ans)
    return


# Generated by 2.9.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    p = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, p)

if __name__ == '__main__':
    main()
