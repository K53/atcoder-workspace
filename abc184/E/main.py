#!/usr/bin/env python3
from collections import defaultdict, deque
INF = 10 ** 16

# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    H, W = map(int, input().split())
    G = []
    sx, sy = -1, -1
    gx, gy = -1, -1
    for i in range(H):
        l = list(input())
        if "S" in l:
            sx = l.index("S")
            sy = i
            l[sx] = "."
        if "G" in l:
            gx = l.index("G")
            gy = i
            l[gx] = "."
        G.append(l)
    d = defaultdict(list)
    for hh in range(H):
        for ww in range(W):
            if G[hh][ww] != ".":
                d[ord(G[hh][ww]) - ord("a")].append((hh, ww))
    
    tel = [INF] * 26
    q = deque()
    dist = [[INF] * W for _ in range(H)]
    q.append((sy, sx))
    dist[sy][sx] = 0
    while q:
        nowy, nowx = q.popleft()
        if nowy == -1:
            for nexty, nextx in d[nowx]:
                if dist[nexty][nextx] != INF:
                    continue
                q.append((nexty, nextx))
                dist[nexty][nextx] = tel[nowx] + 1
        else:
            for dx, dy in [(0, 1), (1, 0), (-1, 0), (0, -1)]:
                nexty = nowy + dy
                nextx = nowx + dx
                if nexty < 0 or nextx < 0 or nexty >= H or nextx >= W or dist[nexty][nextx] != INF or G[nexty][nextx] == "#":
                    continue
                if G[nexty][nextx] != ".":
                    idx = ord(G[nexty][nextx]) - ord("a")
                    if tel[idx] == INF:
                        q.append((-1, idx))
                        tel[idx] = dist[nowy][nowx] + 1

                q.append((nexty, nextx))
                dist[nexty][nextx] = dist[nowy][nowx] + 1
    print(-1 if dist[gy][gx] == INF else dist[gy][gx])
    return


if __name__ == '__main__':
    main()
