#!/usr/bin/env python3
import sys


def solve(A: int, B: int, C: int):
    # dp[aa][bb][cc] := aa/bb/cc枚持ってる状態からどれか100以上にするまでの回数。
    T = 101
    dp = [[[0] * 101 for _ in range(T)] for _ in range(T)]
    for aa in reversed(range(T - 1)):
        for bb in reversed(range(T - 1)):
            for cc in reversed(range(T - 1)):
                total = aa + bb + cc
                if total == 0:
                    continue
                dp[aa][bb][cc] = ((dp[aa + 1][bb][cc] + 1) * aa + (dp[aa][bb + 1][cc] + 1) * bb + (dp[aa][bb][cc + 1] + 1) * cc) / total
    
    print(dp[A][B][C])
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    A = int(next(tokens))  # type: int
    B = int(next(tokens))  # type: int
    C = int(next(tokens))  # type: int
    solve(A, B, C)

if __name__ == '__main__':
    main()
