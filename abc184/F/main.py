#!/usr/bin/env python3
import sys
import bisect

def solve(N: int, T: int, A: "List[int]"):
    preA = A[:(N // 2)]
    sufA = A[(N // 2):]
    preSumA = []
    sufSumA = []
    for i in range(2 ** len(preA)):
        tmp = 0
        for b in range(len(preA)):
            if (i >> b) & 1:
                tmp += preA[b]
        preSumA.append(tmp)
    for i in range(2 ** len(sufA)):
        tmp = 0
        for b in range(len(sufA)):
            if (i >> b) & 1:
                tmp += sufA[b]
        sufSumA.append(tmp)
    preSumA.sort()
    sufSumA.sort()
    # print(preSumA)
    # print(sufSumA)
    ans = 0
    for i in preSumA:
        idx = bisect.bisect_right(sufSumA, T - i) - 1
        if idx < 0:
            continue
        ans = max(ans, i + sufSumA[idx])
    print(ans)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    T = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, T, A)

if __name__ == '__main__':
    main()
