#!/usr/bin/env python3
import sys


def solve(N: int, X: "List[int]", Y: "List[int]", Z: "List[int]"):
    def dist(i, j):
        return abs(X[i] - X[j]) + abs(Y[i] - Y[j]) + max(0, Z[j] - Z[i])
    
    INF = 1 << 60
    dp = [[INF] * (1 << N) for _ in range(N)]
    dp[0][1 << 0] = 0 # 街0にいる状態(訪問済集合は2^0)
    # dp[i][bit] 今は街iにいて、すでに言った街の集合bitの時。
    for bit in range(1 << N):
        for now in range(N):
            if not (bit >> now & 1):
                continue # 現在地が集合に入ってないケースはありえないので外す。
            for next in range(N):
                if (bit >> next & 1): # すでに訪問している場合
                    continue
                nextBit = bit | (1 << next)
                dp[next][nextBit] = min(dp[next][nextBit], dp[now][bit] + dist(now, next))

    res = INF
    for i in range(N):
        res = min(res, dp[i][-1] + dist(i, 0))
    print(res)
    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    X = [int()] * (N)  # type: "List[int]"
    Y = [int()] * (N)  # type: "List[int]"
    Z = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        X[i] = int(next(tokens))
        Y[i] = int(next(tokens))
        Z[i] = int(next(tokens))
    solve(N, X, Y, Z)

if __name__ == '__main__':
    main()
