#!/usr/bin/env python3
import sys
INF = 10 ** 16

def solve(N: int, X: "List[int]", Y: "List[int]", Z: "List[int]"):
    dp = [[INF] * (N) for _ in range(2 ** N)]
    # for i in range(N):
    #     dp[1 << i][i] = 0
    dp[1][0] = 0
    # print(dp)
    for i in range(2 ** N):
        for cur in range(N):
            if (i >> cur) & 1:
                for next in range(N):
                    diff = abs(X[next] - X[cur]) + abs(Y[next] - Y[cur]) + max(0, Z[next] - Z[cur])
                    dp[i | (1 << next)][next] = min(dp[i | (1 << next)][next], dp[i][cur] + diff)
    # print(dp)
    print(dp[-1][0])
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    X = [int()] * (N)  # type: "List[int]"
    Y = [int()] * (N)  # type: "List[int]"
    Z = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        X[i] = int(next(tokens))
        Y[i] = int(next(tokens))
        Z[i] = int(next(tokens))
    solve(N, X, Y, Z)

if __name__ == '__main__':
    main()
