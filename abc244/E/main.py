#!/usr/bin/env python3
import sys

MOD = 998244353  # type: int

# dp := [偶奇][k手目][位置]
def solve(N: int, M: int, K: int, S: int, T: int, X: int, U: "List[int]", V: "List[int]"):
    dp = [[[0] * N for _ in range(K + 1)] for _ in range(2)]
    dp[0][0][S - 1] = 1
    G = [[] for _ in range(N)]
    for uu, vv in zip(U, V):
        G[uu - 1].append(vv - 1)
        G[vv - 1].append(uu - 1)
    # print(G)
    for kk in range(K):
        for now in range(N):
            for eo in range(2):
                if dp[eo][kk][now] == 0:
                    continue
                for next in G[now]:
                    if next == X - 1:
                        dp[eo ^ 1][kk + 1][next] += dp[eo][kk][now]
                        dp[eo ^ 1][kk + 1][next] %= MOD
                    else:
                        dp[eo][kk + 1][next] += dp[eo][kk][now]
                        dp[eo][kk + 1][next] %= MOD
    # for i in range(K + 1):
    #     print(dp[0][i])
    # print("---")
    # for i in range(K + 1):
    #     print(dp[1][i])
    print(dp[0][-1][T - 1] % MOD)




    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    S = int(next(tokens))  # type: int
    T = int(next(tokens))  # type: int
    X = int(next(tokens))  # type: int
    U = [int()] * (M)  # type: "List[int]"
    V = [int()] * (M)  # type: "List[int]"
    for i in range(M):
        U[i] = int(next(tokens))
        V[i] = int(next(tokens))
    solve(N, M, K, S, T, X, U, V)

if __name__ == '__main__':
    main()
