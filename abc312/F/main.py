#!/usr/bin/env python3
import sys
import heapq

def solve(N: int, M: int, T: "List[int]", X: "List[int]"):
    t0q = []
    t1q = []
    t2q = []
    for i in range(N):
        if T[i] == 0:
            heapq.heappush(t0q, X[i])
        elif T[i] == 1:
            heapq.heappush(t1q, -X[i])
        else:
            heapq.heappush(t2q, -X[i])
    rest_buy = len(t0q)

    # print(t0q)
    # print(t1q)
    # print(t2q)

    # まだ購入できる
    while rest_buy + 2 <= M and len(t1q) > 0 and len(t2q) > 0:
        val = -heapq.heappop(t1q)
        key = -heapq.heappop(t2q)
        heapq.heappush(t0q, val)
        rest_buy += 2
        key -= 1

        for i in range(min(key, M - rest_buy)):
            if len(t1q) <= 0:
                break
            val = -heapq.heappop(t1q)
            heapq.heappush(t0q, val)
            rest_buy += 1
    
    for i in range(M - rest_buy):
        heapq.heappush(t0q, 0)
    
    # print(t0q)
    # print(t1q)
    # print(t2q)
    

    while len(t1q) > 0 and len(t2q) > 0:
        minval = heapq.heappop(t0q)
        secval = heapq.heappop(t0q)
        val = -t1q[0]
        key = -t2q[0]
        if minval + secval <= val: # 交換した方がいい
            heapq.heappop(t1q)
            heapq.heappop(t2q)
            heapq.heappush(t0q, val)
            key -= 1
            for i in range(key):
                if len(t1q) <= 0:
                    break
                minval = t0q[0]
                val = -t1q[0]
                if minval <= val:
                    heapq.heappop(t0q)
                    heapq.heappop(t1q)
                    heapq.heappush(t0q, val)
                else:
                    break
        else: # 交換しない方がいい
            heapq.heappush(t0q, minval)
            heapq.heappush(t0q, secval)
            break

    
    t0q.sort()
    print(sum(t0q[:M]))
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    T = [int()] * (N)  # type: "List[int]"
    X = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        T[i] = int(next(tokens))
        X[i] = int(next(tokens))
    solve(N, M, T, X)

if __name__ == '__main__':
    main()
