#!/usr/bin/env python3
import sys

def solve(N: int, a: "List[int]"):
    d2 = [0] * N
    d3 = [0] * N
    rest = []
    for idx in range(N):
        aa = a[idx]
        for _ in range(30):
            p, q = divmod(aa, 2)
            if q != 0:
                break
            aa = p
            d2[idx] += 1
        # print(aa, "#")
        for _ in range(30):
            p, q = divmod(aa, 3)
            if q != 0:
                rest.append(aa)
                break
            aa = p
            d3[idx] += 1
    
    if len(set(rest)) != 1:
        print(-1)
        return
    
    ans = sum(d2) - min(d2) * N + sum(d3) - min(d3) * N
    print(ans)
    # print(d2)
    # print(d3)
    # print(rest)

    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    a = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, a)

if __name__ == '__main__':
    main()
