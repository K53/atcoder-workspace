#!/usr/bin/env python3
import sys


def solve(N: int, M: int, a: "List[int]", b: "List[int]"):
    sys.setrecursionlimit(10 ** 9)
    class SCC():
        def __init__(self, nodesNum: int):
            self.nodesNum = nodesNum                    # 頂点数
            self.G = [[] for _ in range(self.nodesNum)] # グラフ
            self.rG = [[] for _ in range(self.nodesNum)]# 全ての辺を逆向きにしたグラフ
            self.seen = [False] * self.nodesNum         # 各ノードが訪問済みかどうかのフラグ
            self.firstOrder = []                        # ノードの行きがけ順(0-indexで採番)
            self.lastOrder = []                         # ノードの帰りがけ順(0-indexで採番)
            self.tplConnections = [-1] * self.nodesNum  # 強連結成分分解の結果(0-indexで採番。数値が若いものから順にトポロジカルソートされている)
            self.sccNum = 0                             # 強連結成分の採番用カウンタ(0-indexで採番)
        
        # 辺の追加
        def addEdge(self, fromNode: int, toNode: int, index1: bool = False):
            if not index1:
                fromNode -= 1
                toNode -= 1
            self.G[fromNode].append(toNode)
            self.rG[toNode].append(fromNode)

        # DFS
        def _dfs(self, now: int):
            self.firstOrder.append(now)
            self.seen[now] = True
            for next in self.G[now]:
                if self.seen[next]:
                    continue
                self._dfs(next)
            self.lastOrder.append(now)
        
        # 逆向きグラフの強連結成分チェック
        def _reverseDfs(self, now: int):
            self.seen[now] = True
            self.tplConnections[now] = self.sccNum
            for next in self.rG[now]:
                if self.seen[next]:
                    continue
                self._reverseDfs(next)
        
        # 強連結成分分解SCC
        def scc(self):
            # 帰りがけ順のナンバリングDFS
            for startNode in range(self.nodesNum):
                if self.seen[startNode]:
                    continue
                self._dfs(startNode)
            # seenをリセット
            self.seen = [False] * N
            # 帰りがけ順の大きい方から順に強連結成分の判定DFS
            for node in self.lastOrder[::-1]:
                if self.seen[node]:
                    continue
                self._reverseDfs(node)
                self.sccNum += 1
            return self.tplConnections

    d = SCC(N)
    for i in range(M):
        d.addEdge(a[i], b[i], True)
    cmp = d.scc()
    ans = [[] for _ in range(N)]
    for i, val in enumerate(cmp):
        ans[val].append(i)
    print(len(set(cmp)))
    for i in range(N):
        if len(ans[i]) != 0:
            print(*[len(ans[i])] + ans[i], sep=" ")
    return


# Generated by 2.6.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    a = [int()] * (M)  # type: "List[int]"
    b = [int()] * (M)  # type: "List[int]"
    for i in range(M):
        a[i] = int(next(tokens))
        b[i] = int(next(tokens))
    solve(N, M, a, b)

if __name__ == '__main__':
    main()
