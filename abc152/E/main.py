#!/usr/bin/env python3
import sys
import math
MOD = 1000000007  # type: int

class Eratosthenes():
    """ 素数列挙
    計算量 : O(NloglogN)
    """
    def __init__(self, N: int) -> None:
        self.primeTable = [True] * (N + 1) # 数iが素数かどうかのフラグ
        self.primeTable[0] = False
        self.primeTable[1] = False
        self.minfactor = [0] * (N + 1) # 数iの最小の素因数
        self.minfactor[1] = 1
        self.primes = []    # 数Nまでの素数のリスト
        for p in range(2, N + 1):  # p : 判定対象の数
            if not self.primeTable[p]:
                continue
            self.minfactor[p] = p
            self.primes.append(p)
            # pが素数のためそれ以降に出現するpの倍数を除外する。
            # なお、ループはp始まりでも良いが、p * _ のかける側はすでに同じ処理で弾かれているはずのため無駄。
            for i in range(p * p, N + 1, p):
                if self.minfactor[i] == 0:
                    self.minfactor[i] = p
                self.primeTable[i] = False
        return
    
    """ 素数判定
    計算量 : 0(1)
    """
    def isPrime(self, n: int) -> bool:
        return self.primeTable[n]

    """ 高速素因数分解
    計算量 : O(NlogN)
    """
    def factorize(self, n: int) -> list:
        res = [] # (p, exp)
        while n > 1:
            p = self.minfactor[n]
            exp = 0
            while self.minfactor[n] == p:
                n //= p
                exp += 1
            res.append((p, exp))
        return res

from collections import defaultdict
def lcm(A: list, mod: int):
    er = Eratosthenes(max(A))

    # d[p] := Aの各要素が素数pで割れる最大回数。
    d = defaultdict(int)
    for aa in A:
        for p, count in er.factorize(aa):
            d[p] = max(d[p], count)
    
    # LCM = Π p^(d[p])
    # max(A)以下の全ての素数pについて、Aの各要素が素数pで割れる最大回数を乗じたものの総積。
    res = 1
    for p, max_count in d.items():
        res *= pow(p, max_count, mod)
        res %= mod
    return res

def solve(N: int, A: "List[int]"):
    ans = 0
    # l = lcm(A, MOD)
    import functools
    def _lcm(a, b):
        return a * b // math.gcd(a, b)

    def lcm(*vals):
        return functools.reduce(_lcm, *vals)
    l = lcm(A)
    l %= MOD
    for aa in A:
        ans += l * pow(aa, MOD - 2, MOD)
        ans %= MOD
    print(ans)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, A)

if __name__ == '__main__':
    main()
