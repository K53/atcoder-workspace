#!/usr/bin/env python3
from operator import le
import sys
import heapq

def func(t: str):
    return ord(t) - ord("a")

def solve(N: int, s: str):
    al = []
    s = list(s)
    heapq.heapify(al)
    for i in range(N):
        heapq.heappush(al, (func(s[i]), -i))
    # print(al)
    left = 0
    right = N
    ans = []
    while len(al) != 0:
        if al[0][0] < func(s[left]):
            if left < -al[0][1] <= right:
                right = -al[0][1]
                s[left], s[right] = s[right], s[left]
                left += 1
                heapq.heappop(al)
                # ans.append(right)
                # print(*s, sep="")
            else:
                heapq.heappop(al)
                continue
        else:
            left += 1
            if left >= right:
                break
        for _ in range(len(al)):
            # print(al, right)
            if -al[0][1] > right:
                heapq.heappop(al)
            else:
                break
    # print(ans)
    print(*s, sep="")
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    s = next(tokens)  # type: str
    solve(N, s)

if __name__ == '__main__':
    main()
