#!/usr/bin/env python3
import sys
from itertools import groupby

def solve(N: int, K: int, a: "List[int]"):
    def runLengthEncode(L: "List[int]") -> "List[tuple(str, int)]":
        grouped = groupby(L)
        res = []
        for k, v in grouped:
            res.append((k, int(len(list(v)))))
        return res
    l = runLengthEncode(a)
    # False ------ ng | ok ---- True
    def is_ok(k: int):
        count = 0
        for aa in l:
            count += aa[1] // (k + 1)
            # print(count)
        return count <= K

    def binSearch(ok: int, ng: int):
        # print(ok, ng)              # はじめの2値の状態
        while abs(ok - ng) > 1:     # 終了条件（差が1となり境界を見つけた時)
            mid = (ok + ng) // 2
            # print("target > ", mid)
            result = is_ok(mid)
            # print(result)
            if result:
                ok = mid            # midが条件を満たすならmidまではokなのでokの方を真ん中まで持っていく
            else:
                ng = mid            # midが条件を満たさないならmidまではngなのでngの方を真ん中まで持っていく
            # print(ok, ng)          # 半分に切り分ける毎の2値の状態
        return ok   
    print(binSearch(2 * 10 ** 5 + 1, 0)) 
    # print(l)
    return


# Generated by 2.6.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    a = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, K, a)

if __name__ == '__main__':
    main()
