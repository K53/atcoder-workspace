#!/usr/bin/env python3
import sys


def solve(N: int, Q: int, a: "List[int]", x: "List[int]", k: "List[int]"):
    compressed = {}
    d = {}
    kind = set(a)
    compressed_to_row = []
    for index, val in enumerate(sorted(list(kind))):
        compressed[val] = index
        d[index] = []
        compressed_to_row.append(val)
    for i in range(N):
        d[compressed[a[i]]].append(i + 1)
    # print(d)
    for xx, kk in zip(x, k):
        if not xx in kind:
            print(-1)
            continue
        # print(compressed[xx])
        if len(d[compressed[xx]]) < kk:
            print(-1)
        else:
            # print(d[compressed[xx]])
            print(d[compressed[xx]][kk - 1])
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    Q = int(next(tokens))  # type: int
    a = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    x = [int()] * (Q)  # type: "List[int]"
    k = [int()] * (Q)  # type: "List[int]"
    for i in range(Q):
        x[i] = int(next(tokens))
        k[i] = int(next(tokens))
    solve(N, Q, a, x, k)

if __name__ == '__main__':
    main()
