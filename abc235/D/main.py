#!/usr/bin/env python3
import sys



def solve(a: int, N: int):
    l = len(str(N))
    mx = 10 ** 7
    INF = 10 ** 16
    from collections import deque
    def bfs() -> list:
        q = deque()
        dist = [INF] * mx
        q.append(1)
        dist[1] = 0
        while q:
            now = q.popleft()
            
            c1 = now * a
            if c1 < mx and dist[c1] == INF and len(str(c1)) <= l:
                q.append(c1)
                dist[c1] = dist[now] + 1


            s = str(now)
            if len(s) >= 2 and s[-1] != "0":
                c2 = int(s[-1] + s[:-1])
                if c2 < mx and dist[c2] == INF:
                    q.append(c2)
                    dist[c2] = dist[now] + 1
        return dist
    d = bfs()
    # print(d)
    # for i in range(15 + 1):
    #     print("#", i)
    #     for ii in range(1000):
    #         if d[ii] == i:
    #             print(ii)
    # print(d[25])
    ans = d[N]
    print(-1 if ans == INF else ans)
    return

# def solve(a: int, N: int):
#     l = len(str(N))
#     import collections
#     q = collections.deque()
#     q.append((1, 0))
#     kind = set()
#     kind.add(1)
#     while len(q) != 0:
#         num, t = q.pop()
#         c1 = num * a
#         if c1 == N:
#             print(t + 1)
#             # return
#         if not c1 in kind and len(str(c1)) <= l:
#             q.append((c1, t + 1))
#             kind.add(c1)
#         s = str(num)
#         if len(s) >= 2 and s[-1] != 0:
#             c2 = int(s[-1] + s[:-1])
#             if c2 == N:
#                 print(t + 1)
#                 # return
#             if not c2 in kind:
#                 q.append((c2, t + 1))
#                 kind.add(c2)
#     print(-1)
#     return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    a = int(next(tokens))  # type: int
    N = int(next(tokens))  # type: int
    solve(a, N)

if __name__ == '__main__':
    main()
