#!/usr/bin/env python3
import sys


def solve(N: int, L: int, x: "List[int]", T: "List[int]"):
    INF = 10 ** 9
    dp = [INF] * (L + 1)
    dp[0] = 0
    isX = [0] * (L + 1)
    for xx in x:
        isX[xx] = 1
    for i in range(L):
        if i + 1 <= L:
            if isX[i]:
                dp[i + 1] = min(dp[i + 1], dp[i] + T[0] + T[2])
            else:
                dp[i + 1] = min(dp[i + 1], dp[i] + T[0])
        if i + 2 <= L:
            if isX[i]:
                dp[i + 2] = min(dp[i + 2], dp[i] + T[0] + T[1] + T[2])
            else:
                dp[i + 2] = min(dp[i + 2], dp[i] + T[0] + T[1])
        else:
            if isX[i]:
                dp[i + (L - i)] = min(dp[i + (L - i)], int(dp[i] + T[0] * 0.5 + T[1] * ((L - i) - 0.5) + T[2]))
            else:
                dp[i + (L - i)] = min(dp[i + (L - i)], int(dp[i] + T[0] * 0.5 + T[1] * ((L - i) - 0.5)))
        if i + 4 <= L:
            if isX[i]:
                dp[i + 4] = min(dp[i + 4], dp[i] + T[0] + T[1] * 3 + T[2])
            else:
                dp[i + 4] = min(dp[i + 4], dp[i] + T[0] + T[1] * 3)
        else:
            if isX[i]:
                dp[i + (L - i)] = min(dp[i + (L - i)], int(dp[i] + T[0] * 0.5 + T[1] * ((L - i) - 0.5) + T[2]))
            else:
                dp[i + (L - i)] = min(dp[i + (L - i)], int(dp[i] + T[0] * 0.5 + T[1] * ((L - i) - 0.5)))
    # print(dp)
    print(dp[L])
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    L = int(next(tokens))  # type: int
    x = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    T = [int(next(tokens)) for _ in range(3)]  # type: "List[int]"
    solve(N, L, x, T)

if __name__ == '__main__':
    main()
