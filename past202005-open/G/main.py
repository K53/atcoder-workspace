#!/usr/bin/env python3
import sys

def solve(N: int, X: int, Y: int, x: "List[int]", y: "List[int]"):
    G = [[0 for _ in range(403)] for _ in range(403)]
    for xx, yy in zip(x, y):
        G[yy + 201][xx + 201] = 1
    # print(G[201][201:204])
    # print(G[202][201:204])
    # print(G[203][201:204])
    from collections import deque
    INF = 10 ** 16
    def bfs(G, H, W, startY, startX) -> list:
        q = deque()
        dist = [[INF] * W for _ in range(H)]
        q.append((startY, startX))
        dist[startY][startX] = 0
        while q:
            nowy, nowx = q.popleft()
            for dx, dy in [(0, 1), (1, 0), (-1, 0), (0, -1), (-1, 1), (1, 1)]:
                nexty = nowy + dy
                nextx = nowx + dx
                if nexty < 0 or nextx < 0 or nexty >= H or nextx >= W or dist[nexty][nextx] != INF or G[nexty][nextx]:
                    continue
                q.append((nexty, nextx))
                dist[nexty][nextx] = dist[nowy][nowx] + 1
        return dist
    d = bfs(G, 403, 403, 201, 201)
    ans = d[Y + 201][X + 201]
    print(ans if ans != INF else -1)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    X = int(next(tokens))  # type: int
    Y = int(next(tokens))  # type: int
    x = [int()] * (N)  # type: "List[int]"
    y = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        x[i] = int(next(tokens))
        y[i] = int(next(tokens))
    solve(N, X, Y, x, y)

if __name__ == '__main__':
    main()
