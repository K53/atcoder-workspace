#!/usr/bin/env python3
import sys


def solve(N: int, Q: int, f: "List[int]", t: "List[int]", x: "List[int]"):
    desk = [[0, 0]] + [[i + 1, i + 1] for i in range(N)] # first last    
    container = [[0, 0] for i in range(N + 1)]    # prev next
    # print(desk)
    # print(container)
    # print()
    for ff, tt, xx in zip(f, t, x):
        srcfirst, srclast = desk[ff]
        destfirst, destlast = desk[tt]
        prev, next = container[xx]

        # 切り離し
        container[prev][1] = 0
        # container[xx][0] = 0
        # 設置
        if destlast != 0:
            container[destlast][1] = xx
        container[xx][0] = destlast

        # 出発地の机
        desk[ff][1] = prev
        if srcfirst == xx:
            desk[ff][0] = prev # == 0
        
        # 目的地の机
        desk[tt][1] = srclast
        if destfirst == 0:
            desk[tt][0] = xx
        # print(desk)
        # print(container)
        # print("##")
    ans = [0] * (N + 1)
    for i in range(1, N + 1):
        c = desk[i][0]
        while c != 0:
            ans[c] = i
            c = container[c][1]
    print(*ans[1:], sep="\n")
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    Q = int(next(tokens))  # type: int
    f = [int()] * (Q)  # type: "List[int]"
    t = [int()] * (Q)  # type: "List[int]"
    x = [int()] * (Q)  # type: "List[int]"
    for i in range(Q):
        f[i] = int(next(tokens))
        t[i] = int(next(tokens))
        x[i] = int(next(tokens))
    solve(N, Q, f, t, x)

if __name__ == '__main__':
    main()
