#!/usr/bin/env python3
import sys
from collections import Counter

def solve(N: int, M: int, A: "List[int]"):
    d = Counter(A[:M])
    ans = 0
    for i in range(M + 1):
        if d[i] == 0:
            ans = i
            break
    for i in range(N - M):
        d[A[i]] -= 1
        d[A[i + M]] += 1
        if d[A[i]] == 0:
            ans = min(ans, A[i])
    print(ans)
    return


# Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, M, A)

if __name__ == '__main__':
    main()
