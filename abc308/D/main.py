#!/usr/bin/env python3
import sys

MOD = 5  # type: int
YES = "Yes"  # type: str
NO = "No"  # type: str

snuke = "snuke"

from collections import deque
INF = 10 ** 16
def bfs(G, H, W, startY, startX) -> list:
    # ゴールやスタートを任意に設定できる問題では開始点が壁であるケースに注意!!!!
    q = deque()
    dist = [[INF] * W for _ in range(H)]
    q.append((startY, startX, 0))
    dist[startY][startX] = 0
    while q:
        nowy, nowx, let = q.popleft()
        for dx, dy in [(0, 1), (1, 0), (-1, 0), (0, -1)]:
            nexty = nowy + dy
            nextx = nowx + dx
            nextlet = (let + 1) % 5
            if nexty < 0 or nextx < 0 or nexty >= H or nextx >= W or dist[nexty][nextx] != INF or G[nexty][nextx] != snuke[nextlet]:
                continue
            q.append((nexty, nextx, nextlet))
            dist[nexty][nextx] = dist[nowy][nowx] + 1
    return dist

def solve(H: int, W: int, S: "List[str]"):
    dist = bfs(S, H, W, 0, 0)
    print(NO if dist[-1][-1] == INF else YES)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    H = int(next(tokens))  # type: int
    W = int(next(tokens))  # type: int
    S = [next(tokens) for _ in range(H)]  # type: "List[str]"
    solve(H, W, S)

if __name__ == '__main__':
    main()
