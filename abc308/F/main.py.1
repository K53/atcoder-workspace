#!/usr/bin/env python3
import sys
import heapq
INF = 10 ** 16
def solve(N: int, M: int, P: "List[int]", L: "List[int]", D: "List[int]"):
    q = []
    v = sorted([(-ll, -dd) for ll, dd in zip(L, D)] + [(-pp, -INF) for pp in P])
    ans = 0
    for a, b in v:
        if b == -INF:
            heapq.heappush(q, a)
        else:
            if len(q) > 0:
                highest = -heapq.heappop(q)
                ans += highest + b
    print(ans - sum(q))
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    P = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    L = [int(next(tokens)) for _ in range(M)]  # type: "List[int]"
    D = [int(next(tokens)) for _ in range(M)]  # type: "List[int]"
    solve(N, M, P, L, D)

if __name__ == '__main__':
    main()
