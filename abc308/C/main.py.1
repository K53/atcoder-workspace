#!/usr/bin/env python3
import sys
from functools import cmp_to_key


def solve(N: int, A: "List[int]", B: "List[int]"):
    def cmp(x, y):
        x -= 1
        y -= 1
        left = A[x] * (A[y] + B[y])
        right = A[y] * (A[x] + B[x])
        if left == right: 
            return -1 if x > y else 1
        return -1 if left < right else 1

    print(*reversed(sorted(range(1, N + 1), key=cmp_to_key(cmp))))
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int()] * (N)  # type: "List[int]"
    B = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    solve(N, A, B)

if __name__ == '__main__':
    main()
