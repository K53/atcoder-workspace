#!/usr/bin/env python3
import sys

def baseKto10int(baseKvalue: int, fromBase: int):
    """
    - fromBase : N進数
    - baseKvalue : N進数表記された数値
    ${fromBase}進数の数である${baseKvalue}を10進数で表した数値を得る。
    """
    ans = 0
    exp = 0
    baseKvalue = list(str(baseKvalue)) 
    for i in baseKvalue[::-1]:
        ans += int(i) * fromBase ** exp
        exp += 1
    return ans

def base10toKint(base10value, toBase):
    ans = []
    p = base10value
    while p >= toBase:
        p, q = divmod(p, toBase)
        ans.append(str(q))
    ans.append(str(p))
    return "".join(ans[::-1])

kk = int(base10toKint(11, 5)) - 11
print(kk)
print(baseKto10int(kk * 10 + 2 + 111, 5))

def solve(N: int, A: "List[int]", S: str):
    LL = 5 ** 3 + 1
    dp = [[0 for _ in range((LL))] for _ in range(N + 1)]
    for i in range(N):
        aa = A[i] + 1
        # 0 -> bit 1
        # 1 -> bit 2
        # 2 -> bit 3
        # 3 -> bit 4
        for bit in range(LL):
        
            if S[i] == "M":
                if bit == aa:
                    dp[i + 1][bit] = dp[i][bit] + 1
                else:
                    dp[i + 1][bit] = dp[i][bit]
            
            if S[i] == "E":
                p, q = divmod(bit, 5)
                # print(bit, q, aa, dp[i][bit], dp[i][p])
                if q == aa: # 2
                    dp[i + 1][bit] = dp[i][bit] + dp[i][p]
                else:
                    dp[i + 1][bit] = dp[i][bit]

            if S[i] == "X":
                pq, r = divmod(bit, 5)
                if r == aa and pq > 4: # 2
                    kk = base10toKint(bit, 5)
                    baseKto10int(kk * 10 + aa)
                    dp[i + 1][bit] = dp[i][bit] + dp[i][pq]
                else:
                    dp[i + 1][bit] = dp[i][bit]

    ans = 0
    for bit in range(4 ** 2, LL):
        if dp[-1][bit] == 0:
            continue
        pq, r = divmod(bit, 5)
        p, q = divmod(pq, 5)
        # print(p, q, r)
        w = set((p - 1, q - 1, r - 1))
        for i in range(4):
            if i not in w:
                print(bit, i, p - 1, q - 1, r - 1)
                ans += dp[-1][bit] * i
        
    print(ans)    
    print([i for i in range(LL)])
    print(*[base10toKint(i, 5) for i in range(LL)], sep=" ")
    for i in range(N + 1):
        print(dp[i])

    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    S = next(tokens)  # type: str
    solve(N, A, S)

if __name__ == '__main__':
    main()
