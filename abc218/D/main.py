#!/usr/bin/env python3
import sys

def solve(N: int, x: "List[int]", y: "List[int]"):
    # N = 2000
    # x = [i % 98 + i % 89 for i in range(N)]
    # y = [i % 13 + i % 98 for i in range(N)]
    dx = {val : i for i, val in enumerate(sorted(list(set(x))))}
    dy = {val : i for i, val in enumerate(sorted(list(set(y))))}
    # print(dx, dy)
    lx = [set() for _ in range(len(dx))]
    ly = [set() for _ in range(len(dy))]
    ll = []
    ls = set()
    for xx, yy in zip(x, y):
        ll.append((xx, yy))
        ls.add((xx, yy))
        lx[dx[xx]].add(dy[yy])
        ly[dy[yy]].add(dx[xx])
    ll.sort(key = lambda x: x[0]) 
    # print(lx, ly)
    # seen = set()
    # for xx, yy in zip(x, y):
    #     if set([dx[xx]]) & seen:
    #         continue
    #     seen.add(dx[xx])
    #     for desiredy in lx[dx[xx]]:
    #         if desiredy == dy[yy]:
    #             continue
    #         print(ly[dy[yy]], ly[desiredy])
    #         print(len(ly[dy[yy]] & ly[desiredy]) - 1)
    # for xx in range(len(dx)):
    #     for yy in range(len(dy)):
    #         for needy in lx[xx]:
    #             for needx in ly[yy]:
    #                 if needy <= yy or needx <= xx:
    #                     continue
    #                 if (needx, needy) in set(ll):
    #                     print(xx, yy, needx, needy)  
    # for xx in range(len(dx)):
    #     for yy in range(len(dy)):
    #         if (xx, yy) in ll:
    #             for needy in lx[xx]:
    #                 for needx in ly[yy]:
    #                     if needy <= yy or needx <= xx:
    #                         continue
    #                     if (needx, needy) in ll:
    #                         print(xx, yy, needx, needy)   
    ans = 0
    for xx, yy in ll:
        for needy in lx[dx[xx]]:
            for needx in ly[dy[yy]]:
                if needy <= yy or needx <= xx:
                    continue
                if (needx, needy) in ls:
                    print(xx, yy, needx, needy)    
                    ans += 1
    print(ans)
    return


# Generated by 2.8.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    x = [int()] * (N)  # type: "List[int]"
    y = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        x[i] = int(next(tokens))
        y[i] = int(next(tokens))
    solve(N, x, y)

if __name__ == '__main__':
    main()
