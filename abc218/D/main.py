#!/usr/bin/env python3
import sys
from itertools import combinations

def solve(N: int, x: "List[int]", y: "List[int]"):
    # N = 2000
    # x = [i % 98 + i % 89 for i in range(N)]
    # y = [i % 13 + i % 98 for i in range(N)]
    dx = {val : i for i, val in enumerate(sorted(list(set(x))))}
    dy = {val : i for i, val in enumerate(sorted(list(set(y))))}
    # print(dx)
    # print(dy)
    points = [[] for _ in range(len(list(dx)))]
    cc = []
    for xx, yy in zip(x, y):
        points[dx[xx]].append(dy[yy])
        cc.append((dx[xx], dy[yy]))
    # for i in range(len(points)):
        # print(points[i])
    ans = 0
    for case in combinations(cc, 2):
        x1, y1 = case[0]
        x2, y2 = case[1]
        if x1 == x2 or y1 == y2:
            continue
        if y2 in points[x1] and y1 in points[x2]:
            # print(x1, "->",y2, y1, "->", x2)
            ans += 1
    print(ans // 2)
    return


# Generated by 2.8.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    x = [int()] * (N)  # type: "List[int]"
    y = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        x[i] = int(next(tokens))
        y[i] = int(next(tokens))
    solve(N, x, y)

if __name__ == '__main__':
    main()
