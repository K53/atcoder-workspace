#!/usr/bin/env python3
import sys

YES = "Yes"  # type: str
NO = "No"  # type: str

def convertCordinate(N: int, L: "list[list[str]]"):
    for hh in range(N):
        if "#" in L[hh]:
            break
    transposedS = list(zip(*L))
    for ww in range(N):
        if "#" in transposedS[ww]:
            break
    toph = hh
    topw = ww

    ss = set() # y, x
    for hh in range(N):
        for ww in range(N):
            if L[hh][ww] == "#":
                ss.add((hh - toph, ww - topw))
    return ss


def solve(N: int, S: "List[str]", T: "List[str]"):
    for i in range(4):
        if convertCordinate(N, S) == convertCordinate(N, T):
            print(YES)
            return
        T = list(zip(*T[::-1]))
    print(NO)
    return


# Generated by 2.8.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    S = [next(tokens) for _ in range(N)]  # type: "List[str]"
    T = [next(tokens) for _ in range(N)]  # type: "List[str]"
    solve(N, S, T)

if __name__ == '__main__':
    main()
