#!/usr/bin/env python3
import sys

# MAX = 666667      # Pythonだと7.3 * 10^5程度が限度。それ以上はTLE(>2s)
MAX = 2 * (10 ** 6) + 1  # Pypyで 260~280 msくらい
MOD = 1000000007  # type: int

fac, finv, inv = [1, 1], [1, 1], [0, 1]
# fac : 階乗(1,2,6,...)
# inv : 逆元(1,2,...N) -> inv[i] = pow(i, 10 ** 9 + 5, 10 ** 9 + 7)
# finv: 逆元(階乗の逆元 = 1の逆元, 2の逆元, 6の逆元)
def cmbInit():
    for i in range(2, MAX):
        fac.append(fac[i - 1] * i % MOD)
        inv.append(MOD - inv[MOD % i] * (MOD // i) % MOD)
        finv.append(finv[i - 1] * inv[i] % MOD)
    # print(len(fac))
    # print(len(finv))

# 二項係数計算
def cmbMod(n: int,k: int):
    if n < k: return 0
    if n < 0 or k < 0: return 0
    # print(len(fac))
    # print(len(finv))
    # print(n, k)
    return fac[n] * (finv[k] * finv[n - k] % MOD) % MOD


def solve(N: int, M: int, K: int):
    cmbInit()
    if N > M + K:
        print(0)
        return
    total = cmbMod(N + M, M)
    if K == N:
        print(total)
        return
    ans = total - cmbMod(M + N, N - K - 1)
    # print()
    # a = 0
    # for i in range(N):
    #     dw = i + 2
    #     db = i
    #     # if i < 10:
    #         # print(N - dw, M - db)
    #         # print(cmbMod(N - dw + M - db, N - dw))
    #     a = (a + cmbMod(N - dw + M - db, N - dw)) % MOD
    #     if N - dw == 0:
    #         # print(N - dw, M - db)
    #         break
    # ans = total - a % MOD
    # # print(ans)
    print(MOD + ans if ans < 0 else ans)
    return


# Generated by 2.3.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    solve(N, M, K)

if __name__ == '__main__':
    main()
