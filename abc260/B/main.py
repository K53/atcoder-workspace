#!/usr/bin/env python3
import sys


def solve(N: int, X: int, Y: int, Z: int, A: "List[int]", B: "List[int]"):
    l = []
    ans = []
    for i in range(N):
        aa = A[i]
        bb = B[i]
        l.append((aa, -i, bb))
    l.sort(reverse=True)
    for _, p, _ in l[:X]:
        ans.append(-p + 1)
    
    ll = []
    for aa, p, bb in l[X:]:
        ll.append((bb, p, aa))
    ll.sort(reverse=True)
    for _, p, _ in ll[:Y]:
        ans.append(-p + 1)
    
    lll = []
    for aa, p, bb in ll[Y:]:
        lll.append((aa + bb, p))
    lll.sort(reverse=True)
    for _, p in lll[:Z]:
        ans.append(-p + 1)
    ans.sort()
    print(*ans, sep="\n")
    

    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    X = int(next(tokens))  # type: int
    Y = int(next(tokens))  # type: int
    Z = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    B = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, X, Y, Z, A, B)

if __name__ == '__main__':
    main()
