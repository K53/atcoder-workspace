#!/usr/bin/env python3
import sys
import math
import functools
def _lcm(a, b):
    return a * b // math.gcd(a, b)

def lcm(*vals):
    return functools.reduce(_lcm, vals)

def solve(N: int, M: int, a: "List[int]"):
    b = [aa // 2 for aa in a]
    l = lcm(*b)
    for i in range(N):
        if (l // b[i]) % 2 == 0:
            print(0)
            return
    p, q = divmod(M // l, 2)
    print(p + q)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    a = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, M, a)

if __name__ == '__main__':
    main()
