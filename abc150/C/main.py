#!/usr/bin/env python3
import sys

class PermutationFactory():
    def __init__(self, N: int) -> None:
        """
        階乗算出
        O(N)
        """
        self.N = N
        self.fac = [1, 1] # 階乗リスト
        for i in range(2, N + 1):
            self.fac.append(self.fac[i - 1] * i)
        return
    
    def kth_permutation(self, k: int) -> list:
        """
        k番目の順列を返す。O(N)
        先頭要素から固定していく。その要素を固定したときの順列の場合の和をkから引いていく。
        args:
            k: 0〜(N-1)の順列の昇順k番目 (0-index)
        return:
            res: k番目のリスト
        """
        candidates = list(range(self.N)) # 任意の配列でもいいが重複がないこと
        res = []
        for i in reversed(range(self.N)):
            a = self.fac[i]
            j, k = divmod(k, a)
            res.append(candidates[j])
            del candidates[j]
        return res

    def get_kth_of_permutation(self, L: list) -> int:
        """
        args:
            L: 0〜(N-1)までの順列で昇順何番目かを求めたい順列
        return:
            k: 昇順何番目か (0-index)
        """
        k = 0
        while len(L) > 1:
            a = len([ll for ll in L if ll < L[0]])
            k += a * self.fac[len(L) - 1]
            L = L[1:]
        return k


def solve(N: int, P: "List[int]", Q: "List[int]"):
    N = 2 * 10 ** 5
    P = list(range(1, 2 * 10 ** 5 + 1))
    Q = list(reversed(range(1, 2 * 10 ** 5 + 1)))
    pf = PermutationFactory(len(P))
    pp = pf.get_kth_of_permutation(P)
    qq = pf.get_kth_of_permutation(Q)
    print(abs(qq - pp))
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    P = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    Q = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, P, Q)

if __name__ == '__main__':
    main()
