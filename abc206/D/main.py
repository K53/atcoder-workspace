#!/usr/bin/env python3
from math import perm
import sys
INF = 10 ** 16

def solve(N: int, A: "List[int]"):
    if N == 1:
        print(0)
        return
    l = A[:(N // 2)]
    r = A[-(N // 2):]
    r = r[::-1]
    nums = [-1] * (2 * 10 ** 5 + 1)
    ans = 0
    for i in range(N // 2):
        if nums[l[i]] == -1:
            if nums[r[i]] == -1:
                if l[i] != r[i] if nums[r[i]] == -1 else nums[r[i]]:
                    nums[l[i]] = r[i] if nums[r[i]] == -1 else nums[r[i]]
                    ans += 1
                    print("a2")
            else:
                if l[i] != nums[r[i]] if nums[nums[r[i]]] == -1 else nums[nums[r[i]]]:
                    nums[l[i]] = nums[r[i]] if nums[nums[r[i]]] == -1 else nums[nums[r[i]]]
                    ans += 1
                    print(l[i])
                    print(nums[r[i]])
                    print(nums[nums[r[i]]])
                    print(l[i] != nums[r[i]] if nums[nums[r[i]]] == -1 else nums[nums[r[i]]])
        else:
            if nums[r[i]] == -1:
                if nums[l[i]] != r[i] if nums[r[i]] == -1 else nums[r[i]]:
                    nums[l[i]] = r[i] if nums[r[i]] == -1 else nums[r[i]]
                    ans += 1
                    print("aa")
            else:
                if nums[l[i]] != nums[r[i]] if nums[nums[r[i]]] == -1 else nums[nums[r[i]]]:
                    nums[l[i]] = nums[r[i]] if nums[nums[r[i]]] == -1 else nums[nums[r[i]]]
                    ans += 1
                    print("a")
        print(nums[:10])
    print(ans)
    return


# Generated by 2.3.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, A)

if __name__ == '__main__':
    main()
